(function() {

// Last commit: 3026cab (2013-10-04 17:58:19 -0400)


(function() {
var get = Ember.get, set = Ember.set;

function samePosition(a, b) {
  return a && b && a.x === b.x && a.y === b.y;
}

function positionElement() {
  var element, position, _position;

  Ember.instrument('view.updateContext.positionElement', this, function() {
    element = get(this, 'element');
    position = get(this, 'position');
    _position = this._position;

    if (!position || !element) { return; }

    // TODO: avoid needing this by avoiding unnecessary
    // calls to this method in the first place
    if (samePosition(position, _position)) { return; }
    this._parentView.applyTransform(element, position.x, position.y);

    this._position = position;
  }, this);
}

Ember.ListItemViewMixin = Ember.Mixin.create({
  init: function(){
    this._super();
    this.one('didInsertElement', positionElement);
  },
  classNames: ['ember-list-item-view'],
  _position: null,
  _positionDidChange: Ember.observer(positionElement, 'position'),
  _positionElement: positionElement
});

})();



(function() {
var get = Ember.get, set = Ember.set;

var backportedInnerString = function(buffer) {
  var content = [], childBuffers = buffer.childBuffers;

  Ember.ArrayPolyfills.forEach.call(childBuffers, function(buffer) {
    var stringy = typeof buffer === 'string';
    if (stringy) {
      content.push(buffer);
    } else {
      buffer.array(content);
    }
  });

  return content.join('');
};

function willInsertElementIfNeeded(view) {
  if (view.willInsertElement) {
    view.willInsertElement();
  }
}

function didInsertElementIfNeeded(view) {
  if (view.didInsertElement) {
    view.didInsertElement();
  }
}

function rerender() {
  var element, buffer, context, hasChildViews;
  element = get(this, 'element');

  if (!element) { return; }

  context = get(this, 'context');

  // releases action helpers in contents
  // this means though that the ListViewItem itself can't use classBindings or attributeBindings
  // need support for rerender contents in ember
  this.triggerRecursively('willClearRender');

  if (this.lengthAfterRender > this.lengthBeforeRender) {
    this.clearRenderedChildren();
    this._childViews.length = this.lengthBeforeRender; // triage bug in ember
  }

  if (context) {
    buffer = Ember.RenderBuffer();
    buffer = this.renderToBuffer(buffer);

    // check again for childViews, since rendering may have added some
    hasChildViews = this._childViews.length > 0;

    if (hasChildViews) {
      this.invokeRecursively(willInsertElementIfNeeded, false);
    }

    element.innerHTML = buffer.innerString ? buffer.innerString() : backportedInnerString(buffer);

    set(this, 'element', element);

    this.transitionTo('inDOM');

    if (hasChildViews) {
      this.invokeRecursively(didInsertElementIfNeeded, false);
    }
  } else {
    element.innerHTML = ''; // when there is no context, this view should be completely empty
  }
}

/**
  The `Ember.ListViewItem` view class renders a
  [div](https://developer.mozilla.org/en/HTML/Element/div) HTML element
  with `ember-list-item-view` class. It allows you to specify a custom item
  handlebars template for `Ember.ListView`.

  Example:

  ```handlebars
  <script type="text/x-handlebars" data-template-name="row_item">
    {{name}}
  </script>
  ```

  ```javascript
  App.ListView = Ember.ListView.extend({
    height: 500,
    rowHeight: 20,
    itemViewClass: Ember.ListItemView.extend({templateName: "row_item"})
  });
  ```

  @extends Ember.View
  @class ListItemView
  @namespace Ember
*/
Ember.ListItemView = Ember.View.extend(Ember.ListItemViewMixin, {
  updateContext: function(newContext){
    var context = get(this, 'context');
    Ember.instrument('view.updateContext.render', this, function() {
      if (context !== newContext) {
        this.set('context', newContext);
        if (newContext instanceof Ember.ObjectController) {
          this.set('controller', newContext);
        }
      }
    }, this);
  },
  rerender: function () { Ember.run.scheduleOnce('render', this, rerender); },
  _contextDidChange: Ember.observer(rerender, 'context', 'controller')
});

})();



(function() {
var get = Ember.get, set = Ember.set;

Ember.ReusableListItemView = Ember.View.extend(Ember.ListItemViewMixin, {
  init: function(){
    this._super();
    this.set('context', Ember.ObjectProxy.create());
  },
  isVisible: Ember.computed('context.content', function(){
    return !!this.get('context.content');
  }),
  updateContext: function(newContext){
    var context = get(this, 'context.content');
    if (context !== newContext) {
      if (this.state === 'inDOM') {
        this.prepareForReuse(newContext);
      }
      set(this, 'context.content', newContext);
    }
  },
  prepareForReuse: Ember.K
});

})();



(function() {
var el = document.createElement('div'), style = el.style;

var propPrefixes = ['Webkit', 'Moz', 'O', 'ms'];

function testProp(prop) {
  if (prop in style) return prop;
  var uppercaseProp = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i=0; i<propPrefixes.length; i++) {
    var prefixedProp = propPrefixes[i] + uppercaseProp;
    if (prefixedProp in style) {
      return prefixedProp;
    }
  }
  return null;
}

var transformProp = testProp('transform');
var perspectiveProp = testProp('perspective');

var supports2D = transformProp !== null;
var supports3D = perspectiveProp !== null;

Ember.ListViewHelper = {
  transformProp: transformProp,
  applyTransform: (function(){
    if (supports2D) {
      return function(element, x, y){
        element.style[transformProp] = 'translate(' + x + 'px, ' + y + 'px)';
      };
    } else {
      return function(element, x, y){
        element.style.top  = y + 'px';
        element.style.left = x + 'px';
      };
    }
  })(),
  apply3DTransform: (function(){
    if (supports3D) {
      return function(element, x, y){
        element.style[transformProp] = 'translate3d(' + x + 'px, ' + y + 'px, 0)';
      };
    } else if (supports2D) {
      return function(element, x, y){
        element.style[transformProp] = 'translate(' + x + 'px, ' + y + 'px)';
      };
    } else {
      return function(element, x, y){
        element.style.top  = y + 'px';
        element.style.left = x + 'px';
      };
    }
  })()
};

})();



(function() {
var get = Ember.get, set = Ember.set,
min = Math.min, max = Math.max, floor = Math.floor,
ceil = Math.ceil,
forEach = Ember.ArrayPolyfills.forEach;

function addContentArrayObserver() {
  var content = get(this, 'content');
  if (content) {
    content.addArrayObserver(this);
  }
}

function removeAndDestroy(object){
  this.removeObject(object);
  object.destroy();
}

function syncChildViews(){
  Ember.run.once(this, '_syncChildViews');
}

function sortByContentIndex (viewOne, viewTwo){
  return get(viewOne, 'contentIndex') - get(viewTwo, 'contentIndex');
}

function notifyMutationListeners() {
  if (Ember.View.notifyMutationListeners) {
    Ember.run.once(Ember.View, 'notifyMutationListeners');
  }
}

var domManager = Ember.create(Ember.ContainerView.proto().domManager);

domManager.prepend = function(view, html) {
  view.$('.ember-list-container').prepend(html);
  notifyMutationListeners();
};

function syncListContainerWidth(){
  var elementWidth, columnCount, containerWidth, element;

  elementWidth = get(this, 'elementWidth');
  columnCount = get(this, 'columnCount');
  containerWidth = elementWidth * columnCount;
  element = this.$('.ember-list-container');

  if (containerWidth && element) {
    element.css('width', containerWidth);
  }
}

function enableProfilingOutput() {
  function before(name, time, payload) {
    console.time(name);
  }

  function after (name, time, payload) {
    console.timeEnd(name);
  }

  if (Ember.ENABLE_PROFILING) {
    Ember.subscribe('view._scrollContentTo', {
      before: before,
      after: after
    });
    Ember.subscribe('view.updateContext', {
      before: before,
      after: after
    });
  }
}

/**
  @class Ember.ListViewMixin
  @namespace Ember
*/
Ember.ListViewMixin = Ember.Mixin.create({
  itemViewClass: Ember.ListItemView,
  emptyViewClass: Ember.View,
  classNames: ['ember-list-view'],
  attributeBindings: ['style'],
  domManager: domManager,
  scrollTop: 0,
  bottomPadding: 0,
  _lastEndingIndex: 0,
  paddingCount: 1,

  /**
    @private

    Setup a mixin.
    - adding observer to content array
    - creating child views based on height and length of the content array

    @method init
  */
  init: function() {
    this._super();
    this.on('didInsertElement', syncListContainerWidth);
    this.columnCountDidChange();
    this._syncChildViews();
    this._addContentArrayObserver();
  },

  _addContentArrayObserver: Ember.beforeObserver(function() {
    addContentArrayObserver.call(this);
  }, 'content'),

  /**
    Called on your view when it should push strings of HTML into a
    `Ember.RenderBuffer`.

    Adds a [div](https://developer.mozilla.org/en-US/docs/HTML/Element/div)
    with a required `ember-list-container` class.

    @method render
    @param {Ember.RenderBuffer} buffer The render buffer
  */
  render: function(buffer) {
    buffer.push('<div class="ember-list-container">');
    this._super(buffer);
    buffer.push('</div>');
  },

  willInsertElement: function() {
    if (!this.get("height") || !this.get("rowHeight")) {
      throw new Error("A ListView must be created with a height and a rowHeight.");
    }
    this._super();
  },

  /**
    @private

    Sets inline styles of the view:
    - height
    - width
    - position
    - overflow
    - -webkit-overflow
    - overflow-scrolling

    Called while attributes binding.

    @property {Ember.ComputedProperty} style
  */
  style: Ember.computed('height', 'width', function() {
    var height, width, style, css;

    height = get(this, 'height');
    width = get(this, 'width');
    css = get(this, 'css');

    style = '';

    if (height) { style += 'height:' + height + 'px;'; }
    if (width)  { style += 'width:'  + width  + 'px;'; }

    for ( var rule in css ){
      if (css.hasOwnProperty(rule)) {
        style += rule + ':' + css[rule] + ';';
      }
    }

    return style;
  }),

  /**
    @private

    Performs visual scrolling. Is overridden in Ember.ListView.

    @method scrollTo
  */
  scrollTo: function(y) {
    throw new Error('must override to perform the visual scroll and effectively delegate to _scrollContentTo');
  },

  /**
    @private

    Internal method used to force scroll position

    @method scrollTo
  */
  _scrollTo: Ember.K,

  /**
    @private
    @method _scrollContentTo
  */
  _scrollContentTo: function(y) {
    var startingIndex, endingIndex,
        contentIndex, visibleEndingIndex, maxContentIndex,
        contentIndexEnd, contentLength, scrollTop;

    scrollTop = max(0, y);

    Ember.instrument('view._scrollContentTo', {
      scrollTop: scrollTop,
      content: get(this, 'content'),
      startingIndex: this._startingIndex(),
      endingIndex: min(max(get(this, 'content.length') - 1, 0), this._startingIndex() + this._numChildViewsForViewport())
    }, function () {
      contentLength = get(this, 'content.length');
      set(this, 'scrollTop', scrollTop);

      maxContentIndex = max(contentLength - 1, 0);

      startingIndex = this._startingIndex();
      visibleEndingIndex = startingIndex + this._numChildViewsForViewport();

      endingIndex = min(maxContentIndex, visibleEndingIndex);

      this.trigger('scrollYChanged', y);

      if (startingIndex === this._lastStartingIndex &&
          endingIndex === this._lastEndingIndex) {
        return;
      }

      this._reuseChildren();

      this._lastStartingIndex = startingIndex;
      this._lastEndingIndex = endingIndex;
    }, this);
  },

  /**
    @private

    Computes the height for a `Ember.ListView` scrollable container div.
    You must specify `rowHeight` parameter for the height to be computed properly.

    @property {Ember.ComputedProperty} totalHeight
  */
  totalHeight: Ember.computed('content.length', 'rowHeight', 'columnCount', 'bottomPadding', function() {
    var contentLength, rowHeight, columnCount, bottomPadding;

    contentLength = get(this, 'content.length');
    rowHeight = get(this, 'rowHeight');
    columnCount = get(this, 'columnCount');
    bottomPadding = get(this, 'bottomPadding');

    return ((ceil(contentLength / columnCount)) * rowHeight) + bottomPadding;
  }),

  /**
    @private
    @method _prepareChildForReuse
  */
  _prepareChildForReuse: function(childView) {
    childView.prepareForReuse();
  },

  /**
    @private
    @method _reuseChildForContentIndex
  */
  _reuseChildForContentIndex: function(childView, contentIndex) {
    var content, context, newContext, childsCurrentContentIndex, position, enableProfiling;

    content = get(this, 'content');
    enableProfiling = get(this, 'enableProfiling');
    position = this.positionForIndex(contentIndex);
    set(childView, 'position', position);

    set(childView, 'contentIndex', contentIndex);

    if (enableProfiling) {
      Ember.instrument('view._reuseChildForContentIndex', position, function(){}, this);
    }

    newContext = content.objectAt(contentIndex);
    childView.updateContext(newContext);
  },

  /**
    @private
    @method positionForIndex
  */
  positionForIndex: function(index){
    var elementWidth, width, columnCount, rowHeight, y, x;

    elementWidth = get(this, 'elementWidth') || 1;
    width = get(this, 'width') || 1;
    columnCount = get(this, 'columnCount');
    rowHeight = get(this, 'rowHeight');

    y = (rowHeight * floor(index/columnCount));
    x = (index % columnCount) * elementWidth;

    return {
      y: y,
      x: x
    };
  },

  /**
    @private
    @method _childViewCount
  */
  _childViewCount: function() {
    var contentLength, childViewCountForHeight;

    contentLength = get(this, 'content.length');
    childViewCountForHeight = this._numChildViewsForViewport();

    return min(contentLength, childViewCountForHeight);
  },

  /**
    @private

    Returns a number of columns in the Ember.ListView (for grid layout).

    If you want to have a multi column layout, you need to specify both
    `width` and `elementWidth`.

    If no `elementWidth` is specified, it returns `1`. Otherwise, it will
    try to fit as many columns as possible for a given `width`.

    @property {Ember.ComputedProperty} columnCount
  */
  columnCount: Ember.computed('width', 'elementWidth', function() {
    var elementWidth, width, count;

    elementWidth = get(this, 'elementWidth');
    width = get(this, 'width');

    if (elementWidth) {
      count = floor(width / elementWidth);
    } else {
      count = 1;
    }

    return count;
  }),

  /**
    @private

    Fires every time column count is changed.

    @event columnCountDidChange
  */
  columnCountDidChange: Ember.observer(function(){
    var ratio, currentScrollTop, proposedScrollTop, maxScrollTop,
        scrollTop, lastColumnCount, newColumnCount, element;

    lastColumnCount = this._lastColumnCount;

    currentScrollTop = get(this, 'scrollTop');
    newColumnCount = get(this, 'columnCount');
    maxScrollTop = get(this, 'maxScrollTop');
    element = get(this, 'element');

    this._lastColumnCount = newColumnCount;

    if (lastColumnCount) {
      ratio = (lastColumnCount / newColumnCount);
      proposedScrollTop = currentScrollTop * ratio;
      scrollTop = min(maxScrollTop, proposedScrollTop);

      this._scrollTo(scrollTop);
      set(this, 'scrollTop', scrollTop);
    }

    if (arguments.length > 0) {
      // invoked by observer
      Ember.run.schedule('afterRender', this, syncListContainerWidth);
    }
  }, 'columnCount'),

  /**
    @private

    Computes max possible scrollTop value given the visible viewport
    and scrollable container div height.

    @property {Ember.ComputedProperty} maxScrollTop
  */
  maxScrollTop: Ember.computed('height', 'totalHeight', function(){
    var totalHeight, viewportHeight;

    totalHeight = get(this, 'totalHeight');
    viewportHeight = get(this, 'height');

    return max(0, totalHeight - viewportHeight);
  }),

  /**
    @private

    Computes the number of views that would fit in the viewport area.
    You must specify `height` and `rowHeight` parameters for the number of
    views to be computed properly.

    @method _numChildViewsForViewport
  */
  _numChildViewsForViewport: function() {
    var height, rowHeight, paddingCount, columnCount;

    height = get(this, 'height');
    rowHeight = get(this, 'rowHeight');
    paddingCount = get(this, 'paddingCount');
    columnCount = get(this, 'columnCount');

    return (ceil(height / rowHeight) * columnCount) + (paddingCount * columnCount);
  },

  /**
    @private

    Computes the starting index of the item views array.
    Takes `scrollTop` property of the element into account.

    Is used in `_syncChildViews`.

    @method _startingIndex
  */
  _startingIndex: function() {
    var scrollTop, rowHeight, columnCount, calculatedStartingIndex,
        contentLength, largestStartingIndex;

    contentLength = get(this, 'content.length');
    scrollTop = get(this, 'scrollTop');
    rowHeight = get(this, 'rowHeight');
    columnCount = get(this, 'columnCount');

    calculatedStartingIndex = floor(scrollTop / rowHeight) * columnCount;

    largestStartingIndex = max(contentLength - 1, 0);

    return min(calculatedStartingIndex, largestStartingIndex);
  },

  /**
    @private
    @event contentWillChange
  */
  contentWillChange: Ember.beforeObserver(function() {
    var content;

    content = get(this, 'content');

    if (content) {
      content.removeArrayObserver(this);
    }
  }, 'content'),

  /**),
    @private
    @event contentDidChange
  */
  contentDidChange: Ember.observer(function() {
    addContentArrayObserver.call(this);
    syncChildViews.call(this);
  }, 'content'),

  /**
    @private
    @property {Function} needsSyncChildViews
  */
  needsSyncChildViews: Ember.observer(syncChildViews, 'height', 'width', 'columnCount'),

  /**
    @private

    Returns a new item view. Takes `contentIndex` to set the context
    of the returned view properly.

    @param {Number} contentIndex item index in the content array
    @method _addItemView
  */
  _addItemView: function(contentIndex){
    var itemViewClass, childView;

    itemViewClass = get(this, 'itemViewClass');
    childView = this.createChildView(itemViewClass);

    this.pushObject(childView);
   },

  /**
    @private

    Intelligently manages the number of childviews.

    @method _syncChildViews
   **/
  _syncChildViews: function(){
    var itemViewClass, startingIndex, childViewCount,
        endingIndex, numberOfChildViews, numberOfChildViewsNeeded,
        childViews, count, delta, index, childViewsLength, contentIndex;

    if (get(this, 'isDestroyed') || get(this, 'isDestroying')) {
      return;
    }

    childViewCount = this._childViewCount();
    childViews = this.positionOrderedChildViews();

    startingIndex = this._startingIndex();
    endingIndex = startingIndex + childViewCount;

    numberOfChildViewsNeeded = childViewCount;
    numberOfChildViews = childViews.length;

    delta = numberOfChildViewsNeeded - numberOfChildViews;

    if (delta === 0) {
      // no change
    } else if (delta > 0) {
      // more views are needed
      contentIndex = this._lastEndingIndex;

      for (count = 0; count < delta; count++, contentIndex++) {
        this._addItemView(contentIndex);
      }

    } else {
      // less views are needed
      forEach.call(
        childViews.splice(numberOfChildViewsNeeded, numberOfChildViews),
        removeAndDestroy,
        this
      );
    }

    this._scrollContentTo(get(this, 'scrollTop'));

    // if _scrollContentTo short-circuits, we still need
    // to call _reuseChildren to get new views positioned
    // and rendered correctly
    this._reuseChildren();

    this._lastStartingIndex = startingIndex;
    this._lastEndingIndex   = this._lastEndingIndex + delta;
  },

  /**
    @private
    @method _reuseChildren
  */
  _reuseChildren: function(){
    var contentLength, childViews, childViewsLength,
        startingIndex, endingIndex, childView, attrs,
        contentIndex, visibleEndingIndex, maxContentIndex,
        contentIndexEnd, scrollTop;

    scrollTop = get(this, 'scrollTop');
    contentLength = get(this, 'content.length');
    maxContentIndex = max(contentLength - 1, 0);
    childViews = this._childViews;
    childViewsLength =  childViews.length;

    startingIndex = this._startingIndex();
    visibleEndingIndex = startingIndex + this._numChildViewsForViewport();

    endingIndex = min(maxContentIndex, visibleEndingIndex);

    this.trigger('scrollContentTo', scrollTop);

    contentIndexEnd = min(visibleEndingIndex, startingIndex + childViewsLength);

    for (contentIndex = startingIndex; contentIndex < contentIndexEnd; contentIndex++) {
      childView = childViews[contentIndex % childViewsLength];
      this._reuseChildForContentIndex(childView, contentIndex);
    }
  },

  /**
    @private
    @method positionOrderedChildViews
  */
  positionOrderedChildViews: function() {
    return this._childViews.sort(sortByContentIndex);
  },

  arrayWillChange: Ember.K,

  /**
    @private
    @event arrayDidChange
  */
  // TODO: refactor
  arrayDidChange: function(content, start, removedCount, addedCount) {
    var index, contentIndex;

    if (this.state === 'inDOM') {
      // ignore if all changes are out of the visible change
      if( start >= this._lastStartingIndex || start < this._lastEndingIndex) {
        index = 0;
        // ignore all changes not in the visible range
        // this can re-position many, rather then causing a cascade of re-renders
        forEach.call(
          this.positionOrderedChildViews(),
          function(childView) {
            contentIndex = this._lastStartingIndex + index;
            this._reuseChildForContentIndex(childView, contentIndex);
            index++;
          },
          this
        );
      }

      syncChildViews.call(this);
    }
  }
});

})();



(function() {
var get = Ember.get, set = Ember.set;

/**
  The `Ember.ListView` view class renders a
  [div](https://developer.mozilla.org/en/HTML/Element/div) HTML element,
  with `ember-list-view` class.

  The context of each item element within the `Ember.ListView` are populated
  from the objects in the `Element.ListView`'s `content` property.

  ### `content` as an Array of Objects

  The simplest version of an `Ember.ListView` takes an array of object as its
  `content` property. The object will be used as the `context` each item element
  inside the rendered `div`.

  Example:

  ```javascript
  App.contributors = [{ name: 'Stefan Penner' }, { name: 'Alex Navasardyan' }, { name: 'Rey Cohen'}];
  ```

  ```handlebars
  {{#collection Ember.ListView contentBinding="App.contributors" height=500 rowHeight=50}}
    {{name}}
  {{/collection}}
  ```

  Would result in the following HTML:

  ```html
   <div id="ember181" class="ember-view ember-list-view" style="height:500px;width:500px;position:relative;overflow:scroll;-webkit-overflow-scrolling:touch;overflow-scrolling:touch;">
    <div class="ember-list-container">
      <div id="ember186" class="ember-view ember-list-item-view" style="-webkit-transform: translate3d(0px, 0px, 0);">
        <script id="metamorph-0-start" type="text/x-placeholder"></script>Stefan Penner<script id="metamorph-0-end" type="text/x-placeholder"></script>
      </div>
      <div id="ember187" class="ember-view ember-list-item-view" style="-webkit-transform: translate3d(0px, 50px, 0);">
        <script id="metamorph-1-start" type="text/x-placeholder"></script>Alex Navasardyan<script id="metamorph-1-end" type="text/x-placeholder"></script>
      </div>
      <div id="ember188" class="ember-view ember-list-item-view" style="-webkit-transform: translate3d(0px, 100px, 0);">
        <script id="metamorph-2-start" type="text/x-placeholder"></script>Rey Cohen<script id="metamorph-2-end" type="text/x-placeholder"></script>
      </div>
      <div id="ember189" class="ember-view ember-list-scrolling-view" style="height: 150px"></div>
    </div>
  </div>
  ```

  By default `Ember.ListView` provides support for `height`,
  `rowHeight`, `width`, `elementWidth`, `scrollTop` parameters.

  Note, that `height` and `rowHeight` are required parameters.

  ```handlebars
  {{#collection Ember.ListView contentBinding="App.contributors" height=500 rowHeight=50}}
    {{name}}
  {{/collection}}
  ```

  If you would like to have multiple columns in your view layout, you can
  set `width` and `elementWidth` parameters respectively.

  ```handlebars
  {{#collection Ember.ListView contentBinding="App.contributors" height=500 rowHeight=50 width=500 elementWidth=80}}
    {{name}}
  {{/collection}}
  ```

  ### extending `Ember.ListView`

  Example:

  ```handlebars
  {{view App.ListView contentBinding="content"}}

  <script type="text/x-handlebars" data-template-name="row_item">
    {{name}}
  </script>
  ```

  ```javascript
  App.ListView = Ember.ListView.extend({
    height: 500,
    width: 500,
    elementWidth: 80,
    rowHeight: 20,
    itemViewClass: Ember.ListItemView.extend({templateName: "row_item"})
  });
  ```

  @extends Ember.ContainerView
  @class ListView
  @namespace Ember
*/
Ember.ListView = Ember.ContainerView.extend(Ember.ListViewMixin, {
  css: {
    position: 'relative',
    overflow: 'scroll',
    '-webkit-overflow-scrolling': 'touch',
    'overflow-scrolling': 'touch'
  },

  applyTransform: Ember.ListViewHelper.applyTransform,

  _scrollTo: function(scrollTop) {
    var element = get(this, 'element');

    if (element) { element.scrollTop = scrollTop; }
  },

  didInsertElement: function() {
    var that, element;

    that = this,
    element = get(this, 'element');

    this._updateScrollableHeight();

    this._scroll = function(e) { that.scroll(e); };

    Ember.$(element).on('scroll', this._scroll);
  },

  willDestroyElement: function() {
    var element;

    element = get(this, 'element');

    Ember.$(element).off('scroll', this._scroll);
  },

  scroll: function(e) {
    Ember.run(this, this.scrollTo, e.target.scrollTop);
  },

  scrollTo: function(y){
    var element = get(this, 'element');
    this._scrollTo(y);
    this._scrollContentTo(y);
  },

  totalHeightDidChange: Ember.observer(function () {
    Ember.run.scheduleOnce('afterRender', this, this._updateScrollableHeight);
  }, 'totalHeight'),

  _updateScrollableHeight: function () {
    if (this.state === 'inDOM') {
      this.$('.ember-list-container').css({
        height: get(this, 'totalHeight')
      });
    }
  }
});

})();



(function() {
var fieldRegex = /input|textarea|select/i,
  hasTouch = ('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,
  handleStart, handleMove, handleEnd, handleCancel,
  startEvent, moveEvent, endEvent, cancelEvent;
if (hasTouch) {
  startEvent = 'touchstart';
  handleStart = function (e) {
    var touch = e.touches[0],
      target = touch && touch.target;
    // avoid e.preventDefault() on fields
    if (target && fieldRegex.test(target.tagName)) {
      return;
    }
    bindWindow(this.scrollerEventHandlers);
    this.willBeginScroll(e.touches, e.timeStamp);
    e.preventDefault();
  };
  moveEvent = 'touchmove';
  handleMove = function (e) {
    this.continueScroll(e.touches, e.timeStamp);
  };
  endEvent = 'touchend';
  handleEnd = function (e) {
    // if we didn't end up scrolling we need to
    // synthesize click since we did e.preventDefault()
    // on touchstart
    if (!this._isScrolling) {
      synthesizeClick(e);
    }
    unbindWindow(this.scrollerEventHandlers);
    this.endScroll(e.timeStamp);
  };
  cancelEvent = 'touchcancel';
  handleCancel = function (e) {
    unbindWindow(this.scrollerEventHandlers);
    this.endScroll(e.timeStamp);
  };
} else {
  startEvent = 'mousedown';
  handleStart = function (e) {
    if (e.which !== 1) return;
    var target = e.target;
    // avoid e.preventDefault() on fields
    if (target && fieldRegex.test(target.tagName)) {
      return;
    }
    bindWindow(this.scrollerEventHandlers);
    this.willBeginScroll([e], e.timeStamp);
    e.preventDefault();
  };
  moveEvent = 'mousemove';
  handleMove = function (e) {
    this.continueScroll([e], e.timeStamp);
  };
  endEvent = 'mouseup';
  handleEnd = function (e) {
    unbindWindow(this.scrollerEventHandlers);
    this.endScroll(e.timeStamp);
  };
  cancelEvent = 'mouseout';
  handleCancel = function (e) {
    if (e.relatedTarget) return;
    unbindWindow(this.scrollerEventHandlers);
    this.endScroll(e.timeStamp);
  };
}

function handleWheel(e) {
  this.mouseWheel(e);
  e.preventDefault();
}

function bindElement(el, handlers) {
  el.addEventListener(startEvent, handlers.start, false);
  el.addEventListener('mousewheel', handlers.wheel, false);
}

function unbindElement(el, handlers) {
  el.removeEventListener(startEvent, handlers.start, false);
  el.removeEventListener('mousewheel', handlers.wheel, false);
}

function bindWindow(handlers) {
  window.addEventListener(moveEvent, handlers.move, true);
  window.addEventListener(endEvent, handlers.end, true);
  window.addEventListener(cancelEvent, handlers.cancel, true);
}

function unbindWindow(handlers) {
  window.removeEventListener(moveEvent, handlers.move, true);
  window.removeEventListener(endEvent, handlers.end, true);
  window.removeEventListener(cancelEvent, handlers.cancel, true);
}

Ember.VirtualListScrollerEvents = Ember.Mixin.create({
  init: function() {
    this.on('didInsertElement', this, 'bindScrollerEvents');
    this.on('willDestroyElement', this, 'unbindScrollerEvents');
    this.scrollerEventHandlers = {
      start: bind(this, handleStart),
      move: bind(this, handleMove),
      end: bind(this, handleEnd),
      cancel: bind(this, handleCancel),
      wheel: bind(this, handleWheel)
    };
    return this._super();
  },
  bindScrollerEvents: function() {
    var el = this.get('element'),
      handlers = this.scrollerEventHandlers;
    bindElement(el, handlers);
  },
  unbindScrollerEvents: function() {
    var el = this.get('element'),
      handlers = this.scrollerEventHandlers;
    unbindElement(el, handlers);
    unbindWindow(handlers);
  }
});

function bind(view, handler) {
  return function (evt) {
    handler.call(view, evt);
  };
}

function synthesizeClick(e) {
  var point = e.changedTouches[0],
    target = point.target,
    ev;
  if (target && fieldRegex.test(target.tagName)) {
    ev = document.createEvent('MouseEvents');
    ev.initMouseEvent('click', true, true, e.view, 1, point.screenX, point.screenY, point.clientX, point.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);
    return target.dispatchEvent(ev);
  }
}

})();



(function() {
/*global Scroller*/
var max = Math.max, get = Ember.get, set = Ember.set;

function updateScrollerDimensions(target) {
  var width, height, totalHeight;

  target = target || this;

  width = get(target, 'width');
  height = get(target, 'height');
  totalHeight = get(target, 'totalHeight');

  target.scroller.setDimensions(width, height, width, totalHeight);
  target.trigger('scrollerDimensionsDidChange');
}

/**
  VirtualListView

  @class VirtualListView
  @namespace Ember
*/
Ember.VirtualListView = Ember.ContainerView.extend(Ember.ListViewMixin, Ember.VirtualListScrollerEvents, {
  _isScrolling: false,
  _mouseWheel: null,
  css: {
    position: 'relative',
    overflow: 'hidden'
  },

  init: function(){
    this._super();
    this.setupScroller();
  },
  _scrollerTop: 0,
  applyTransform: Ember.ListViewHelper.apply3DTransform,

  setupScroller: function(){
    var view, y;

    view = this;

    view.scroller = new Scroller(function(left, top, zoom) {
      if (view.state !== 'inDOM') { return; }

      if (view.listContainerElement) {
        view.applyTransform(view.listContainerElement, 0, -top);
        view._scrollerTop = top;
        view._scrollContentTo(top);
      }
    }, {
      scrollingX: false,
      scrollingComplete: function(){
        view.trigger('scrollingDidComplete');
      }
    });

    view.trigger('didInitializeScroller');
    updateScrollerDimensions(view);
  },

  scrollerDimensionsNeedToChange: Ember.observer(function() {
    Ember.run.once(this, updateScrollerDimensions);
  }, 'width', 'height', 'totalHeight'),

  didInsertElement: function() {
    this.listContainerElement = this.$('> .ember-list-container')[0];
  },

  willBeginScroll: function(touches, timeStamp) {
    this._isScrolling = false;
    this.trigger('scrollingDidStart');

    this.scroller.doTouchStart(touches, timeStamp);
  },

  continueScroll: function(touches, timeStamp) {
    var startingScrollTop, endingScrollTop, event;

    if (this._isScrolling) {
      this.scroller.doTouchMove(touches, timeStamp);
    } else {
      startingScrollTop = this._scrollerTop;

      this.scroller.doTouchMove(touches, timeStamp);

      endingScrollTop = this._scrollerTop;

      if (startingScrollTop !== endingScrollTop) {
        event = Ember.$.Event("scrollerstart");
        Ember.$(touches[0].target).trigger(event);

        this._isScrolling = true;
      }
    }
  },

  endScroll: function(timeStamp) {
    this.scroller.doTouchEnd(timeStamp);
  },

  // api
  scrollTo: function(y, animate) {
    if (animate === undefined) {
      animate = true;
    }

    this.scroller.scrollTo(0, y, animate, 1);
  },

  // events
  mouseWheel: function(e){
    var inverted, delta, candidatePosition;

    inverted = e.webkitDirectionInvertedFromDevice;
    delta = e.wheelDeltaY * (inverted ? 0.8 : -0.8);
    candidatePosition = this.scroller.__scrollTop + delta;

    if ((candidatePosition >= 0) && (candidatePosition <= this.scroller.__maxScrollTop)) {
      this.scroller.scrollBy(0, delta, true);
    }

    return false;
  }
});

})();



(function() {

})();



})();

(function() {

/**
* bootstrap.js v3.0.0 by @fat and @mdo
* Copyright 2013 Twitter Inc.
* http://www.apache.org/licenses/LICENSE-2.0
*/
if (!jQuery) { throw new Error("Bootstrap requires jQuery") }

/* ========================================================================
 * Bootstrap: transition.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#transitions
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      'WebkitTransition' : 'webkitTransitionEnd'
    , 'MozTransition'    : 'transitionend'
    , 'OTransition'      : 'oTransitionEnd otransitionend'
    , 'transition'       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false, $el = this
    $(this).one($.support.transition.end, function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()
  })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#alerts
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent()
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent.trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one($.support.transition.end, removeElement)
        .emulateTransitionEnd(150) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(window.jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#buttons
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element = $(element)
    this.options  = $.extend({}, Button.DEFAULTS, options)
  }

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (!data.resetText) $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ?
        $el.addClass(d).attr(d, d) :
        $el.removeClass(d).removeAttr(d);
    }, 0)
  }

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
        .prop('checked', !this.$element.hasClass('active'))
        .trigger('change')
      if ($input.prop('type') === 'radio') $parent.find('.active').removeClass('active')
    }

    this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
    e.preventDefault()
  })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#carousel
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      =
    this.sliding     =
    this.interval    =
    this.$active     =
    this.$items      = null

    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.DEFAULTS = {
    interval: 5000
  , pause: 'hover'
  , wrap: true
  }

  Carousel.prototype.cycle =  function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getActiveIndex = function () {
    this.$active = this.$element.find('.item.active')
    this.$items  = this.$active.parent().children()

    return this.$items.index(this.$active)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getActiveIndex()

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid', function () { that.to(pos) })
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition.end) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || $active[type]()
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var fallback  = type == 'next' ? 'first' : 'last'
    var that      = this

    if (!$next.length) {
      if (!this.options.wrap) return
      $next = this.$element.find('.item')[fallback]()
    }

    this.sliding = true

    isCycling && this.pause()

    var e = $.Event('slide.bs.carousel', { relatedTarget: $next[0], direction: direction })

    if ($next.hasClass('active')) return

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      this.$element.one('slid', function () {
        var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
        $nextIndicator && $nextIndicator.addClass('active')
      })
    }

    if ($.support.transition && this.$element.hasClass('slide')) {
      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid') }, 0)
        })
        .emulateTransitionEnd(600)
    } else {
      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger('slid')
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this   = $(this), href
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  })

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      $carousel.carousel($carousel.data())
    })
  })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#collapse
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      actives.collapse('hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')
      [dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('in')
        [dimension]('auto')
      this.transitioning = 0
      this.$element.trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
      [dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element
      [dimension](this.$element[dimension]())
      [0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this   = $(this), href
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    $target.collapse(option)
  })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#dropdowns
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle=dropdown]'
  var Dropdown = function (element) {
    var $el = $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      $parent.trigger(e = $.Event('show.bs.dropdown'))

      if (e.isDefaultPrevented()) return

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown')

      $this.focus()
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode == 27)) {
      if (e.which == 27) $parent.find(toggle).focus()
      return $this.click()
    }

    var $items = $('[role=menu] li:not(.divider):visible a', $parent)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode == 38 && index > 0)                 index--                        // up
    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index=0

    $items.eq(index).focus()
  }

  function clearMenus() {
    $(backdrop).remove()
    $(toggle).each(function (e) {
      var $parent = getParent($(this))
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown'))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown')
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('dropdown')

      if (!data) $this.data('dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api'  , toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu]' , Dropdown.prototype.keydown)

}(window.jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#modals
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options   = options
    this.$element  = $(element)
    this.$backdrop =
    this.isShown   = null

    if (this.options.remote) this.$element.load(this.options.remote)
  }

  Modal.DEFAULTS = {
      backdrop: true
    , keyboard: true
    , show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.escape()

    this.$element.on('click.dismiss.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(document.body) // don't move modals dom position
      }

      that.$element.show()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one($.support.transition.end, function () {
            that.$element.focus().trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.focus().trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one($.support.transition.end, $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.focus()
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.removeBackdrop()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that    = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(document.body)

      this.$element.on('click.dismiss.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      $.support.transition && this.$element.hasClass('fade')?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (callback) {
      callback()
    }
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  var old = $.fn.modal

  $.fn.modal = function (option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
    var option  = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    e.preventDefault()

    $target
      .modal(option, this)
      .one('hide', function () {
        $this.is(':visible') && $this.focus()
      })
  })

  $(document)
    .on('show.bs.modal',  '.modal', function () { $(document.body).addClass('modal-open') })
    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.DEFAULTS = {
    animation: true
  , placement: 'top'
  , selector: false
  , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
  , trigger: 'hover focus'
  , title: ''
  , delay: 0
  , html: false
  , container: false
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled  = true
    this.type     = type
    this.$element = $(element)
    this.options  = this.getOptions(options)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focus'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay
      , hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.'+ this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      var $tip = this.tip()

      this.setContent()

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var $parent = this.$element.parent()

        var orgPlacement = placement
        var docScroll    = document.documentElement.scrollTop || document.body.scrollTop
        var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth()
        var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight()
        var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left

        placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                    placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                    placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                    placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)
      this.$element.trigger('shown.bs.' + this.type)
    }
  }

  Tooltip.prototype.applyPlacement = function(offset, placement) {
    var replace
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    $tip
      .offset(offset)
      .addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      replace = true
      offset.top = offset.top + height - actualHeight
    }

    if (/bottom|top/.test(placement)) {
      var delta = 0

      if (offset.left < 0) {
        delta       = offset.left * -2
        offset.left = 0

        $tip.offset(offset)

        actualWidth  = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight
      }

      this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
    } else {
      this.replaceArrow(actualHeight - height, actualHeight, 'top')
    }

    if (replace) $tip.offset(offset)
  }

  Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one($.support.transition.end, complete)
        .emulateTransitionEnd(150) :
      complete()

    this.$element.trigger('hidden.bs.' + this.type)

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function () {
    var el = this.$element[0]
    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
      width: el.offsetWidth
    , height: el.offsetHeight
    }, this.$element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template)
  }

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow')
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this
    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  var old = $.fn.tooltip

  $.fn.tooltip = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(window.jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#popovers
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.DEFAULTS = $.extend({} , $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right'
  , trigger: 'click'
  , content: ''
  , template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow')
  }

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template)
    return this.$tip
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(window.jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#scrollspy
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var href
    var process  = $.proxy(this.process, this)

    this.$element       = $(element).is('body') ? $(window) : $(element)
    this.$body          = $('body')
    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.offsets        = $([])
    this.targets        = $([])
    this.activeTarget   = null

    this.refresh()
    this.process()
  }

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

    this.offsets = $([])
    this.targets = $([])

    var self     = this
    var $targets = this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#\w/.test(href) && $(href)

        return ($href
          && $href.length
          && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
    var maxScroll    = scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets.last()[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate( targets[i] )
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parents('.active')
      .removeClass('active')

    var selector = this.selector
      + '[data-target="' + target + '"],'
      + this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length)  {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#tabs
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.parent('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab'
      , relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one($.support.transition.end, next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(window.jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.0.0
 * http://twbs.github.com/bootstrap/javascript.html#affix
 * ========================================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { "use strict";

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)
    this.$window = $(window)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element = $(element)
    this.affixed  =
    this.unpin    = null

    this.checkPosition()
  }

  Affix.RESET = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
    var scrollTop    = this.$window.scrollTop()
    var position     = this.$element.offset()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top()
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

    if (this.affixed === affix) return
    if (this.unpin) this.$element.css('top', '')

    this.affixed = affix
    this.unpin   = affix == 'bottom' ? position.top - scrollTop : null

    this.$element.removeClass(Affix.RESET).addClass('affix' + (affix ? '-' + affix : ''))

    if (affix == 'bottom') {
      this.$element.offset({ top: document.body.offsetHeight - offsetBottom - this.$element.height() })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
      if (data.offsetTop)    data.offset.top    = data.offsetTop

      $spy.affix(data)
    })
  })

}(window.jQuery);


})();

(function() {

Ember.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();

Ember.AddeparMixins.ResizeHandlerMixin = Ember.Mixin.create({
  resizeEndDelay: 200,
  resizing: false,
  onResizeStart: Ember.K,
  onResizeEnd: Ember.K,
  onResize: Ember.K,
  endResize: Ember.computed(function() {
    return function(event) {
      if (this.isDestroyed) {
        return;
      }
      this.set('resizing', false);
      return typeof this.onResizeEnd === "function" ? this.onResizeEnd(event) : void 0;
    };
  }),
  handleWindowResize: function(event) {
    if (!this.get('resizing')) {
      this.set('resizing', true);
      if (typeof this.onResizeStart === "function") {
        this.onResizeStart(event);
      }
    }
    if (typeof this.onResize === "function") {
      this.onResize(event);
    }
    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));
  },
  didInsertElement: function() {
    this._super();
    return this._setupDocumentHandlers();
  },
  willDestroyElement: function() {
    this._removeDocumentHandlers();
    return this._super();
  },
  _setupDocumentHandlers: function() {
    if (this._resizeHandler) {
      return;
    }
    this._resizeHandler = jQuery.proxy(this.get('handleWindowResize'), this);
    return jQuery(window).on("resize." + this.elementId, this._resizeHandler);
  },
  _removeDocumentHandlers: function() {
    jQuery(window).off("resize." + this.elementId, this._resizeHandler);
    return this._resizeHandler = null;
  }
});


})();

(function() {

Ember.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();

Ember.AddeparMixins.StyleBindingsMixin = Ember.Mixin.create({
  concatenatedProperties: ['styleBindings'],
  attributeBindings: ['style'],
  unitType: 'px',
  createStyleString: function(styleName, property) {
    var value;
    value = this.get(property);
    if (value === void 0) {
      return;
    }
    if (Ember.typeOf(value) === 'number') {
      value = value + this.get('unitType');
    }
    return "" + styleName + ":" + value + ";";
  },
  applyStyleBindings: function() {
    var lookup, properties, styleBindings, styleComputed, styles,
      _this = this;
    styleBindings = this.styleBindings;
    if (!styleBindings) {
      return;
    }
    lookup = {};
    styleBindings.forEach(function(binding) {
      var property, style, tmp;
      tmp = binding.split(':');
      property = tmp[0];
      style = tmp[1];
      lookup[style || property] = property;
    });
    styles = Ember.keys(lookup);
    properties = styles.map(function(style) {
      return lookup[style];
    });
    styleComputed = Ember.computed(function() {
      var styleString, styleTokens;
      styleTokens = styles.map(function(style) {
        return _this.createStyleString(style, lookup[style]);
      });
      styleString = styleTokens.join('');
      if (styleString.length !== 0) {
        return styleString;
      }
    });
    styleComputed.property.apply(styleComputed, properties);
    return Ember.defineProperty(this, 'style', styleComputed);
  },
  init: function() {
    this.applyStyleBindings();
    return this._super();
  }
});


})();

(function() {

/**
 * @license
 * Lo-Dash 1.2.0 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.4.4 <http://underscorejs.org/>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * Available under MIT license <http://lodash.com/license>
 */
;(function(window) {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Detect free variable `exports` */
  var freeExports = typeof exports == 'object' && exports;

  /** Detect free variable `module` */
  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;

  /** Detect free variable `global`, from Node.js or Browserified code, and use it as `window` */
  var freeGlobal = typeof global == 'object' && global;
  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
    window = freeGlobal;
  }

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used internally to indicate various things */
  var indicatorObject = {};

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 200;

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading zeros to be removed */
  var reLeadingZeros = /^0+(?=.$)/;

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to match HTML characters */
  var reUnescapedHtml = /[&<>"']/g;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object', 'RegExp',
    'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN', 'parseInt',
    'setImmediate', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=window] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.com/#x11.1.5.
    context = context ? _.defaults(window.Object(), context, _.pick(window, contextProps)) : window;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for `Array` and `Object` method references */
    var arrayRef = Array(),
        objectRef = Object();

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(objectRef.valueOf)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/valueOf|for [^\]]+/g, '.+?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        concat = arrayRef.concat,
        floor = Math.floor,
        getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectRef.hasOwnProperty,
        push = arrayRef.push,
        setImmediate = context.setImmediate,
        setTimeout = context.setTimeout,
        toString = objectRef.toString;

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeBind = reNative.test(nativeBind = toString.bind) && nativeBind,
        nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeSlice = arrayRef.slice;

    /** Detect various environments */
    var isIeOpera = reNative.test(context.attachEvent),
        isV8 = nativeBind && !/\n|true/.test(nativeBind + isIeOpera);

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object, which wraps the given `value`, to enable method
     * chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `createCallback`, `debounce`, `defaults`,
     * `defer`, `delay`, `difference`, `filter`, `flatten`, `forEach`, `forIn`,
     * `forOwn`, `functions`, `groupBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `push`, `range`,
     * `reject`, `rest`, `reverse`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`,
     * `tap`, `throttle`, `times`, `toArray`, `union`, `uniq`, `unshift`, `unzip`,
     * `values`, `where`, `without`, `wrap`, and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `has`,
     * `identity`, `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`,
     * `isElement`, `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`,
     * `isNull`, `isNumber`, `isObject`, `isPlainObject`, `isRegExp`, `isString`,
     * `isUndefined`, `join`, `lastIndexOf`, `mixin`, `noConflict`, `parseInt`,
     * `pop`, `random`, `reduce`, `reduceRight`, `result`, `shift`, `size`, `some`,
     * `sortedIndex`, `runInContext`, `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * passed, otherwise they return unwrapped values.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {Mixed} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if `Function#bind` exists and is inferred to be fast (all but V8).
     *
     * @memberOf _.support
     * @type Boolean
     */
    support.fastBind = nativeBind && !isV8;

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type String
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function optimized to search large arrays for a given `value`,
     * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {Mixed} value The value to search for.
     * @returns {Boolean} Returns `true`, if `value` is found, else `false`.
     */
    function cachedContains(array) {
      var length = array.length,
          isLarge = length >= largeArraySize;

      if (isLarge) {
        var cache = {},
            index = -1;

        while (++index < length) {
          var key = keyPrefix + array[index];
          (cache[key] || (cache[key] = [])).push(array[index]);
        }
      }
      return function(value) {
        if (isLarge) {
          var key = keyPrefix + value;
          return  cache[key] && indexOf(cache[key], value) > -1;
        }
        return indexOf(array, value) > -1;
      }
    }

    /**
     * Used by `_.max` and `_.min` as the default `callback` when a given
     * `collection` is a string value.
     *
     * @private
     * @param {String} value The character to inspect.
     * @returns {Number} Returns the code unit of given character.
     */
    function charAtCallback(value) {
      return value.charCodeAt(0);
    }

    /**
     * Used by `sortBy` to compare transformed `collection` values, stable sorting
     * them in ascending order.
     *
     * @private
     * @param {Object} a The object to compare to `b`.
     * @param {Object} b The object to compare to `a`.
     * @returns {Number} Returns the sort order indicator of `1` or `-1`.
     */
    function compareAscending(a, b) {
      var ai = a.index,
          bi = b.index;

      a = a.criteria;
      b = b.criteria;

      // ensure a stable sort in V8 and other engines
      // http://code.google.com/p/v8/issues/detail?id=90
      if (a !== b) {
        if (a > b || typeof a == 'undefined') {
          return 1;
        }
        if (a < b || typeof b == 'undefined') {
          return -1;
        }
      }
      return ai < bi ? -1 : 1;
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this` binding
     * of `thisArg` and prepends any `partialArgs` to the arguments passed to the
     * bound function.
     *
     * @private
     * @param {Function|String} func The function to bind or the method name.
     * @param {Mixed} [thisArg] The `this` binding of `func`.
     * @param {Array} partialArgs An array of arguments to be partially applied.
     * @param {Object} [idicator] Used to indicate binding by key or partially
     *  applying arguments from the right.
     * @returns {Function} Returns the new bound function.
     */
    function createBound(func, thisArg, partialArgs, indicator) {
      var isFunc = isFunction(func),
          isPartial = !partialArgs,
          key = thisArg;

      // juggle arguments
      if (isPartial) {
        var rightIndicator = indicator;
        partialArgs = thisArg;
      }
      else if (!isFunc) {
        if (!indicator) {
          throw new TypeError;
        }
        thisArg = func;
      }

      function bound() {
        // `Function#bind` spec
        // http://es5.github.com/#x15.3.4.5
        var args = arguments,
            thisBinding = isPartial ? this : thisArg;

        if (!isFunc) {
          func = thisArg[key];
        }
        if (partialArgs.length) {
          args = args.length
            ? (args = nativeSlice.call(args), rightIndicator ? args.concat(partialArgs) : partialArgs.concat(args))
            : partialArgs;
        }
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          noop.prototype = func.prototype;
          thisBinding = new noop;
          noop.prototype = null;

          // mimic the constructor's `return` behavior
          // http://es5.github.com/#x13.2.2
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      return bound;
    }

    /**
     * Used by `template` to escape characters for inclusion in compiled
     * string literals.
     *
     * @private
     * @param {String} match The matched character to escape.
     * @returns {String} Returns the escaped character.
     */
    function escapeStringChar(match) {
      return '\\' + stringEscapes[match];
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {String} match The matched character to escape.
     * @returns {String} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {Mixed} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value) {
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * A no-operation function.
     *
     * @private
     */
    function noop() {
      // no operation performed
    }

    /**
     * A fallback implementation of `isPlainObject` which checks if a given `value`
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      // avoid non-objects and false positives for `arguments` objects
      var result = false;
      if (!(value && toString.call(value) == objectClass)) {
        return result;
      }
      // check that the constructor is `Object` (i.e. `Object instanceof Object`)
      var ctor = value.constructor;

      if (isFunction(ctor) ? ctor instanceof ctor : (support.nodeClass || !isNode(value))) {
        // In most environments an object's own properties are iterated before
        // its inherited properties. If the last iterated property is an object's
        // own property then there are no inherited enumerable properties.
        forIn(value, function(value, key) {
          result = key;
        });
        return result === false || hasOwnProperty.call(value, result);
      }
      return result;
    }

    /**
     * Slices the `collection` from the `start` index up to, but not including,
     * the `end` index.
     *
     * Note: This function is used, instead of `Array#slice`, to support node lists
     * in IE < 9 and to ensure dense arrays are returned.
     *
     * @private
     * @param {Array|Object|String} collection The collection to slice.
     * @param {Number} start The start index.
     * @param {Number} end The end index.
     * @returns {Array} Returns the new array.
     */
    function slice(array, start, end) {
      start || (start = 0);
      if (typeof end == 'undefined') {
        end = array ? array.length : 0;
      }
      var index = -1,
          length = end - start || 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = array[start + index];
      }
      return result;
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {String} match The matched character to unescape.
     * @returns {String} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return toString.call(value) == argsClass;
    }

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns a new array of property names.
     */
    var shimKeys = function (object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;

        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
          result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns a new array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (order is not guaranteed)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a `callback` function is passed, it will be executed to produce
     * the assigned values. The `callback` is bound to `thisArg` and invoked with
     * two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {Object} [source1, source2, ...] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'moe' }, { 'age': 40 });
     * // => { 'name': 'moe', 'age': 40 }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var food = { 'name': 'apple' };
     * defaults(food, { 'name': 'banana', 'type': 'fruit' });
     * // => { 'name': 'apple', 'type': 'fruit' }
     */
    var assign = function (object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = lodash.createCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {;
      var length = iterable.length; index = -1;
      if (isArray(iterable)) {
        while (++index < length) {
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]
        }
      }
      else {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] ? keys(iterable) : [],
            length = ownProps.length;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]
        }
      }
        }
      };
      return result
    };

    /**
     * Creates a clone of `value`. If `deep` is `true`, nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a `callback`
     * function is passed, it will be executed to produce the cloned values. If
     * `callback` returns `undefined`, cloning will be handled by the method instead.
     * The `callback` is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to clone.
     * @param {Boolean} [deep=false] A flag to indicate a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @param- {Array} [stackA=[]] Tracks traversed source objects.
     * @param- {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {Mixed} Returns the cloned `value`.
     * @example
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * var shallow = _.clone(stooges);
     * shallow[0] === stooges[0];
     * // => true
     *
     * var deep = _.clone(stooges, true);
     * deep[0] === stooges[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, deep, callback, thisArg, stackA, stackB) {
      var result = value;

      // allows working with "Collections" methods without using their `callback`
      // argument, `index|key`, for this method's `callback`
      if (typeof deep == 'function') {
        thisArg = callback;
        callback = deep;
        deep = false;
      }
      if (typeof callback == 'function') {
        callback = (typeof thisArg == 'undefined')
          ? callback
          : lodash.createCallback(callback, thisArg, 1);

        result = callback(result);
        if (typeof result != 'undefined') {
          return result;
        }
        result = value;
      }
      // inspect [[Class]]
      var isObj = isObject(result);
      if (isObj) {
        var className = toString.call(result);
        if (!cloneableClasses[className]) {
          return result;
        }
        var isArr = isArray(result);
      }
      // shallow clone
      if (!isObj || !deep) {
        return isObj
          ? (isArr ? slice(result) : assign({}, result))
          : result;
      }
      var ctor = ctorByClass[className];
      switch (className) {
        case boolClass:
        case dateClass:
          return new ctor(+result);

        case numberClass:
        case stringClass:
          return new ctor(result);

        case regexpClass:
          return ctor(result.source, reFlags.exec(result));
      }
      // check for circular references and return corresponding clone
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // init cloned object
      result = isArr ? ctor(result.length) : {};

      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = clone(objValue, deep, callback, undefined, stackA, stackB);
      });

      return result;
    }

    /**
     * Creates a deep clone of `value`. If a `callback` function is passed,
     * it will be executed to produce the cloned values. If `callback` returns
     * `undefined`, cloning will be handled by the method instead. The `callback`
     * is bound to `thisArg` and invoked with one argument; (value).
     *
     * Note: This function is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the deep cloned `value`.
     * @example
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * var deep = _.cloneDeep(stooges);
     * deep[0] === stooges[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return clone(value, true, callback, thisArg);
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {Object} [source1, source2, ...] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  callback's `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var food = { 'name': 'apple' };
     * _.defaults(food, { 'name': 'banana', 'type': 'fruit' });
     * // => { 'name': 'apple', 'type': 'fruit' }
     */
    var defaults = function (object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {;
      var length = iterable.length; index = -1;
      if (isArray(iterable)) {
        while (++index < length) {
          if (typeof result[index] == 'undefined') result[index] = iterable[index]
        }
      }
      else {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] ? keys(iterable) : [],
            length = ownProps.length;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index]
        }
      }
        }
      };
      return result
    };

    /**
     * This method is similar to `_.find`, except that it returns the key of the
     * element that passes the callback check, instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the key of the found element, else `undefined`.
     * @example
     *
     * _.findKey({ 'a': 1, 'b': 2, 'c': 3, 'd': 4 }, function(num) {
     *   return num % 2 == 0;
     * });
     * // => 'b'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over `object`'s own and inherited enumerable properties, executing
     * the `callback` for each property. The `callback` is bound to `thisArg` and
     * invoked with three arguments; (value, key, object). Callbacks may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Dog(name) {
     *   this.name = name;
     * }
     *
     * Dog.prototype.bark = function() {
     *   alert('Woof, woof!');
     * };
     *
     * _.forIn(new Dog('Dagny'), function(value, key) {
     *   alert(key);
     * });
     * // => alerts 'name' and 'bark' (order is not guaranteed)
     */
    var forIn = function (collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg);

        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * Iterates over an object's own enumerable properties, executing the `callback`
     * for each property. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   alert(key);
     * });
     * // => alerts '0', '1', and 'length' (order is not guaranteed)
     */
    var forOwn = function (collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg);

        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] ? keys(iterable) : [],
            length = ownProps.length;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result
        }
      return result
    };

    /**
     * Creates a sorted array of all enumerable properties, own and inherited,
     * of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns a new array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified object `property` exists and is a direct property,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to check.
     * @param {String} property The property to check for.
     * @returns {Boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, property) {
      return object ? hasOwnProperty.call(object, property) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     *  _.invert({ 'first': 'moe', 'second': 'larry' });
     * // => { 'moe': 'first', 'larry': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    function isArray(value) {
      // `instanceof` may cause a memory leak in IE 7 if `value` is a host object
      // http://ajaxian.com/archives/working-aroung-the-instanceof-memory-leak
      return value instanceof Array || nativeIsArray(value);
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || toString.call(value) == boolClass;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value instanceof Date || toString.call(value) == dateClass;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value ? value.nodeType === 1 : false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|String} value The value to inspect.
     * @returns {Boolean} Returns `true`, if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If `callback` is passed, it will be executed to
     * compare values. If `callback` returns `undefined`, comparisons will be handled
     * by the method instead. The `callback` is bound to `thisArg` and invoked with
     * two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} a The value to compare.
     * @param {Mixed} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @param- {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param- {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {Boolean} Returns `true`, if the values are equivalent, else `false`.
     * @example
     *
     * var moe = { 'name': 'moe', 'age': 40 };
     * var copy = { 'name': 'moe', 'age': 40 };
     *
     * moe == copy;
     * // => false
     *
     * _.isEqual(moe, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      var whereIndicator = callback === indicatorObject;
      if (typeof callback == 'function' && !whereIndicator) {
        callback = lodash.createCallback(callback, thisArg, 2);
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          (!a || (type != 'function' && type != 'object')) &&
          (!b || (otherType != 'function' && otherType != 'object'))) {
        return false;
      }
      // exit early for `null` and `undefined`, avoiding ES3's Function#call behavior
      // http://es5.github.com/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        if (hasOwnProperty.call(a, '__wrapped__ ') || hasOwnProperty.call(b, '__wrapped__')) {
          return isEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, thisArg, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB && !(
              isFunction(ctorA) && ctorA instanceof ctorA &&
              isFunction(ctorB) && ctorB instanceof ctorB
            )) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        length = a.length;
        size = b.length;

        // compare lengths to determine if a deep comparison is necessary
        result = size == a.length;
        if (!result && !whereIndicator) {
          return result;
        }
        // deep compare the contents, ignoring non-numeric properties
        while (size--) {
          var index = length,
              value = b[size];

          if (whereIndicator) {
            while (index--) {
              if ((result = isEqual(a[index], value, callback, thisArg, stackA, stackB))) {
                break;
              }
            }
          } else if (!(result = isEqual(a[size], value, callback, thisArg, stackA, stackB))) {
            break;
          }
        }
        return result;
      }
      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
      // which, in this case, is more costly
      forIn(b, function(value, key, b) {
        if (hasOwnProperty.call(b, key)) {
          // count the number of properties.
          size++;
          // deep compare each property value.
          return (result = hasOwnProperty.call(a, key) && isEqual(a[key], value, callback, thisArg, stackA, stackB));
        }
      });

      if (result && !whereIndicator) {
        // ensure both objects have the same number of properties
        forIn(a, function(value, key, a) {
          if (hasOwnProperty.call(a, key)) {
            // `size` will be `-1` if `a` has more properties than `b`
            return (result = --size > -1);
          }
        });
      }
      return result;
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite`, which will return true for
     * booleans and empty strings. See http://es5.github.com/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.com/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return value ? objectTypes[typeof value] : false;
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN`, which will return `true` for
     * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' || toString.call(value) == numberClass;
    }

    /**
     * Checks if a given `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.
     * @example
     *
     * function Stooge(name, age) {
     *   this.name = name;
     *   this.age = age;
     * }
     *
     * _.isPlainObject(new Stooge('moe', 40));
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'name': 'moe', 'age': 40 });
     * // => true
     */
    var isPlainObject = function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/moe/);
     * // => true
     */
    function isRegExp(value) {
      return value instanceof RegExp || toString.call(value) == regexpClass;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('moe');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' || toString.call(value) == stringClass;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Mixed} value The value to check.
     * @returns {Boolean} Returns `true`, if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined`, into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a `callback` function
     * is passed, it will be executed to produce the merged values of the destination
     * and source properties. If `callback` returns `undefined`, merging will be
     * handled by the method instead. The `callback` is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {Object} [source1, source2, ...] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @param- {Object} [deepIndicator] Indicates that `stackA` and `stackB` are
     *  arrays of traversed objects, instead of source objects.
     * @param- {Array} [stackA=[]] Tracks traversed source objects.
     * @param- {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'stooges': [
     *     { 'name': 'moe' },
     *     { 'name': 'larry' }
     *   ]
     * };
     *
     * var ages = {
     *   'stooges': [
     *     { 'age': 40 },
     *     { 'age': 50 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'stooges': [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object, source, deepIndicator) {
      var args = arguments,
          index = 0,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      if (deepIndicator === indicatorObject) {
        var callback = args[3],
            stackA = args[4],
            stackB = args[5];
      } else {
        stackA = [];
        stackB = [];

        // allows working with `_.reduce` and `_.reduceRight` without
        // using their `callback` arguments, `index|key` and `collection`
        if (typeof deepIndicator != 'number') {
          length = args.length;
        }
        if (length > 3 && typeof args[length - 2] == 'function') {
          callback = lodash.createCallback(args[--length - 1], args[length--], 2);
        } else if (length > 2 && typeof args[length - 1] == 'function') {
          callback = args[--length];
        }
      }
      while (++index < length) {
        (isArray(args[index]) ? forEach : forOwn)(args[index], function(source, key) {
          var found,
              isArr,
              result = source,
              value = object[key];

          if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
            // avoid merging previously merged cyclic sources
            var stackLength = stackA.length;
            while (stackLength--) {
              if ((found = stackA[stackLength] == source)) {
                value = stackB[stackLength];
                break;
              }
            }
            if (!found) {
              var isShallow;
              if (callback) {
                result = callback(value, source);
                if ((isShallow = typeof result != 'undefined')) {
                  value = result;
                }
              }
              if (!isShallow) {
                value = isArr
                  ? (isArray(value) ? value : [])
                  : (isPlainObject(value) ? value : {});
              }
              // add `source` and associated `value` to the stack of traversed objects
              stackA.push(source);
              stackB.push(value);

              // recursively merge objects and arrays (susceptible to call stack limits)
              if (!isShallow) {
                value = merge(value, source, indicatorObject, callback, stackA, stackB);
              }
            }
          }
          else {
            if (callback) {
              result = callback(value, source);
              if (typeof result == 'undefined') {
                result = source;
              }
            }
            if (typeof result != 'undefined') {
              value = result;
            }
          }
          object[key] = value;
        });
      }
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a `callback` function is passed, it will be executed
     * for each property in the `object`, omitting the properties `callback`
     * returns truthy for. The `callback` is bound to `thisArg` and invoked
     * with three arguments; (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit
     *  or the function called per iteration.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'moe', 'age': 40 }, 'age');
     * // => { 'name': 'moe' }
     *
     * _.omit({ 'name': 'moe', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'moe' }
     */
    function omit(object, callback, thisArg) {
      var isFunc = typeof callback == 'function',
          result = {};

      if (isFunc) {
        callback = lodash.createCallback(callback, thisArg);
      } else {
        var props = concat.apply(arrayRef, nativeSlice.call(arguments, 1));
      }
      forIn(object, function(value, key, object) {
        if (isFunc
              ? !callback(value, key, object)
              : indexOf(props, key) < 0
            ) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Creates a two dimensional array of the given object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'moe': 30, 'larry': 40 });
     * // => [['moe', 30], ['larry', 40]] (order is not guaranteed)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of property
     * names. If `callback` is passed, it will be executed for each property in the
     * `object`, picking the properties `callback` returns truthy for. The `callback`
     * is bound to `thisArg` and invoked with three arguments; (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Array|Function|String} callback|[prop1, prop2, ...] The function called
     *  per iteration or properties to pick, either as individual arguments or arrays.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'moe', '_userid': 'moe1' }, 'name');
     * // => { 'name': 'moe' }
     *
     * _.pick({ 'name': 'moe', '_userid': 'moe1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'moe' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = concat.apply(arrayRef, nativeSlice.call(arguments, 1)),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (order is not guaranteed)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Array|Number|String} [index1, index2, ...] The indexes of
     *  `collection` to retrieve, either as individual arguments or arrays.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['moe', 'larry', 'curly'], 0, 2);
     * // => ['moe', 'curly']
     */
    function at(collection) {
      var index = -1,
          props = concat.apply(arrayRef, nativeSlice.call(arguments, 1)),
          length = props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given `target` element is present in a `collection` using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Mixed} target The value to check for.
     * @param {Number} [fromIndex=0] The index to search from.
     * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');
     * // => true
     *
     * _.contains('curly', 'ur');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (typeof length == 'number') {
        result = (isString(collection)
          ? collection.indexOf(target, fromIndex)
          : indexOf(collection, target, fromIndex)
        ) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys returned from running each element of the
     * `collection` through the given `callback`. The corresponding value of each key
     * is the number of times the key was returned by the `callback`. The `callback`
     * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    function countBy(collection, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg);

      forEach(collection, function(value, key, collection) {
        key = String(callback(value, key, collection));
        (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
      });
      return result;
    }

    /**
     * Checks if the `callback` returns a truthy value for **all** elements of a
     * `collection`. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Boolean} Returns `true` if all elements pass the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(stooges, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(stooges, { 'age': 50 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Examines each element in a `collection`, returning an array of all elements
     * the `callback` returns truthy for. The `callback` is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var food = [
     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },
     *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(food, 'organic');
     * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]
     *
     * // using "_.where" callback shorthand
     * _.filter(food, { 'type': 'fruit' });
     * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Examines each element in a `collection`, returning the first that the `callback`
     * returns truthy for. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the found element, else `undefined`.
     * @example
     *
     * _.find([1, 2, 3, 4], function(num) {
     *   return num % 2 == 0;
     * });
     * // => 2
     *
     * var food = [
     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },
     *   { 'name': 'banana', 'organic': true,  'type': 'fruit' },
     *   { 'name': 'beet',   'organic': false, 'type': 'vegetable' }
     * ];
     *
     * // using "_.where" callback shorthand
     * _.find(food, { 'type': 'vegetable' });
     * // => { 'name': 'beet', 'organic': false, 'type': 'vegetable' }
     *
     * // using "_.pluck" callback shorthand
     * _.find(food, 'organic');
     * // => { 'name': 'banana', 'organic': true, 'type': 'fruit' }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * Iterates over a `collection`, executing the `callback` for each element in
     * the `collection`. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection). Callbacks may exit iteration early
     * by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|String} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(alert).join(',');
     * // => alerts each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);
     * // => alerts each number value (order is not guaranteed)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * Creates an object composed of keys returned from running each element of the
     * `collection` through the `callback`. The corresponding value of each key is
     * an array of elements passed to `callback` that returned the key. The `callback`
     * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    function groupBy(collection, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg);

      forEach(collection, function(value, key, collection) {
        key = String(callback(value, key, collection));
        (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
      });
      return result;
    }

    /**
     * Invokes the method named by `methodName` on each element in the `collection`,
     * returning an array of the results of each invoked method. Additional arguments
     * will be passed to each invoked method. If `methodName` is a function, it will
     * be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|String} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = nativeSlice.call(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the `collection`
     * through the `callback`. The `callback` is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (order is not guaranteed)
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(stooges, 'name');
     * // => ['moe', 'larry']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of an `array`. If `callback` is passed,
     * it will be executed for each value in the `array` to generate the
     * criterion by which the value is ranked. The `callback` is bound to
     * `thisArg` and invoked with three arguments; (value, index, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * _.max(stooges, function(stooge) { return stooge.age; });
     * // => { 'name': 'larry', 'age': 50 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(stooges, 'age');
     * // => { 'name': 'larry', 'age': 50 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      if (!callback && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (!callback && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of an `array`. If `callback` is passed,
     * it will be executed for each value in the `array` to generate the
     * criterion by which the value is ranked. The `callback` is bound to `thisArg`
     * and invoked with three arguments; (value, index, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * _.min(stooges, function(stooge) { return stooge.age; });
     * // => { 'name': 'moe', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(stooges, 'age');
     * // => { 'name': 'moe', 'age': 40 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      if (!callback && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (!callback && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the `collection`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {String} property The property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * _.pluck(stooges, 'name');
     * // => ['moe', 'larry']
     */
    function pluck(collection, property) {
      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = collection[index][property];
        }
      }
      return result || map(collection, property);
    }

    /**
     * Reduces a `collection` to a value which is the accumulated result of running
     * each element in the `collection` through the `callback`, where each successive
     * `callback` execution consumes the return value of the previous execution.
     * If `accumulator` is not passed, the first element of the `collection` will be
     * used as the initial `accumulator` value. The `callback` is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {Mixed} [accumulator] Initial value of the accumulator.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is similar to `_.reduce`, except that it iterates over a
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {Mixed} [accumulator] Initial value of the accumulator.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var iterable = collection,
          length = collection ? collection.length : 0,
          noaccum = arguments.length < 3;

      if (typeof length != 'number') {
        var props = keys(collection);
        length = props.length;
      }
      callback = lodash.createCallback(callback, thisArg, 4);
      forEach(collection, function(value, index, collection) {
        index = props ? props[--length] : --length;
        accumulator = noaccum
          ? (noaccum = false, iterable[index])
          : callback(accumulator, iterable[index], index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter`, this method returns the elements of a
     * `collection` that `callback` does **not** return truthy for.
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that did **not** pass the
     *  callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var food = [
     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },
     *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(food, 'organic');
     * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]
     *
     * // using "_.where" callback shorthand
     * _.reject(food, { 'type': 'fruit' });
     * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Creates an array of shuffled `array` values, using a version of the
     * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = floor(nativeRandom() * (++index + 1));
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to inspect.
     * @returns {Number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('curly');
     * // => 5
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the `callback` returns a truthy value for **any** element of a
     * `collection`. The function returns as soon as it finds passing value, and
     * does not iterate over the entire `collection`. The `callback` is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Boolean} Returns `true` if any element passes the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var food = [
     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },
     *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(food, 'organic');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(food, { 'type': 'meat' });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in the `collection` through the `callback`. This method
     * performs a stable sort, that is, it will preserve the original sort order of
     * equal elements. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * // using "_.pluck" callback shorthand
     * _.sortBy(['banana', 'strawberry', 'apple'], 'length');
     * // => ['apple', 'banana', 'strawberry']
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      callback = lodash.createCallback(callback, thisArg);
      forEach(collection, function(value, key, collection) {
        result[++index] = {
          'criteria': callback(value, key, collection),
          'index': index,
          'value': value
        };
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        result[length] = result[length].value;
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|String} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Examines each element in a `collection`, returning an array of all elements
     * that have the given `properties`. When checking `properties`, this method
     * performs a deep comparison between values to determine if they are equivalent
     * to each other.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|String} collection The collection to iterate over.
     * @param {Object} properties The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given `properties`.
     * @example
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * _.where(stooges, { 'age': 40 });
     * // => [{ 'name': 'moe', 'age': 40 }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values of `array` removed. The values
     * `false`, `null`, `0`, `""`, `undefined` and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new filtered array.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array of `array` elements not present in the other arrays
     * using strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {Array} [array1, array2, ...] Arrays to check.
     * @returns {Array} Returns a new array of `array` elements not present in the
     *  other arrays.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      var index = -1,
          length = array ? array.length : 0,
          flattened = concat.apply(arrayRef, nativeSlice.call(arguments, 1)),
          contains = cachedContains(flattened),
          result = [];

      while (++index < length) {
        var value = array[index];
        if (!contains(value)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * This method is similar to `_.find`, except that it returns the index of
     * the element that passes the callback check, instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the index of the found element, else `-1`.
     * @example
     *
     * _.findIndex(['apple', 'banana', 'beet'], function(food) {
     *   return /^b/.test(food);
     * });
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Gets the first element of the `array`. If a number `n` is passed, the first
     * `n` elements of the `array` are returned. If a `callback` function is passed,
     * elements at the beginning of the array are returned as long as the `callback`
     * returns truthy. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|Number|String} [callback|n] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is passed, it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var food = [
     *   { 'name': 'banana', 'organic': true },
     *   { 'name': 'beet',   'organic': false },
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(food, 'organic');
     * // => [{ 'name': 'banana', 'organic': true }]
     *
     * var food = [
     *   { 'name': 'apple',  'type': 'fruit' },
     *   { 'name': 'banana', 'type': 'fruit' },
     *   { 'name': 'beet',   'type': 'vegetable' }
     * ];
     *
     * // using "_.where" callback shorthand
     * _.first(food, { 'type': 'fruit' });
     * // => [{ 'name': 'apple', 'type': 'fruit' }, { 'name': 'banana', 'type': 'fruit' }]
     */
    function first(array, callback, thisArg) {
      if (array) {
        var n = 0,
            length = array.length;

        if (typeof callback != 'number' && callback != null) {
          var index = -1;
          callback = lodash.createCallback(callback, thisArg);
          while (++index < length && callback(array[index], index, array)) {
            n++;
          }
        } else {
          n = callback;
          if (n == null || thisArg) {
            return array[0];
          }
        }
        return slice(array, 0, nativeMin(nativeMax(0, n), length));
      }
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truthy, `array` will only be flattened a single level. If `callback`
     * is passed, each element of `array` is passed through a callback` before
     * flattening. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {Boolean} [isShallow=false] A flag to indicate only flattening a single level.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var stooges = [
     *   { 'name': 'curly', 'quotes': ['Oh, a wise guy, eh?', 'Poifect!'] },
     *   { 'name': 'moe', 'quotes': ['Spread out!', 'You knucklehead!'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(stooges, 'quotes');
     * // => ['Oh, a wise guy, eh?', 'Poifect!', 'Spread out!', 'You knucklehead!']
     */
    function flatten(array, isShallow, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = isShallow;
        isShallow = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg);
      }
      while (++index < length) {
        var value = array[index];
        if (callback) {
          value = callback(value, index, array);
        }
        // recursively flatten arrays (susceptible to call stack limits)
        if (isArray(value)) {
          push.apply(result, isShallow ? value : flatten(value));
        } else {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the `array` is already
     * sorted, passing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Mixed} value The value to search for.
     * @param {Boolean|Number} [fromIndex=0] The index to search from or `true` to
     *  perform a binary search on a sorted `array`.
     * @returns {Number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var index = -1,
          length = array ? array.length : 0;

      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;
      } else if (fromIndex) {
        index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Gets all but the last element of `array`. If a number `n` is passed, the
     * last `n` elements are excluded from the result. If a `callback` function
     * is passed, elements at the end of the array are excluded from the result
     * as long as the `callback` returns truthy. The `callback` is bound to
     * `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|Number|String} [callback|n=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is passed, it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var food = [
     *   { 'name': 'beet',   'organic': false },
     *   { 'name': 'carrot', 'organic': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(food, 'organic');
     * // => [{ 'name': 'beet',   'organic': false }]
     *
     * var food = [
     *   { 'name': 'banana', 'type': 'fruit' },
     *   { 'name': 'beet',   'type': 'vegetable' },
     *   { 'name': 'carrot', 'type': 'vegetable' }
     * ];
     *
     * // using "_.where" callback shorthand
     * _.initial(food, { 'type': 'vegetable' });
     * // => [{ 'name': 'banana', 'type': 'fruit' }]
     */
    function initial(array, callback, thisArg) {
      if (!array) {
        return [];
      }
      var n = 0,
          length = array.length;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Computes the intersection of all the passed-in arrays using strict equality
     * for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} [array1, array2, ...] Arrays to process.
     * @returns {Array} Returns a new array of unique elements that are present
     *  in **all** of the arrays.
     * @example
     *
     * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
     * // => [1, 2]
     */
    function intersection(array) {
      var args = arguments,
          argsLength = args.length,
          cache = { '0': {} },
          index = -1,
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize,
          result = [],
          seen = result;

      outer:
      while (++index < length) {
        var value = array[index];
        if (isLarge) {
          var key = keyPrefix + value;
          var inited = cache[0][key]
            ? !(seen = cache[0][key])
            : (seen = cache[0][key] = []);
        }
        if (inited || indexOf(seen, value) < 0) {
          if (isLarge) {
            seen.push(value);
          }
          var argsIndex = argsLength;
          while (--argsIndex) {
            if (!(cache[argsIndex] || (cache[argsIndex] = cachedContains(args[argsIndex])))(value)) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Gets the last element of the `array`. If a number `n` is passed, the
     * last `n` elements of the `array` are returned. If a `callback` function
     * is passed, elements at the end of the array are returned as long as the
     * `callback` returns truthy. The `callback` is bound to `thisArg` and
     * invoked with three arguments;(value, index, array).
     *
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|Number|String} [callback|n] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is passed, it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Mixed} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var food = [
     *   { 'name': 'beet',   'organic': false },
     *   { 'name': 'carrot', 'organic': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.last(food, 'organic');
     * // => [{ 'name': 'carrot', 'organic': true }]
     *
     * var food = [
     *   { 'name': 'banana', 'type': 'fruit' },
     *   { 'name': 'beet',   'type': 'vegetable' },
     *   { 'name': 'carrot', 'type': 'vegetable' }
     * ];
     *
     * // using "_.where" callback shorthand
     * _.last(food, { 'type': 'vegetable' });
     * // => [{ 'name': 'beet', 'type': 'vegetable' }, { 'name': 'carrot', 'type': 'vegetable' }]
     */
    function last(array, callback, thisArg) {
      if (array) {
        var n = 0,
            length = array.length;

        if (typeof callback != 'number' && callback != null) {
          var index = length;
          callback = lodash.createCallback(callback, thisArg);
          while (index-- && callback(array[index], index, array)) {
            n++;
          }
        } else {
          n = callback;
          if (n == null || thisArg) {
            return array[length - 1];
          }
        }
        return slice(array, nativeMax(0, length - n));
      }
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Mixed} value The value to search for.
     * @param {Number} [fromIndex=array.length-1] The index to search from.
     * @returns {Number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Number} [start=0] The start of the range.
     * @param {Number} end The end of the range.
     * @param {Number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(10);
     * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     *
     * _.range(1, 11);
     * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     *
     * _.range(0, 30, 5);
     * // => [0, 5, 10, 15, 20, 25]
     *
     * _.range(0, -10, -1);
     * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = +step || 1;

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so V8 will avoid the slower "dictionary" mode
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / step)),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The opposite of `_.initial`, this method gets all but the first value of
     * `array`. If a number `n` is passed, the first `n` values are excluded from
     * the result. If a `callback` function is passed, elements at the beginning
     * of the array are excluded from the result as long as the `callback` returns
     * truthy. The `callback` is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|Number|String} [callback|n=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is passed, it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var food = [
     *   { 'name': 'banana', 'organic': true },
     *   { 'name': 'beet',   'organic': false },
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.rest(food, 'organic');
     * // => [{ 'name': 'beet', 'organic': false }]
     *
     * var food = [
     *   { 'name': 'apple',  'type': 'fruit' },
     *   { 'name': 'banana', 'type': 'fruit' },
     *   { 'name': 'beet',   'type': 'vegetable' }
     * ];
     *
     * // using "_.where" callback shorthand
     * _.rest(food, { 'type': 'fruit' });
     * // => [{ 'name': 'beet', 'type': 'vegetable' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which the `value`
     * should be inserted into `array` in order to maintain the sort order of the
     * sorted `array`. If `callback` is passed, it will be executed for `value` and
     * each element in `array` to compute their sort ranking. The `callback` is
     * bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {Mixed} value The value to evaluate.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Number} Returns the index at which the value should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Computes the union of the passed-in arrays using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} [array1, array2, ...] Arrays to process.
     * @returns {Array} Returns a new array of unique values, in order, that are
     *  present in one or more of the arrays.
     * @example
     *
     * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
     * // => [1, 2, 3, 101, 10]
     */
    function union(array) {
      if (!isArray(array)) {
        arguments[0] = array ? nativeSlice.call(array) : arrayRef;
      }
      return uniq(concat.apply(arrayRef, arguments));
    }

    /**
     * Creates a duplicate-value-free version of the `array` using strict equality
     * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`
     * for `isSorted` will run a faster algorithm. If `callback` is passed, each
     * element of `array` is passed through a callback` before uniqueness is computed.
     * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is passed for `callback`, the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is passed for `callback`, the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.
     * @param {Function|Object|String} [callback=identity] The function called per
     *  iteration. If a property name or object is passed, it will be used to create
     *  a "_.pluck" or "_.where" style callback, respectively.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });
     * // => [1, 2, 3]
     *
     * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [],
          seen = result;

      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = isSorted;
        isSorted = false;
      }
      // init value cache for large arrays
      var isLarge = !isSorted && length >= largeArraySize;
      if (isLarge) {
        var cache = {};
      }
      if (callback != null) {
        seen = [];
        callback = lodash.createCallback(callback, thisArg);
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isLarge) {
          var key = keyPrefix + computed;
          var inited = cache[key]
            ? !(seen = cache[key])
            : (seen = cache[key] = []);
        }
        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : inited || indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The inverse of `_.zip`, this method splits groups of elements into arrays
     * composed of elements from each group at their corresponding indexes.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @returns {Array} Returns a new array of the composed arrays.
     * @example
     *
     * _.unzip([['moe', 30, true], ['larry', 40, false]]);
     * // => [['moe', 'larry'], [30, 40], [true, false]];
     */
    function unzip(array) {
      var index = -1,
          length = array ? array.length : 0,
          tupleLength = length ? max(pluck(array, 'length')) : 0,
          result = Array(tupleLength);

      while (++index < length) {
        var tupleIndex = -1,
            tuple = array[index];

        while (++tupleIndex < tupleLength) {
          (result[tupleIndex] || (result[tupleIndex] = Array(length)))[index] = tuple[tupleIndex];
        }
      }
      return result;
    }

    /**
     * Creates an array with all occurrences of the passed values removed using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {Mixed} [value1, value2, ...] Values to remove.
     * @returns {Array} Returns a new filtered array.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return difference(array, nativeSlice.call(arguments, 1));
    }

    /**
     * Groups the elements of each array at their corresponding indexes. Useful for
     * separate data sources that are coordinated through matching array indexes.
     * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix
     * in a similar fashion.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} [array1, array2, ...] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['moe', 'larry'], [30, 40], [true, false]);
     * // => [['moe', 30, true], ['larry', 40, false]]
     */
    function zip(array) {
      var index = -1,
          length = array ? max(pluck(arguments, 'length')) : 0,
          result = Array(length);

      while (++index < length) {
        result[index] = pluck(arguments, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Pass either
     * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or
     * two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['moe', 'larry'], [30, 40]);
     * // => { 'moe': 30, 'larry': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * If `n` is greater than `0`, a function is created that is restricted to
     * executing `func`, with the `this` binding and arguments of the created
     * function, only after it is called `n` times. If `n` is less than `1`,
     * `func` is executed immediately, without a `this` binding or additional
     * arguments, and its result is returned.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Number} n The number of times the function must be called before
     * it is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var renderNotes = _.after(notes.length, render);
     * _.forEach(notes, function(note) {
     *   note.asyncSave({ 'success': renderNotes });
     * });
     * // `renderNotes` is run once, after all notes have saved
     */
    function after(n, func) {
      if (n < 1) {
        return func();
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * passed to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {Mixed} [thisArg] The `this` binding of `func`.
     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'moe' }, 'hi');
     * func();
     * // => 'hi moe'
     */
    function bind(func, thisArg) {
      // use `Function#bind` if it exists and is fast
      // (in V8 `Function#bind` is slower except when partially applied)
      return support.fastBind || (nativeBind && arguments.length > 2)
        ? nativeBind.call.apply(nativeBind, arguments)
        : createBound(func, thisArg, nativeSlice.call(arguments, 2));
    }

    /**
     * Binds methods on `object` to `object`, overwriting the existing method.
     * Method names may be specified as individual arguments or as arrays of method
     * names. If no method names are provided, all the function properties of `object`
     * will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *  'label': 'docs',
     *  'onClick': function() { alert('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => alerts 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? concat.apply(arrayRef, nativeSlice.call(arguments, 1)) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = bind(object[key], object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those passed to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {String} key The key of the method.
     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'moe',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi moe'
     *
     * object.greet = function(greeting) {
     *   return greeting + ', ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hi, moe!'
     */
    function bindKey(object, key) {
      return createBound(object, key, nativeSlice.call(arguments, 2), indicatorObject);
    }

    /**
     * Creates a function that is the composition of the passed functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} [func1, func2, ...] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var greet = function(name) { return 'hi ' + name; };
     * var exclaim = function(statement) { return statement + '!'; };
     * var welcome = _.compose(exclaim, greet);
     * welcome('moe');
     * // => 'hi moe!'
     */
    function compose() {
      var funcs = arguments;
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name, the created callback will return the property value for a given element.
     * If `func` is an object, the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * Note: All Lo-Dash methods, that accept a `callback` argument, use `_.createCallback`.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Mixed} [func=identity] The value to convert to a callback.
     * @param {Mixed} [thisArg] The `this` binding of the created callback.
     * @param {Number} [argCount=3] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var stooges = [
     *   { 'name': 'moe', 'age': 40 },
     *   { 'name': 'larry', 'age': 50 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(stooges, 'age__gt45');
     * // => [{ 'name': 'larry', 'age': 50 }]
     *
     * // create mixins with support for "_.pluck" and "_.where" callback shorthands
     * _.mixin({
     *   'toLookup': function(collection, callback, thisArg) {
     *     callback = _.createCallback(callback, thisArg);
     *     return _.reduce(collection, function(result, value, index, collection) {
     *       return (result[callback(value, index, collection)] = value, result);
     *     }, {});
     *   }
     * });
     *
     * _.toLookup(stooges, 'name');
     * // => { 'moe': { 'name': 'moe', 'age': 40 }, 'larry': { 'name': 'larry', 'age': 50 } }
     */
    function createCallback(func, thisArg, argCount) {
      if (func == null) {
        return identity;
      }
      var type = typeof func;
      if (type != 'function') {
        if (type != 'object') {
          return function(object) {
            return object[func];
          };
        }
        var props = keys(func);
        return function(object) {
          var length = props.length,
              result = false;
          while (length--) {
            if (!(result = isEqual(object[props[length]], func[props[length]], indicatorObject))) {
              break;
            }
          }
          return result;
        };
      }
      if (typeof thisArg != 'undefined') {
        if (argCount === 1) {
          return function(value) {
            return func.call(thisArg, value);
          };
        }
        if (argCount === 2) {
          return function(a, b) {
            return func.call(thisArg, a, b);
          };
        }
        if (argCount === 4) {
          return function(accumulator, value, index, collection) {
            return func.call(thisArg, accumulator, value, index, collection);
          };
        }
        return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
      }
      return func;
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked. Pass
     * an `options` object to indicate that `func` should be invoked on the leading
     * and/or trailing edge of the `wait` timeout. Subsequent calls to the debounced
     * function will return the result of the last `func` call.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {Number} wait The number of milliseconds to delay.
     * @param {Object} options The options object.
     *  [leading=false] A boolean to specify execution on the leading edge of the timeout.
     *  [trailing=true] A boolean to specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * var lazyLayout = _.debounce(calculateLayout, 300);
     * jQuery(window).on('resize', lazyLayout);
     */
    function debounce(func, wait, options) {
      var args,
          result,
          thisArg,
          timeoutId,
          trailing = true;

      function delayed() {
        timeoutId = null;
        if (trailing) {
          result = func.apply(thisArg, args);
        }
      }
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (options && objectTypes[typeof options]) {
        leading = options.leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      return function() {
        var isLeading = leading && !timeoutId;
        args = arguments;
        thisArg = this;

        clearTimeout(timeoutId);
        timeoutId = setTimeout(delayed, wait);

        if (isLeading) {
          result = func.apply(thisArg, args);
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be passed to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.
     * @returns {Number} Returns the timer id.
     * @example
     *
     * _.defer(function() { alert('deferred'); });
     * // returns from the function before `alert` is called
     */
    function defer(func) {
      var args = nativeSlice.call(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }
    // use `setImmediate` if it's available in Node.js
    if (isV8 && freeModule && typeof setImmediate == 'function') {
      defer = bind(setImmediate, context);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be passed to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {Number} wait The number of milliseconds to delay execution.
     * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.
     * @returns {Number} Returns the timer id.
     * @example
     *
     * var log = _.bind(console.log, console);
     * _.delay(log, 1000, 'logged later');
     * // => 'logged later' (Appears after one second.)
     */
    function delay(func, wait) {
      var args = nativeSlice.call(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * passed, it will be used to determine the cache key for storing the result
     * based on the arguments passed to the memoized function. By default, the first
     * argument passed to the memoized function is used as the cache key. The `func`
     * is executed with the `this` binding of the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     */
    function memoize(func, resolver) {
      var cache = {};
      return function() {
        var key = keyPrefix + (resolver ? resolver.apply(this, arguments) : arguments[0]);
        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      };
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those passed to the new function. This
     * method is similar to `_.bind`, except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('moe');
     * // => 'hi moe'
     */
    function partial(func) {
      return createBound(func, nativeSlice.call(arguments, 1));
    }

    /**
     * This method is similar to `_.partial`, except that `partial` arguments are
     * appended to those passed to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createBound(func, nativeSlice.call(arguments, 1), null, indicatorObject);
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. If the throttled function is
     * invoked more than once during the `wait` timeout, `func` will also be called
     * on the trailing edge of the timeout. Pass an `options` object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function will return
     * the result of the last `func` call.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {Number} wait The number of milliseconds to throttle executions to.
     * @param {Object} options The options object.
     *  [leading=true] A boolean to specify execution on the leading edge of the timeout.
     *  [trailing=true] A boolean to specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     */
    function throttle(func, wait, options) {
      var args,
          result,
          thisArg,
          timeoutId,
          lastCalled = 0,
          leading = true,
          trailing = true;

      function trailingCall() {
        lastCalled = new Date;
        timeoutId = null;

        if (trailing) {
          result = func.apply(thisArg, args);
        }
      }
      if (options === false) {
        leading = false;
      } else if (options && objectTypes[typeof options]) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      return function() {
        var now = new Date;
        if (!timeoutId && !leading) {
          lastCalled = now;
        }
        var remaining = wait - (now - lastCalled);
        args = arguments;
        thisArg = this;

        if (remaining <= 0) {
          clearTimeout(timeoutId);
          timeoutId = null;
          lastCalled = now;
          result = func.apply(thisArg, args);
        }
        else if (!timeoutId) {
          timeoutId = setTimeout(trailingCall, remaining);
        }
        return result;
      };
    }

    /**
     * Creates a function that passes `value` to the `wrapper` function as its
     * first argument. Additional arguments passed to the function are appended
     * to those passed to the `wrapper` function. The `wrapper` is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Mixed} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var hello = function(name) { return 'hello ' + name; };
     * hello = _.wrap(hello, function(func) {
     *   return 'before, ' + func('moe') + ', after';
     * });
     * hello();
     * // => 'before, hello moe, after'
     */
    function wrap(value, wrapper) {
      return function() {
        var args = [value];
        push.apply(args, arguments);
        return wrapper.apply(this, args);
      };
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {String} string The string to escape.
     * @returns {String} Returns the escaped string.
     * @example
     *
     * _.escape('Moe, Larry & Curly');
     * // => 'Moe, Larry &amp; Curly'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This function returns the first argument passed to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Mixed} value Any value.
     * @returns {Mixed} Returns `value`.
     * @example
     *
     * var moe = { 'name': 'moe' };
     * moe === _.identity(moe);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds functions properties of `object` to the `lodash` function and chainable
     * wrapper.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object of function properties to add to `lodash`.
     * @example
     *
     * _.mixin({
     *   'capitalize': function(string) {
     *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     *   }
     * });
     *
     * _.capitalize('moe');
     * // => 'Moe'
     *
     * _('moe').capitalize();
     * // => 'Moe'
     */
    function mixin(object) {
      forEach(functions(object), function(methodName) {
        var func = lodash[methodName] = object[methodName];

        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = [value];

          push.apply(args, arguments);
          var result = func.apply(lodash, args);
          return (value && typeof value == 'object' && value == result)
            ? this
            : new lodashWrapper(result);
        };
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * Converts the given `value` into an integer of the specified `radix`.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.com/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Mixed} value The value to parse.
     * @returns {Number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt('08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox and Opera still follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingZeros, '') : value, radix || 0);
    };

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is passed, a number between `0` and the given number will be returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Number} [min=0] The minimum possible value.
     * @param {Number} [max=1] The maximum possible value.
     * @returns {Number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => a number between 0 and 5
     *
     * _.random(5);
     * // => also a number between 0 and 5
     */
    function random(min, max) {
      if (min == null && max == null) {
        max = 1;
      }
      min = +min || 0;
      if (max == null) {
        max = min;
        min = 0;
      }
      return min + floor(nativeRandom() * ((+max || 0) - min + 1));
    }

    /**
     * Resolves the value of `property` on `object`. If `property` is a function,
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey, then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {String} property The property to get the value of.
     * @returns {Mixed} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, property) {
      var value = object ? object[property] : undefined;
      return isFunction(value) ? object[property]() : value;
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/#custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {String} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} options The options object.
     *  escape - The "escape" delimiter regexp.
     *  evaluate - The "evaluate" delimiter regexp.
     *  interpolate - The "interpolate" delimiter regexp.
     *  sourceURL - The sourceURL of the template's compiled source.
     *  variable - The data object variable name.
     * @returns {Function|String} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'moe' });
     * // => 'hello moe'
     *
     * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';
     * _.template(list, { 'people': ['moe', 'larry'] });
     * // => '<li>moe</li><li>larry</li>'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'curly' });
     * // => 'hello curly'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + epithet); %>!', { 'epithet': 'stooge' });
     * // => 'hello stooge!'
     *
     * // using custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text || (text = '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging and wrap in a multi-line comment to
      // avoid issues with Narwhal, IE conditional compilation, and the JS engine
      // embedded in Adobe products.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//@ sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source via its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the `callback` function `n` times, returning an array of the results
     * of each `callback` execution. The `callback` is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {Mixed} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = lodash.createCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape`, this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {String} string The string to unescape.
     * @returns {String} Returns the unescaped string.
     * @example
     *
     * _.unescape('Moe, Larry &amp; Curly');
     * // => 'Moe, Larry & Curly'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is passed, the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {String} [prefix] The value to prefix the ID with.
     * @returns {String} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Invokes `interceptor` with the `value` as the first argument, and then
     * returns `value`. The purpose of this method is to "tap into" a method chain,
     * in order to perform operations on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {Mixed} value The value to pass to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {Mixed} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .filter(function(num) { return num % 2 == 0; })
     *  .tap(alert)
     *  .map(function(num) { return num * num; })
     *  .value();
     * // => // [2, 4] (alerted)
     * // => [4, 16]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {String} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {Mixed} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.countBy = countBy;
    lodash.createCallback = createCallback;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forIn = forIn;
    lodash.forOwn = forOwn;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.range = range;
    lodash.reject = reject;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    forOwn(lodash, function(func, methodName) {
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName] = function() {
          var args = [this.__wrapped__];
          push.apply(args, arguments);
          return func.apply(lodash, args);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(callback, thisArg) {
          var result = func(this.__wrapped__, callback, thisArg);
          return callback == null || (thisArg && typeof callback != 'function')
            ? result
            : new lodashWrapper(result);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type String
     */
    lodash.VERSION = '1.2.0';

    // add "Chaining" functions to the wrapper
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return func.apply(this.__wrapped__, arguments);
      };
    });

    // add `Array` functions that return the wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments));
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash was injected by a third-party script and not intended to be
    // loaded as a module. The global assignment can be reverted in the Lo-Dash
    // module via its `noConflict()` method.
    window._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && !freeExports.nodeType) {
    // in Node.js or RingoJS v0.8.0+
    if (freeModule) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or RingoJS v0.7.0-
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    window._ = _;
  }
}(this));


})();

(function() {

d3 = function() {
  var d3 = {
    version: "3.2.7"
  };
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_document.createElement("div").style.setProperty("opacity", 0, "");
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function(name, value) {
      d3_element_setAttribute.call(this, name, value + "");
    };
    d3_element_prototype.setAttributeNS = function(space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + "");
    };
    d3_style_prototype.setProperty = function(name, value, priority) {
      d3_style_setProperty.call(this, name, value + "", priority);
    };
  }
  d3.ascending = function(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  };
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (!isNaN(a = +array[i])) s += a;
    } else {
      while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  function d3_number(x) {
    return x != null && !isNaN(x);
  }
  d3.mean = function(array, f) {
    var n = array.length, a, m = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) if (d3_number(a = array[i])) m += (a - m) / ++j;
    } else {
      while (++i < n) if (d3_number(a = f.call(array, array[i], i))) m += (a - m) / ++j;
    }
    return j ? m : undefined;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    if (arguments.length > 1) array = array.map(f);
    array = array.filter(d3_number);
    return array.length ? d3.quantile(array.sort(d3.ascending), .5) : undefined;
  };
  d3.bisector = function(f) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (f.call(a, a[mid], mid) < x) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (x < f.call(a, a[mid], mid)) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  };
  var d3_bisector = d3.bisector(function(d) {
    return d;
  });
  d3.bisectLeft = d3_bisector.left;
  d3.bisect = d3.bisectRight = d3_bisector.right;
  d3.shuffle = function(array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var permutes = [], i = -1, n = indexes.length;
    while (++i < n) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    return Array.prototype.concat.apply([], arrays);
  };
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(Math.abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    try {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    } catch (e) {
      ctor.prototype = properties;
    }
  }
  d3.map = function(object) {
    var map = new d3_Map();
    for (var key in object) map.set(key, object[key]);
    return map;
  };
  function d3_Map() {}
  d3_class(d3_Map, {
    has: function(key) {
      return d3_map_prefix + key in this;
    },
    get: function(key) {
      return this[d3_map_prefix + key];
    },
    set: function(key, value) {
      return this[d3_map_prefix + key] = value;
    },
    remove: function(key) {
      key = d3_map_prefix + key;
      return key in this && delete this[key];
    },
    keys: function() {
      var keys = [];
      this.forEach(function(key) {
        keys.push(key);
      });
      return keys;
    },
    values: function() {
      var values = [];
      this.forEach(function(key, value) {
        values.push(value);
      });
      return values;
    },
    entries: function() {
      var entries = [];
      this.forEach(function(key, value) {
        entries.push({
          key: key,
          value: value
        });
      });
      return entries;
    },
    forEach: function(f) {
      for (var key in this) {
        if (key.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, key.substring(1), this[key]);
        }
      }
    }
  });
  var d3_map_prefix = "\0", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0; i < array.length; i++) set.add(array[i]);
    return set;
  };
  function d3_Set() {}
  d3_class(d3_Set, {
    has: function(value) {
      return d3_map_prefix + value in this;
    },
    add: function(value) {
      this[d3_map_prefix + value] = true;
      return value;
    },
    remove: function(value) {
      value = d3_map_prefix + value;
      return value in this && delete this[value];
    },
    values: function() {
      var values = [];
      this.forEach(function(value) {
        values.push(value);
      });
      return values;
    },
    forEach: function(f) {
      for (var value in this) {
        if (value.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, value.substring(1));
        }
      }
    }
  });
  d3.behavior = {};
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.substring(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  var d3_array = d3_arraySlice;
  function d3_arrayCopy(pseudoarray) {
    var i = -1, n = pseudoarray.length, array = [];
    while (++i < n) array.push(pseudoarray[i]);
    return array;
  }
  function d3_arraySlice(pseudoarray) {
    return Array.prototype.slice.call(pseudoarray);
  }
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = d3_arrayCopy;
  }
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.substring(i + 1);
      type = type.substring(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
    return d3_selectMatcher.call(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = function(s, n) {
      return Sizzle.uniqueSort(Sizzle(s, n));
    };
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0) {
        prefix = name.substring(0, i);
        name = name.substring(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = name.trim().split(/^|\s+/g)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classed(name, value) {
    name = name.trim().split(/\s+/).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
      return d3_document.createElementNS(name.space, name.local);
    } : function() {
      return d3_document.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments));
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(function() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
        for (i = -1; ++i < n; ) {
          keyValue = key.call(node = group[i], node.__data__, i);
          if (nodeByKeyValue.has(keyValue)) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues.push(keyValue);
        }
        for (i = -1; ++i < m; ) {
          keyValue = key.call(groupData, nodeData = groupData[i], i);
          if (node = nodeByKeyValue.get(keyValue)) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          } else if (!dataByKeyValue.has(keyValue)) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
          dataByKeyValue.set(keyValue, nodeData);
          nodeByKeyValue.remove(keyValue);
        }
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.has(keyValues[i])) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3.ascending;
    return function(a, b) {
      return !a - !b || comparator(a.__data__, b.__data__);
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    this.each(function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3_selectionPrototype.transition = function() {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3.select = function(node) {
    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.substring(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  d3_selection_onFilters.forEach(function(k) {
    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = ".dragsuppress-" + ++d3_event_dragId, touchmove = "touchmove" + name, selectstart = "selectstart" + name, dragstart = "dragstart" + name, click = "click" + name, w = d3.select(d3_window).on(touchmove, d3_eventPreventDefault).on(selectstart, d3_eventPreventDefault).on(dragstart, d3_eventPreventDefault), style = d3_documentElement.style, select = style[d3_event_dragSelect];
    style[d3_event_dragSelect] = "none";
    return function(suppressClick) {
      w.on(name, null);
      style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select("body").append("svg").style({
          position: "absolute",
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: "none"
        }, "important");
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083) {
        point.x = e.pageX;
        point.y = e.pageY;
      } else {
        point.x = e.clientX;
        point.y = e.clientY;
      }
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, "mousemove", "mouseup"), touchstart = dragstart(touchid, touchposition, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function touchid() {
      return d3.event.changedTouches[0].identifier;
    }
    function touchposition(parent, id) {
      return d3.touches(parent).filter(function(p) {
        return p.identifier === id;
      })[0];
    }
    function dragstart(id, position, move, end) {
      return function() {
        var target = this, parent = target.parentNode, event_ = event.of(target, arguments), eventTarget = d3.event.target, eventId = id(), drag = eventId == null ? "drag" : "drag-" + eventId, origin_ = position(parent, eventId), dragged = 0, offset, w = d3.select(d3_window).on(move + "." + drag, moved).on(end + "." + drag, ended), dragRestore = d3_event_dragSuppress();
        if (origin) {
          offset = origin.apply(target, arguments);
          offset = [ offset.x - origin_[0], offset.y - origin_[1] ];
        } else {
          offset = [ 0, 0 ];
        }
        event_({
          type: "dragstart"
        });
        function moved() {
          if (!parent) return ended();
          var p = position(parent, eventId), dx = p[0] - origin_[0], dy = p[1] - origin_[1];
          dragged |= dx | dy;
          origin_ = p;
          event_({
            type: "drag",
            x: p[0] + offset[0],
            y: p[1] + offset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          w.on(move + "." + drag, null).on(end + "." + drag, null);
          dragRestore(dragged && d3.event.target === eventTarget);
          event_({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  d3.behavior.zoom = function() {
    var translate = [ 0, 0 ], translate0, scale = 1, scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", event = d3_eventDispatch(zoom, "zoom"), x0, x1, y0, y1, touchtime;
    function zoom() {
      this.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on(mousemove, mousewheelreset).on("dblclick.zoom", dblclicked).on("touchstart.zoom", touchstarted);
    }
    zoom.translate = function(x) {
      if (!arguments.length) return translate;
      translate = x.map(Number);
      rescale();
      return zoom;
    };
    zoom.scale = function(x) {
      if (!arguments.length) return scale;
      scale = +x;
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(x) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = x == null ? d3_behavior_zoomInfinity : x.map(Number);
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      translate = [ 0, 0 ];
      scale = 1;
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      translate = [ 0, 0 ];
      scale = 1;
      return zoom;
    };
    function location(p) {
      return [ (p[0] - translate[0]) / scale, (p[1] - translate[1]) / scale ];
    }
    function point(l) {
      return [ l[0] * scale + translate[0], l[1] * scale + translate[1] ];
    }
    function scaleTo(s) {
      scale = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      translate[0] += p[0] - l[0];
      translate[1] += p[1] - l[1];
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - translate[0]) / scale;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - translate[1]) / scale;
      }).map(y0.invert));
    }
    function dispatch(event) {
      rescale();
      event({
        type: "zoom",
        scale: scale,
        translate: translate
      });
    }
    function mousedowned() {
      var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, dragged = 0, w = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), l = location(d3.mouse(target)), dragRestore = d3_event_dragSuppress();
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(target), l);
        dispatch(event_);
      }
      function ended() {
        w.on(mousemove, d3_window === target ? mousewheelreset : null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === eventTarget);
      }
    }
    function touchstarted() {
      var target = this, event_ = event.of(target, arguments), touches = d3.touches(target), locations = {}, distance0 = 0, scale0 = scale, now = Date.now(), name = "zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove." + name, touchend = "touchend." + name, w = d3.select(d3_window).on(touchmove, moved).on(touchend, ended), t = d3.select(target).on(mousedown, null), dragRestore = d3_event_dragSuppress();
      touches.forEach(function(t) {
        locations[t.identifier] = location(t);
      });
      if (touches.length === 1) {
        if (now - touchtime < 500) {
          var p = touches[0], l = location(touches[0]);
          scaleTo(scale * 2);
          translateTo(p, l);
          d3_eventPreventDefault();
          dispatch(event_);
        }
        touchtime = now;
      } else if (touches.length > 1) {
        var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
        distance0 = dx * dx + dy * dy;
      }
      function moved() {
        var touches = d3.touches(target), p0 = touches[0], l0 = locations[p0.identifier];
        if (p1 = touches[1]) {
          var p1, l1 = locations[p1.identifier], scale1 = d3.event.scale;
          if (scale1 == null) {
            var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1;
            scale1 = distance0 && Math.sqrt(distance1 / distance0);
          }
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        dispatch(event_);
      }
      function ended() {
        w.on(touchmove, null).on(touchend, null);
        t.on(mousedown, mousedowned);
        dragRestore();
      }
    }
    function mousewheeled() {
      d3_eventPreventDefault();
      if (!translate0) translate0 = location(d3.mouse(this));
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * scale);
      translateTo(d3.mouse(this), translate0);
      dispatch(event.of(this, arguments));
    }
    function mousewheelreset() {
      translate0 = null;
    }
    function dblclicked() {
      var p = d3.mouse(this), l = location(p), k = Math.log(scale) / Math.LN2;
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      dispatch(event.of(this, arguments));
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return d3.event.wheelDelta;
  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
    return -d3.event.detail;
  }, "MozMousePixelScroll");
  function d3_Color() {}
  d3_Color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = function(h, s, l) {
    return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l);
  };
  function d3_hsl(h, s, l) {
    return new d3_Hsl(h, s, l);
  }
  function d3_Hsl(h, s, l) {
    this.h = h;
    this.s = s;
    this.l = l;
  }
  var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  var π = Math.PI, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? π / 2 : x < -1 ? -π / 2 : Math.asin(x);
  }
  function d3_sinh(x) {
    return (Math.exp(x) - Math.exp(-x)) / 2;
  }
  function d3_cosh(x) {
    return (Math.exp(x) + Math.exp(-x)) / 2;
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  d3.hcl = function(h, c, l) {
    return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l);
  };
  function d3_hcl(h, c, l) {
    return new d3_Hcl(h, c, l);
  }
  function d3_Hcl(h, c, l) {
    this.h = h;
    this.c = c;
    this.l = l;
  }
  var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();
  d3_hclPrototype.brighter = function(k) {
    return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = function(l, a, b) {
    return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b);
  };
  function d3_lab(l, a, b) {
    return new d3_Lab(l, a, b);
  }
  function d3_Lab(l, a, b) {
    this.l = l;
    this.a = a;
    this.b = b;
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_Lab.prototype = new d3_Color();
  d3_labPrototype.brighter = function(k) {
    return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = function(r, g, b) {
    return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b);
  };
  function d3_rgbNumber(value) {
    return d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  function d3_rgb(r, g, b) {
    return new d3_Rgb(r, g, b);
  }
  function d3_Rgb(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b));
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, name;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (name = d3_rgb_names.get(format)) return rgb(name.r, name.g, name.b);
    if (format != null && format.charAt(0) === "#") {
      if (format.length === 4) {
        r = format.charAt(1);
        r += r;
        g = format.charAt(2);
        g += g;
        b = format.charAt(3);
        b += b;
      } else if (format.length === 7) {
        r = format.substring(1, 3);
        g = format.substring(3, 5);
        b = format.substring(5, 7);
      }
      r = parseInt(r, 16);
      g = parseInt(g, 16);
      b = parseInt(b, 16);
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType,
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3.xhr(url, mimeType, callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr.row(row);
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.substring(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.substring(j, I - k);
        }
        return text.substring(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && !(a = f(a, n++))) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      callback: callback,
      time: time,
      next: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.next = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_replace(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    d3_timer_active.callback = callback;
    d3_timer_active.time = then + delay;
  }
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.time) d3_timer_active.flush = d3_timer_active.callback(now - d3_timer_active.time);
      d3_timer_active = d3_timer_active.next;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.flush) {
        t1 = t0 ? t0.next = t1.next : d3_timer_queueHead = t1.next;
      } else {
        if (t1.time < time) time = t1.time;
        t1 = (t0 = t1).next;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  var d3_format_decimalPoint = ".", d3_format_thousandsSeparator = ",", d3_format_grouping = [ 3, 3 ], d3_format_currencySymbol = "$";
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, Math.abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  d3.format = function(specifier) {
    var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, suffix = "", integer = false;
    if (precision) precision = +precision.substring(1);
    if (zfill || fill === "0" && align === "=") {
      zfill = fill = "0";
      align = "=";
      if (comma) width -= Math.floor((width - 1) / 4);
    }
    switch (type) {
     case "n":
      comma = true;
      type = "g";
      break;

     case "%":
      scale = 100;
      suffix = "%";
      type = "f";
      break;

     case "p":
      scale = 100;
      suffix = "%";
      type = "r";
      break;

     case "b":
     case "o":
     case "x":
     case "X":
      if (symbol === "#") symbol = "0" + type.toLowerCase();

     case "c":
     case "d":
      integer = true;
      precision = 0;
      break;

     case "s":
      scale = -1;
      type = "r";
      break;
    }
    if (symbol === "#") symbol = ""; else if (symbol === "$") symbol = d3_format_currencySymbol;
    if (type == "r" && !precision) type = "g";
    if (precision != null) {
      if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
    }
    type = d3_format_types.get(type) || d3_format_typeDefault;
    var zcomma = zfill && comma;
    return function(value) {
      if (integer && value % 1) return "";
      var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
      if (scale < 0) {
        var prefix = d3.formatPrefix(value, precision);
        value = prefix.scale(value);
        suffix = prefix.symbol;
      } else {
        value *= scale;
      }
      value = type(value, precision);
      var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : d3_format_decimalPoint + value.substring(i + 1);
      if (!zfill && comma) before = d3_format_group(before);
      var length = symbol.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
      if (zcomma) before = d3_format_group(padding + before);
      negative += symbol;
      value = before + after;
      return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + suffix;
    };
  };
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_format_group = d3_identity;
  if (d3_format_grouping) {
    var d3_format_groupingLength = d3_format_grouping.length;
    d3_format_group = function(value) {
      var i = value.length, t = [], j = 0, g = d3_format_grouping[0];
      while (i > 0 && g > 0) {
        t.push(value.substring(i -= g, i + g));
        g = d3_format_grouping[j = (j + 1) % d3_format_groupingLength];
      }
      return t.reverse().join(d3_format_thousandsSeparator);
    };
  }
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      var coordinate = object.coordinates;
      listener.point(coordinate[0], coordinate[1]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length, coordinate;
      while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4),
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return Math.abs(a[0] - b[0]) < ε && Math.abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = Math.abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += Math.abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (Math.abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, inside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = {
        point: p0,
        points: segment,
        other: null,
        visited: false,
        entry: true,
        subject: true
      }, b = {
        point: p0,
        points: [ p0 ],
        other: a,
        visited: false,
        entry: false,
        subject: false
      };
      a.other = b;
      subject.push(a);
      clip.push(b);
      a = {
        point: p1,
        points: [ p1 ],
        other: null,
        visited: false,
        entry: false,
        subject: true
      };
      b = {
        point: p1,
        points: [ p1 ],
        other: a,
        visited: false,
        entry: true,
        subject: false
      };
      a.other = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    if (inside) for (var i = 1, e = !inside(clip[0].point), n = clip.length; i < n; ++i) {
      clip[i].entry = e = !e;
    }
    var start = subject[0], current, points, point;
    while (1) {
      current = start;
      while (current.visited) if ((current = current.next) === start) return;
      points = current.points;
      listener.lineStart();
      do {
        current.visited = current.other.visited = true;
        if (current.entry) {
          if (current.subject) {
            for (var i = 0; i < points.length; i++) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.point, current.next.point, 1, listener);
          }
          current = current.next;
        } else {
          if (current.subject) {
            points = current.prev.points;
            for (var i = points.length; --i >= 0; ) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.point, current.prev.point, -1, listener);
          }
          current = current.prev;
        }
        current = current.other;
        points = current.points;
      } while (!current.visited);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.next = b = array[i];
      b.prev = a;
      a = b;
    }
    a.next = b = array[0];
    b.prev = a;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, polygonContains) {
    return function(listener) {
      var line = clipLine(listener);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
          listener.polygonStart();
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          if (segments.length) {
            d3_geo_clipPolygon(segments, d3_geo_clipSort, null, interpolate, listener);
          } else if (polygonContains(polygon)) {
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          listener.polygonEnd();
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        if (pointVisible(λ, φ)) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        line.point(λ, φ);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygon, ring;
      function pointRing(λ, φ) {
        ringListener.point(λ, φ);
        ring.push([ λ, φ ]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          listener.lineStart();
          while (++i < n) listener.point((point = segment[i])[0], point[1]);
          listener.lineEnd();
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.point)[0] < 0 ? a[1] - π / 2 - ε : π / 2 - a[1]) - ((b = b.point)[0] < 0 ? b[1] - π / 2 - ε : π / 2 - b[1]);
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, polar = false, southPole = false, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, antimeridian = Math.abs(dλ) > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * Math.sin(dλ), cosφ0 * cosφ + k * Math.cos(dλ)));
        if (Math.abs(φ) < ε) southPole = true;
        polarAngle += antimeridian ? dλ + (dλ >= 0 ? 2 : -2) * π : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
      if (Math.abs(polarAngle) > ε) polar = true;
    }
    return (!southPole && !polar && d3_geo_areaRingSum < 0 || polarAngle < -ε) ^ winding & 1;
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, d3_geo_clipAntimeridianPolygonContains);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = Math.abs(λ1 - λ0);
        if (Math.abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? π / 2 : -π / 2);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (Math.abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (Math.abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return Math.abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * π / 2;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (Math.abs(from[0] - to[0]) > ε) {
      var s = (from[0] < to[0] ? 1 : -1) * π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  var d3_geo_clipAntimeridianPoint = [ -π, 0 ];
  function d3_geo_clipAntimeridianPolygonContains(polygon) {
    return d3_geo_pointInPolygon(d3_geo_clipAntimeridianPoint, polygon);
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, point = [ radius, 0 ], notHemisphere = Math.abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, polygonContains);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = Math.abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (Math.abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
    function polygonContains(polygon) {
      return d3_geo_pointInPolygon(point, polygon);
    }
  }
  var d3_geo_clipViewMAX = 1e9;
  function d3_geo_clipView(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          listener = listener_;
          if ((segments = d3.merge(segments)).length) {
            listener.polygonStart();
            d3_geo_clipPolygon(segments, compare, inside, interpolate, listener);
            listener.polygonEnd();
          } else if (insidePolygon([ x0, y0 ])) {
            listener.polygonStart(), listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd(), listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function inside(point) {
        var a = corner(point, -1), i = insidePolygon([ a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0 ]);
        return i;
      }
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && isLeft(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && isLeft(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function isLeft(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (visible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipViewMAX, Math.min(d3_geo_clipViewMAX, x));
        y = Math.max(-d3_geo_clipViewMAX, Math.min(d3_geo_clipViewMAX, y));
        var v = visible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var a = [ x_, y_ ], b = [ x, y ];
            if (clipLine(a, b)) {
              if (!v_) {
                listener.lineStart();
                listener.point(a[0], a[1]);
              }
              listener.point(b[0], b[1]);
              if (!v) listener.lineEnd();
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return Math.abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : Math.abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : Math.abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.point, b.point);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    function clipLine(a, b) {
      var dx = b[0] - a[0], dy = b[1] - a[1], t = [ 0, 1 ];
      if (Math.abs(dx) < ε && Math.abs(dy) < ε) return x0 <= a[0] && a[0] <= x1 && y0 <= a[1] && a[1] <= y1;
      if (d3_geo_clipViewT(x0 - a[0], dx, t) && d3_geo_clipViewT(a[0] - x1, -dx, t) && d3_geo_clipViewT(y0 - a[1], dy, t) && d3_geo_clipViewT(a[1] - y1, -dy, t)) {
        if (t[1] < 1) {
          b[0] = a[0] + t[1] * dx;
          b[1] = a[1] + t[1] * dy;
        }
        if (t[0] > 0) {
          a[0] += t[0] * dx;
          a[1] += t[0] * dy;
        }
        return true;
      }
      return false;
    }
  }
  function d3_geo_clipViewT(num, denominator, t) {
    if (Math.abs(denominator) < ε) return num <= 0;
    var u = num / denominator;
    if (denominator > 0) {
      if (u > t[1]) return false;
      if (u > t[0]) t[0] = u;
    } else {
      if (u < t[0]) return false;
      if (u < t[1]) t[1] = u;
    }
    return true;
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += Math.abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, 2 * π);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = Math.abs(Math.abs(c) - 1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || Math.abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(λ, φ) {
      return project([ λ * d3_degrees, φ * d3_degrees ]);
    });
    return function(stream) {
      stream = resample(stream);
      return {
        point: function(λ, φ) {
          stream.point(λ * d3_radians, φ * d3_radians);
        },
        sphere: function() {
          stream.sphere();
        },
        lineStart: function() {
          stream.lineStart();
        },
        lineEnd: function() {
          stream.lineEnd();
        },
        polygonStart: function() {
          stream.polygonStart();
        },
        polygonEnd: function() {
          stream.polygonEnd();
        }
      };
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadiansRotate(rotate, preclip(projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ == null ? d3_identity : d3_geo_clipView(_[0][0], _[0][1], _[1][0], _[1][1]);
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) {
        stream.valid = false;
        stream = null;
      }
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadiansRotate(rotate, stream) {
    return {
      point: function(x, y) {
        y = rotate(x * d3_radians, y * d3_radians), x = y[0];
        stream.point(x > π ? x - 2 * π : x < -π ? x + 2 * π : x, y[1]);
      },
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_equirectangular;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - 2 * π : λ < -π ? λ + 2 * π : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * 2 * π;
      } else {
        from = radius + direction * 2 * π;
        to = radius;
      }
      var point;
      for (var step = direction * precision, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return Math.abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return Math.abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = Math.abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      var ρ = Math.abs(Math.abs(φ) - π / 2) < ε ? 0 : F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - π / 2 ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (Math.abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - π / 2 ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    var B = Math.cos(φ) * Math.sin(λ);
    return [ Math.log((1 + B) / (1 - B)) / 2, Math.atan2(Math.tan(φ), Math.cos(λ)) ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ Math.atan2(d3_sinh(x), Math.cos(y)), d3_asin(Math.sin(y) / d3_cosh(x)) ];
  };
  (d3.geo.transverseMercator = function() {
    return d3_geo_mercatorProjection(d3_geo_transverseMercator);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  d3.svg = {};
  function d3_svg_line(projection) {
    var x = d3_svg_lineX, y = d3_svg_lineY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  function d3_svg_lineX(d) {
    return d[0];
  }
  function d3_svg_lineY(d) {
    return d[1];
  }
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join("L");
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]),
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (Math.abs(d) < 1e-6) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.geom.hull = function(vertices) {
    var x = d3_svg_lineX, y = d3_svg_lineY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), n = data.length, vertices, plen = n - 1, points = [], stack = [], d, i, j, h = 0, x1, y1, x2, y2, u, v, a, sp;
      if (fx === d3_svg_lineX && y === d3_svg_lineY) vertices = data; else for (i = 0,
      vertices = []; i < n; ++i) {
        vertices.push([ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]);
      }
      for (i = 1; i < n; ++i) {
        if (vertices[i][1] < vertices[h][1] || vertices[i][1] == vertices[h][1] && vertices[i][0] < vertices[h][0]) h = i;
      }
      for (i = 0; i < n; ++i) {
        if (i === h) continue;
        y1 = vertices[i][1] - vertices[h][1];
        x1 = vertices[i][0] - vertices[h][0];
        points.push({
          angle: Math.atan2(y1, x1),
          index: i
        });
      }
      points.sort(function(a, b) {
        return a.angle - b.angle;
      });
      a = points[0].angle;
      v = points[0].index;
      u = 0;
      for (i = 1; i < plen; ++i) {
        j = points[i].index;
        if (a == points[i].angle) {
          x1 = vertices[v][0] - vertices[h][0];
          y1 = vertices[v][1] - vertices[h][1];
          x2 = vertices[j][0] - vertices[h][0];
          y2 = vertices[j][1] - vertices[h][1];
          if (x1 * x1 + y1 * y1 >= x2 * x2 + y2 * y2) {
            points[i].index = -1;
            continue;
          } else {
            points[u].index = -1;
          }
        }
        a = points[i].angle;
        u = i;
        v = j;
      }
      stack.push(h);
      for (i = 0, j = 0; i < 2; ++j) {
        if (points[j].index > -1) {
          stack.push(points[j].index);
          i++;
        }
      }
      sp = stack.length;
      for (;j < plen; ++j) {
        if (points[j].index < 0) continue;
        while (!d3_geom_hullCCW(stack[sp - 2], stack[sp - 1], points[j].index, vertices)) {
          --sp;
        }
        stack[sp++] = points[j].index;
      }
      var poly = [];
      for (i = sp - 1; i >= 0; --i) poly.push(data[stack[i]]);
      return poly;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullCCW(i1, i2, i3, v) {
    var t, a, b, c, d, e, f;
    t = v[i1];
    a = t[0];
    b = t[1];
    t = v[i2];
    c = t[0];
    d = t[1];
    t = v[i3];
    e = t[0];
    f = t[1];
    return (f - b) * (c - a) - (d - b) * (e - a) > 0;
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  d3.geom.delaunay = function(vertices) {
    var edges = vertices.map(function() {
      return [];
    }), triangles = [];
    d3_geom_voronoiTessellate(vertices, function(e) {
      edges[e.region.l.index].push(vertices[e.region.r.index]);
    });
    edges.forEach(function(edge, i) {
      var v = vertices[i], cx = v[0], cy = v[1];
      edge.forEach(function(v) {
        v.angle = Math.atan2(v[0] - cx, v[1] - cy);
      });
      edge.sort(function(a, b) {
        return a.angle - b.angle;
      });
      for (var j = 0, m = edge.length - 1; j < m; j++) {
        triangles.push([ v, edge[j], edge[j + 1] ]);
      }
    });
    return triangles;
  };
  d3.geom.voronoi = function(points) {
    var x = d3_svg_lineX, y = d3_svg_lineY, clipPolygon = null;
    if (arguments.length) return voronoi(points);
    function voronoi(data) {
      var points, polygons = data.map(function() {
        return [];
      }), fx = d3_functor(x), fy = d3_functor(y), d, i, n = data.length, Z = 1e6;
      if (fx === d3_svg_lineX && fy === d3_svg_lineY) points = data; else for (points = new Array(n),
      i = 0; i < n; ++i) {
        points[i] = [ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ];
      }
      d3_geom_voronoiTessellate(points, function(e) {
        var s1, s2, x1, x2, y1, y2;
        if (e.a === 1 && e.b >= 0) {
          s1 = e.ep.r;
          s2 = e.ep.l;
        } else {
          s1 = e.ep.l;
          s2 = e.ep.r;
        }
        if (e.a === 1) {
          y1 = s1 ? s1.y : -Z;
          x1 = e.c - e.b * y1;
          y2 = s2 ? s2.y : Z;
          x2 = e.c - e.b * y2;
        } else {
          x1 = s1 ? s1.x : -Z;
          y1 = e.c - e.a * x1;
          x2 = s2 ? s2.x : Z;
          y2 = e.c - e.a * x2;
        }
        var v1 = [ x1, y1 ], v2 = [ x2, y2 ];
        polygons[e.region.l.index].push(v1, v2);
        polygons[e.region.r.index].push(v1, v2);
      });
      polygons = polygons.map(function(polygon, i) {
        var cx = points[i][0], cy = points[i][1], angle = polygon.map(function(v) {
          return Math.atan2(v[0] - cx, v[1] - cy);
        }), order = d3.range(polygon.length).sort(function(a, b) {
          return angle[a] - angle[b];
        });
        return order.filter(function(d, i) {
          return !i || angle[d] - angle[order[i - 1]] > ε;
        }).map(function(d) {
          return polygon[d];
        });
      });
      polygons.forEach(function(polygon, i) {
        var n = polygon.length;
        if (!n) return polygon.push([ -Z, -Z ], [ -Z, Z ], [ Z, Z ], [ Z, -Z ]);
        if (n > 2) return;
        var p0 = points[i], p1 = polygon[0], p2 = polygon[1], x0 = p0[0], y0 = p0[1], x1 = p1[0], y1 = p1[1], x2 = p2[0], y2 = p2[1], dx = Math.abs(x2 - x1), dy = y2 - y1;
        if (Math.abs(dy) < ε) {
          var y = y0 < y1 ? -Z : Z;
          polygon.push([ -Z, y ], [ Z, y ]);
        } else if (dx < ε) {
          var x = x0 < x1 ? -Z : Z;
          polygon.push([ x, -Z ], [ x, Z ]);
        } else {
          var y = (x2 - x1) * (y1 - y0) < (x1 - x0) * (y2 - y1) ? Z : -Z, z = Math.abs(dy) - dx;
          if (Math.abs(z) < ε) {
            polygon.push([ dy < 0 ? y : -y, y ]);
          } else {
            if (z > 0) y *= -1;
            polygon.push([ -Z, y ], [ Z, y ]);
          }
        }
      });
      if (clipPolygon) for (i = 0; i < n; ++i) clipPolygon.clip(polygons[i]);
      for (i = 0; i < n; ++i) polygons[i].point = data[i];
      return polygons;
    }
    voronoi.x = function(_) {
      return arguments.length ? (x = _, voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (y = _, voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipPolygon && [ clipPolygon[0], clipPolygon[2] ];
      if (_ == null) clipPolygon = null; else {
        var x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
        clipPolygon = d3.geom.polygon([ [ x1, y1 ], [ x1, y2 ], [ x2, y2 ], [ x2, y1 ] ]);
      }
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipPolygon && clipPolygon[2];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    voronoi.links = function(data) {
      var points, graph = data.map(function() {
        return [];
      }), links = [], fx = d3_functor(x), fy = d3_functor(y), d, i, n = data.length;
      if (fx === d3_svg_lineX && fy === d3_svg_lineY) points = data; else for (points = new Array(n),
      i = 0; i < n; ++i) {
        points[i] = [ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ];
      }
      d3_geom_voronoiTessellate(points, function(e) {
        var l = e.region.l.index, r = e.region.r.index;
        if (graph[l][r]) return;
        graph[l][r] = graph[r][l] = true;
        links.push({
          source: data[l],
          target: data[r]
        });
      });
      return links;
    };
    voronoi.triangles = function(data) {
      if (x === d3_svg_lineX && y === d3_svg_lineY) return d3.geom.delaunay(data);
      var points = new Array(n), fx = d3_functor(x), fy = d3_functor(y), d, i = -1, n = data.length;
      while (++i < n) {
        (points[i] = [ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]).data = d;
      }
      return d3.geom.delaunay(points).map(function(triangle) {
        return triangle.map(function(point) {
          return point.data;
        });
      });
    };
    return voronoi;
  };
  var d3_geom_voronoiOpposite = {
    l: "r",
    r: "l"
  };
  function d3_geom_voronoiTessellate(points, callback) {
    var Sites = {
      list: points.map(function(v, i) {
        return {
          index: i,
          x: v[0],
          y: v[1]
        };
      }).sort(function(a, b) {
        return a.y < b.y ? -1 : a.y > b.y ? 1 : a.x < b.x ? -1 : a.x > b.x ? 1 : 0;
      }),
      bottomSite: null
    };
    var EdgeList = {
      list: [],
      leftEnd: null,
      rightEnd: null,
      init: function() {
        EdgeList.leftEnd = EdgeList.createHalfEdge(null, "l");
        EdgeList.rightEnd = EdgeList.createHalfEdge(null, "l");
        EdgeList.leftEnd.r = EdgeList.rightEnd;
        EdgeList.rightEnd.l = EdgeList.leftEnd;
        EdgeList.list.unshift(EdgeList.leftEnd, EdgeList.rightEnd);
      },
      createHalfEdge: function(edge, side) {
        return {
          edge: edge,
          side: side,
          vertex: null,
          l: null,
          r: null
        };
      },
      insert: function(lb, he) {
        he.l = lb;
        he.r = lb.r;
        lb.r.l = he;
        lb.r = he;
      },
      leftBound: function(p) {
        var he = EdgeList.leftEnd;
        do {
          he = he.r;
        } while (he != EdgeList.rightEnd && Geom.rightOf(he, p));
        he = he.l;
        return he;
      },
      del: function(he) {
        he.l.r = he.r;
        he.r.l = he.l;
        he.edge = null;
      },
      right: function(he) {
        return he.r;
      },
      left: function(he) {
        return he.l;
      },
      leftRegion: function(he) {
        return he.edge == null ? Sites.bottomSite : he.edge.region[he.side];
      },
      rightRegion: function(he) {
        return he.edge == null ? Sites.bottomSite : he.edge.region[d3_geom_voronoiOpposite[he.side]];
      }
    };
    var Geom = {
      bisect: function(s1, s2) {
        var newEdge = {
          region: {
            l: s1,
            r: s2
          },
          ep: {
            l: null,
            r: null
          }
        };
        var dx = s2.x - s1.x, dy = s2.y - s1.y, adx = dx > 0 ? dx : -dx, ady = dy > 0 ? dy : -dy;
        newEdge.c = s1.x * dx + s1.y * dy + (dx * dx + dy * dy) * .5;
        if (adx > ady) {
          newEdge.a = 1;
          newEdge.b = dy / dx;
          newEdge.c /= dx;
        } else {
          newEdge.b = 1;
          newEdge.a = dx / dy;
          newEdge.c /= dy;
        }
        return newEdge;
      },
      intersect: function(el1, el2) {
        var e1 = el1.edge, e2 = el2.edge;
        if (!e1 || !e2 || e1.region.r == e2.region.r) {
          return null;
        }
        var d = e1.a * e2.b - e1.b * e2.a;
        if (Math.abs(d) < 1e-10) {
          return null;
        }
        var xint = (e1.c * e2.b - e2.c * e1.b) / d, yint = (e2.c * e1.a - e1.c * e2.a) / d, e1r = e1.region.r, e2r = e2.region.r, el, e;
        if (e1r.y < e2r.y || e1r.y == e2r.y && e1r.x < e2r.x) {
          el = el1;
          e = e1;
        } else {
          el = el2;
          e = e2;
        }
        var rightOfSite = xint >= e.region.r.x;
        if (rightOfSite && el.side === "l" || !rightOfSite && el.side === "r") {
          return null;
        }
        return {
          x: xint,
          y: yint
        };
      },
      rightOf: function(he, p) {
        var e = he.edge, topsite = e.region.r, rightOfSite = p.x > topsite.x;
        if (rightOfSite && he.side === "l") {
          return 1;
        }
        if (!rightOfSite && he.side === "r") {
          return 0;
        }
        if (e.a === 1) {
          var dyp = p.y - topsite.y, dxp = p.x - topsite.x, fast = 0, above = 0;
          if (!rightOfSite && e.b < 0 || rightOfSite && e.b >= 0) {
            above = fast = dyp >= e.b * dxp;
          } else {
            above = p.x + p.y * e.b > e.c;
            if (e.b < 0) {
              above = !above;
            }
            if (!above) {
              fast = 1;
            }
          }
          if (!fast) {
            var dxs = topsite.x - e.region.l.x;
            above = e.b * (dxp * dxp - dyp * dyp) < dxs * dyp * (1 + 2 * dxp / dxs + e.b * e.b);
            if (e.b < 0) {
              above = !above;
            }
          }
        } else {
          var yl = e.c - e.a * p.x, t1 = p.y - yl, t2 = p.x - topsite.x, t3 = yl - topsite.y;
          above = t1 * t1 > t2 * t2 + t3 * t3;
        }
        return he.side === "l" ? above : !above;
      },
      endPoint: function(edge, side, site) {
        edge.ep[side] = site;
        if (!edge.ep[d3_geom_voronoiOpposite[side]]) return;
        callback(edge);
      },
      distance: function(s, t) {
        var dx = s.x - t.x, dy = s.y - t.y;
        return Math.sqrt(dx * dx + dy * dy);
      }
    };
    var EventQueue = {
      list: [],
      insert: function(he, site, offset) {
        he.vertex = site;
        he.ystar = site.y + offset;
        for (var i = 0, list = EventQueue.list, l = list.length; i < l; i++) {
          var next = list[i];
          if (he.ystar > next.ystar || he.ystar == next.ystar && site.x > next.vertex.x) {
            continue;
          } else {
            break;
          }
        }
        list.splice(i, 0, he);
      },
      del: function(he) {
        for (var i = 0, ls = EventQueue.list, l = ls.length; i < l && ls[i] != he; ++i) {}
        ls.splice(i, 1);
      },
      empty: function() {
        return EventQueue.list.length === 0;
      },
      nextEvent: function(he) {
        for (var i = 0, ls = EventQueue.list, l = ls.length; i < l; ++i) {
          if (ls[i] == he) return ls[i + 1];
        }
        return null;
      },
      min: function() {
        var elem = EventQueue.list[0];
        return {
          x: elem.vertex.x,
          y: elem.ystar
        };
      },
      extractMin: function() {
        return EventQueue.list.shift();
      }
    };
    EdgeList.init();
    Sites.bottomSite = Sites.list.shift();
    var newSite = Sites.list.shift(), newIntStar;
    var lbnd, rbnd, llbnd, rrbnd, bisector;
    var bot, top, temp, p, v;
    var e, pm;
    while (true) {
      if (!EventQueue.empty()) {
        newIntStar = EventQueue.min();
      }
      if (newSite && (EventQueue.empty() || newSite.y < newIntStar.y || newSite.y == newIntStar.y && newSite.x < newIntStar.x)) {
        lbnd = EdgeList.leftBound(newSite);
        rbnd = EdgeList.right(lbnd);
        bot = EdgeList.rightRegion(lbnd);
        e = Geom.bisect(bot, newSite);
        bisector = EdgeList.createHalfEdge(e, "l");
        EdgeList.insert(lbnd, bisector);
        p = Geom.intersect(lbnd, bisector);
        if (p) {
          EventQueue.del(lbnd);
          EventQueue.insert(lbnd, p, Geom.distance(p, newSite));
        }
        lbnd = bisector;
        bisector = EdgeList.createHalfEdge(e, "r");
        EdgeList.insert(lbnd, bisector);
        p = Geom.intersect(bisector, rbnd);
        if (p) {
          EventQueue.insert(bisector, p, Geom.distance(p, newSite));
        }
        newSite = Sites.list.shift();
      } else if (!EventQueue.empty()) {
        lbnd = EventQueue.extractMin();
        llbnd = EdgeList.left(lbnd);
        rbnd = EdgeList.right(lbnd);
        rrbnd = EdgeList.right(rbnd);
        bot = EdgeList.leftRegion(lbnd);
        top = EdgeList.rightRegion(rbnd);
        v = lbnd.vertex;
        Geom.endPoint(lbnd.edge, lbnd.side, v);
        Geom.endPoint(rbnd.edge, rbnd.side, v);
        EdgeList.del(lbnd);
        EventQueue.del(rbnd);
        EdgeList.del(rbnd);
        pm = "l";
        if (bot.y > top.y) {
          temp = bot;
          bot = top;
          top = temp;
          pm = "r";
        }
        e = Geom.bisect(bot, top);
        bisector = EdgeList.createHalfEdge(e, pm);
        EdgeList.insert(llbnd, bisector);
        Geom.endPoint(e, d3_geom_voronoiOpposite[pm], v);
        p = Geom.intersect(llbnd, bisector);
        if (p) {
          EventQueue.del(llbnd);
          EventQueue.insert(llbnd, p, Geom.distance(p, bot));
        }
        p = Geom.intersect(bisector, rrbnd);
        if (p) {
          EventQueue.insert(bisector, p, Geom.distance(p, bot));
        }
      } else {
        break;
      }
    }
    for (lbnd = EdgeList.right(EdgeList.leftEnd); lbnd != EdgeList.rightEnd; lbnd = EdgeList.right(lbnd)) {
      callback(lbnd.edge);
    }
  }
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_svg_lineX, y = d3_svg_lineY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (Math.abs(nx - x) + Math.abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = sx; else x2 = sx;
        if (bottom) y1 = sy; else y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0],
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    b -= a = +a;
    return function(t) {
      return a + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var m, i, j, s0 = 0, s1 = 0, s = [], q = [], n, o;
    a = a + "", b = b + "";
    d3_interpolate_number.lastIndex = 0;
    for (i = 0; m = d3_interpolate_number.exec(b); ++i) {
      if (m.index) s.push(b.substring(s0, s1 = m.index));
      q.push({
        i: s.length,
        x: m[0]
      });
      s.push(null);
      s0 = d3_interpolate_number.lastIndex;
    }
    if (s0 < b.length) s.push(b.substring(s0));
    for (i = 0, n = q.length; (m = d3_interpolate_number.exec(a)) && i < n; ++i) {
      o = q[i];
      if (o.x == m[0]) {
        if (o.i) {
          if (s[o.i + 1] == null) {
            s[o.i - 1] += o.x;
            s.splice(o.i, 1);
            for (j = i + 1; j < n; ++j) q[j].i--;
          } else {
            s[o.i - 1] += o.x + s[o.i + 1];
            s.splice(o.i, 2);
            for (j = i + 1; j < n; ++j) q[j].i -= 2;
          }
        } else {
          if (s[o.i + 1] == null) {
            s[o.i] = o.x;
          } else {
            s[o.i] = o.x + s[o.i + 1];
            s.splice(o.i + 1, 1);
            for (j = i + 1; j < n; ++j) q[j].i--;
          }
        }
        q.splice(i, 1);
        n--;
        i--;
      } else {
        o.x = d3_interpolateNumber(parseFloat(m[0]), parseFloat(o.x));
      }
    }
    while (i < n) {
      o = q.pop();
      if (s[o.i + 1] == null) {
        s[o.i] = o.x;
      } else {
        s[o.i] = o.x + s[o.i + 1];
        s.splice(o.i + 1, 1);
      }
      n--;
    }
    if (s.length === 1) {
      return s[0] == null ? (o = q[0].x, function(t) {
        return o(t) + "";
      }) : function() {
        return b;
      };
    }
    return function(t) {
      for (i = 0; i < n; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  var d3_interpolate_number = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_Color ? d3_interpolateRgb : t === "object" ? Array.isArray(b) ? d3_interpolateArray : d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, Array.prototype.slice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * π / 2);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / (2 * π) * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, 10 * -t) * Math.sin((t - s) * 2 * π / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return (x - a) * b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) * b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (2 * π - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, gravity = .1, theta = .8, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dn = 1 / Math.sqrt(dx * dx + dy * dy);
          if ((x2 - x1) * dn < theta) {
            var k = quad.charge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
            return true;
          }
          if (quad.point && isFinite(dn)) {
            var k = quad.pointCharge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return theta;
      theta = +x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x; else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, j, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        var neighbors = neighbor(i), j = -1, m = neighbors.length, x;
        while (++j < m) if (!isNaN(x = neighbors[j][dimension])) return x;
        return Math.random() * size;
      }
      function neighbor() {
        if (!neighbors) {
          neighbors = [];
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        return neighbors[i];
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function recurse(node, depth, nodes) {
      var childs = children.call(hierarchy, node, depth);
      node.depth = depth;
      nodes.push(node);
      if (childs && (n = childs.length)) {
        var i = -1, n, c = node.children = [], v = 0, j = depth + 1, d;
        while (++i < n) {
          d = recurse(childs[i], j, nodes);
          d.parent = node;
          c.push(d);
          v += d.value;
        }
        if (sort) c.sort(sort);
        if (value) node.value = v;
      } else if (value) {
        node.value = +value.call(hierarchy, node, depth) || 0;
      }
      return node;
    }
    function revalue(node, depth) {
      var children = node.children, v = 0;
      if (children && (n = children.length)) {
        var i = -1, n, j = depth + 1;
        while (++i < n) v += revalue(children[i], j);
      } else if (value) {
        v = +value.call(hierarchy, node, depth) || 0;
      }
      if (value) node.value = v;
      return v;
    }
    function hierarchy(d) {
      var nodes = [];
      recurse(d, 0, nodes);
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      revalue(root, 0);
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = 2 * π;
    function pie(data) {
      var values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      });
      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      var arcs = [];
      index.forEach(function(i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return pie;
    };
    pie.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function(x) {
      if (!arguments.length) return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function(x) {
      if (!arguments.length) return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var n = series.length, m = series[0].length, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0];
      function firstWalk(node, previousSibling) {
        var children = node.children, layout = node._tree;
        if (children && (n = children.length)) {
          var n, firstChild = children[0], previousChild, ancestor = firstChild, child, i = -1;
          while (++i < n) {
            child = children[i];
            firstWalk(child, previousChild);
            ancestor = apportion(child, previousChild, ancestor);
            previousChild = child;
          }
          d3_layout_treeShift(node);
          var midpoint = .5 * (firstChild._tree.prelim + child._tree.prelim);
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
            layout.mod = layout.prelim - midpoint;
          } else {
            layout.prelim = midpoint;
          }
        } else {
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
          }
        }
      }
      function secondWalk(node, x) {
        node.x = node._tree.prelim + x;
        var children = node.children;
        if (children && (n = children.length)) {
          var i = -1, n;
          x += node._tree.mod;
          while (++i < n) {
            secondWalk(children[i], x);
          }
        }
      }
      function apportion(node, previousSibling, ancestor) {
        if (previousSibling) {
          var vip = node, vop = node, vim = previousSibling, vom = node.parent.children[0], sip = vip._tree.mod, sop = vop._tree.mod, sim = vim._tree.mod, som = vom._tree.mod, shift;
          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
            vom = d3_layout_treeLeft(vom);
            vop = d3_layout_treeRight(vop);
            vop._tree.ancestor = node;
            shift = vim._tree.prelim + sim - vip._tree.prelim - sip + separation(vim, vip);
            if (shift > 0) {
              d3_layout_treeMove(d3_layout_treeAncestor(vim, node, ancestor), node, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim._tree.mod;
            sip += vip._tree.mod;
            som += vom._tree.mod;
            sop += vop._tree.mod;
          }
          if (vim && !d3_layout_treeRight(vop)) {
            vop._tree.thread = vim;
            vop._tree.mod += sim - sop;
          }
          if (vip && !d3_layout_treeLeft(vom)) {
            vom._tree.thread = vip;
            vom._tree.mod += sip - som;
            ancestor = node;
          }
        }
        return ancestor;
      }
      d3_layout_treeVisitAfter(root, function(node, previousSibling) {
        node._tree = {
          ancestor: node,
          prelim: 0,
          mod: 0,
          change: 0,
          shift: 0,
          number: previousSibling ? previousSibling._tree.number + 1 : 0
        };
      });
      firstWalk(root);
      secondWalk(root, -root._tree.prelim);
      var left = d3_layout_treeSearch(root, d3_layout_treeLeftmost), right = d3_layout_treeSearch(root, d3_layout_treeRightmost), deep = d3_layout_treeSearch(root, d3_layout_treeDeepest), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2, y1 = deep.depth || 1;
      d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
        node.x *= size[0];
        node.y = node.depth * size[1];
        delete node._tree;
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = node.depth / y1 * size[1];
        delete node._tree;
      });
      return nodes;
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(node) {
    var children = node.children;
    return children && children.length ? children[0] : node._tree.thread;
  }
  function d3_layout_treeRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? children[n - 1] : node._tree.thread;
  }
  function d3_layout_treeSearch(node, compare) {
    var children = node.children;
    if (children && (n = children.length)) {
      var child, n, i = -1;
      while (++i < n) {
        if (compare(child = d3_layout_treeSearch(children[i], compare), node) > 0) {
          node = child;
        }
      }
    }
    return node;
  }
  function d3_layout_treeRightmost(a, b) {
    return a.x - b.x;
  }
  function d3_layout_treeLeftmost(a, b) {
    return b.x - a.x;
  }
  function d3_layout_treeDeepest(a, b) {
    return a.depth - b.depth;
  }
  function d3_layout_treeVisitAfter(node, callback) {
    function visit(node, previousSibling) {
      var children = node.children;
      if (children && (n = children.length)) {
        var child, previousChild = null, i = -1, n;
        while (++i < n) {
          child = children[i];
          visit(child, previousChild);
          previousChild = child;
        }
      }
      callback(node, previousSibling);
    }
    visit(node, null);
  }
  function d3_layout_treeShift(node) {
    var shift = 0, change = 0, children = node.children, i = children.length, child;
    while (--i >= 0) {
      child = children[i]._tree;
      child.prelim += shift;
      child.mod += shift;
      shift += child.shift + (change += child.change);
    }
  }
  function d3_layout_treeMove(ancestor, node, shift) {
    ancestor = ancestor._tree;
    node = node._tree;
    var change = shift / (node.number - ancestor.number);
    ancestor.change += change;
    node.change -= change;
    node.shift += shift;
    node.prelim += shift;
    node.mod += shift;
  }
  function d3_layout_treeAncestor(vim, node, ancestor) {
    return vim._tree.ancestor.parent == node.parent ? vim._tree.ancestor : ancestor;
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_treeVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_treeVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
        d3_layout_treeVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_treeVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ],
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s / m;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(m ? d3_scale_linearTickRange(domain, m)[2] : d3_scale_linearNiceStep(domain)));
  }
  function d3_scale_linearNiceStep(domain) {
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0];
    return Math.pow(10, Math.round(Math.log(span) / Math.LN10) - 1);
  }
  function d3_scale_linearTickRange(domain, m) {
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var precision = -Math.floor(Math.log(d3_scale_linearTickRange(domain, m)[2]) / Math.LN10 + .01);
    return d3.format(format ? format.replace(d3_format_re, function(a, b, c, d, e, f, g, h, i, j) {
      return [ b, c, d, e, f, g, h, i || "." + (precision - (j === "%") * 2), j ].join("");
    }) : ",." + precision + "f");
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [];
      if (extent.every(isFinite)) {
        var u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12,
      Math.floor), e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || index.set(x, domain.push(x))) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.filter(function(d) {
        return !isNaN(d);
      }).sort(d3.ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0,
      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -π / 2, d3_svg_arcMax = 2 * π - 1e-6;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_svg_lineX, x1 = d3_svg_lineX, y0 = 0, y1 = d3_svg_lineY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id;
    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node.__transition__[id].tween.remove(name);
    } : function(node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    return this.each("end.transition", function() {
      var p;
      if (!this.__transition__ && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].delay = value.call(node, node.__data__, i, j) | 0;
    } : (value |= 0, function(node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j) | 0);
    } : (value = Math.max(1, value | 0), function(node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function(node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function(node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
      active: 0,
      count: 0
    }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function(elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, tweened = [];
        if (delay <= elapsed) return start(elapsed);
        d3_timer_replace(start, delay, time);
        function start(elapsed) {
          if (lock.active > id) return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          if (tick(elapsed)) return 1;
          d3_timer_replace(tick, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id) return stop();
          var t = (elapsed - delay) / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            stop();
            transition.event && transition.event.end.call(node, d, i);
            return 1;
          }
        }
        function stop() {
          if (--lock.count) delete lock[id]; else delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, tickMajorSize = 6, tickMinorSize = 6, tickEndSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_, tickSubdivide = 0;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var ticks = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments_) : scale.domain() : tickValues, tickFormat = tickFormat_ == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments_) : String : tickFormat_;
        var subticks = d3_svg_axisSubdivide(scale, ticks, tickSubdivide), subtick = g.selectAll(".tick.minor").data(subticks, String), subtickEnter = subtick.enter().insert("line", ".tick").attr("class", "tick minor").style("opacity", 1e-6), subtickExit = d3.transition(subtick.exit()).style("opacity", 1e-6).remove(), subtickUpdate = d3.transition(subtick).style("opacity", 1);
        var tick = g.selectAll(".tick.major").data(ticks, String), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick major").style("opacity", 1e-6), tickExit = d3.transition(tick.exit()).style("opacity", 1e-6).remove(), tickUpdate = d3.transition(tick).style("opacity", 1), tickTransform;
        var range = d3_scaleRange(scale), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"),
        d3.transition(path));
        var scale1 = scale.copy(), scale0 = this.__chart__ || scale1;
        this.__chart__ = scale1;
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
        switch (orient) {
         case "bottom":
          {
            tickTransform = d3_svg_axisX;
            subtickEnter.attr("y2", tickMinorSize);
            subtickUpdate.attr("x2", 0).attr("y2", tickMinorSize);
            lineEnter.attr("y2", tickMajorSize);
            textEnter.attr("y", Math.max(tickMajorSize, 0) + tickPadding);
            lineUpdate.attr("x2", 0).attr("y2", tickMajorSize);
            textUpdate.attr("x", 0).attr("y", Math.max(tickMajorSize, 0) + tickPadding);
            text.attr("dy", ".71em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + tickEndSize + "V0H" + range[1] + "V" + tickEndSize);
            break;
          }

         case "top":
          {
            tickTransform = d3_svg_axisX;
            subtickEnter.attr("y2", -tickMinorSize);
            subtickUpdate.attr("x2", 0).attr("y2", -tickMinorSize);
            lineEnter.attr("y2", -tickMajorSize);
            textEnter.attr("y", -(Math.max(tickMajorSize, 0) + tickPadding));
            lineUpdate.attr("x2", 0).attr("y2", -tickMajorSize);
            textUpdate.attr("x", 0).attr("y", -(Math.max(tickMajorSize, 0) + tickPadding));
            text.attr("dy", "0em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + -tickEndSize + "V0H" + range[1] + "V" + -tickEndSize);
            break;
          }

         case "left":
          {
            tickTransform = d3_svg_axisY;
            subtickEnter.attr("x2", -tickMinorSize);
            subtickUpdate.attr("x2", -tickMinorSize).attr("y2", 0);
            lineEnter.attr("x2", -tickMajorSize);
            textEnter.attr("x", -(Math.max(tickMajorSize, 0) + tickPadding));
            lineUpdate.attr("x2", -tickMajorSize).attr("y2", 0);
            textUpdate.attr("x", -(Math.max(tickMajorSize, 0) + tickPadding)).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "end");
            pathUpdate.attr("d", "M" + -tickEndSize + "," + range[0] + "H0V" + range[1] + "H" + -tickEndSize);
            break;
          }

         case "right":
          {
            tickTransform = d3_svg_axisY;
            subtickEnter.attr("x2", tickMinorSize);
            subtickUpdate.attr("x2", tickMinorSize).attr("y2", 0);
            lineEnter.attr("x2", tickMajorSize);
            textEnter.attr("x", Math.max(tickMajorSize, 0) + tickPadding);
            lineUpdate.attr("x2", tickMajorSize).attr("y2", 0);
            textUpdate.attr("x", Math.max(tickMajorSize, 0) + tickPadding).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "start");
            pathUpdate.attr("d", "M" + tickEndSize + "," + range[0] + "H0V" + range[1] + "H" + tickEndSize);
            break;
          }
        }
        if (scale.rangeBand) {
          var dx = scale1.rangeBand() / 2, x = function(d) {
            return scale1(d) + dx;
          };
          tickEnter.call(tickTransform, x);
          tickUpdate.call(tickTransform, x);
        } else {
          tickEnter.call(tickTransform, scale0);
          tickUpdate.call(tickTransform, scale1);
          tickExit.call(tickTransform, scale1);
          subtickEnter.call(tickTransform, scale0);
          subtickUpdate.call(tickTransform, scale1);
          subtickExit.call(tickTransform, scale1);
        }
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x, y) {
      if (!arguments.length) return tickMajorSize;
      var n = arguments.length - 1;
      tickMajorSize = +x;
      tickMinorSize = n > 1 ? +y : tickMajorSize;
      tickEndSize = n > 0 ? +arguments[n] : tickMajorSize;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function(x) {
      if (!arguments.length) return tickSubdivide;
      tickSubdivide = +x;
      return axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x) {
    selection.attr("transform", function(d) {
      return "translate(" + x(d) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y) {
    selection.attr("transform", function(d) {
      return "translate(0," + y(d) + ")";
    });
  }
  function d3_svg_axisSubdivide(scale, ticks, m) {
    subticks = [];
    if (m && ticks.length > 1) {
      var extent = d3_scaleExtent(scale.domain()), subticks, i = -1, n = ticks.length, d = (ticks[1] - ticks[0]) / ++m, j, v;
      while (++i < n) {
        for (j = m; --j > 0; ) {
          if ((v = +ticks[i] - j * d) >= extent[0]) {
            subticks.push(v);
          }
        }
      }
      for (--i, j = 0; ++j < m && (v = +ticks[i] + j * d) < extent[1]; ) {
        subticks.push(v);
      }
    }
    return subticks;
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, resizes = d3_svg_brushResizes[0], extent = [ [ 0, 0 ], [ 0, 0 ] ], clamp = [ true, true ], extentDomain;
    function brush(g) {
      g.each(function() {
        var g = d3.select(this), bg = g.selectAll(".background").data([ 0 ]), fg = g.selectAll(".extent").data([ 0 ]), tz = g.selectAll(".resize").data(resizes, String), e;
        g.style("pointer-events", "all").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        bg.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        fg.enter().append("rect").attr("class", "extent").style("cursor", "move");
        tz.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        tz.style("display", brush.empty() ? "none" : null);
        tz.exit().remove();
        if (x) {
          e = d3_scaleRange(x);
          bg.attr("x", e[0]).attr("width", e[1] - e[0]);
          redrawX(g);
        }
        if (y) {
          e = d3_scaleRange(y);
          bg.attr("y", e[0]).attr("height", e[1] - e[0]);
          redrawY(g);
        }
        redraw(g);
      });
    }
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + extent[+/e$/.test(d)][0] + "," + extent[+/^s/.test(d)][1] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", extent[0][0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", extent[1][0] - extent[0][0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", extent[0][1]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", extent[1][1] - extent[0][1]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = mouse(), offset;
      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      if (dragging) {
        origin[0] = extent[0][0] - origin[0];
        origin[1] = extent[0][1] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ extent[1 - ex][0] - origin[0], extent[1 - ey][1] - origin[1] ];
        origin[0] = extent[ex][0];
        origin[1] = extent[ey][1];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function mouse() {
        var touches = d3.event.changedTouches;
        return touches ? d3.touches(target, touches)[0] : d3.mouse(target);
      }
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= extent[1][0];
            origin[1] -= extent[1][1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += extent[1][0];
          origin[1] += extent[1][1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = mouse(), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (extent[0][0] + extent[1][0]) / 2, (extent[0][1] + extent[1][1]) / 2 ];
            origin[0] = extent[+(point[0] < center[0])][0];
            origin[1] = extent[+(point[1] < center[1])][1];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], size = extent[1][i] - extent[0][i], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = clamp[i] ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0][i] !== min || extent[1][i] !== max) {
          extentDomain = null;
          extent[0][i] = min;
          extent[1][i] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? clamp : x || y ? clamp[+!x] : null;
      if (x && y) clamp = [ !!z[0], !!z[1] ]; else if (x || y) clamp[+!x] = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        z = extentDomain || extent;
        if (x) {
          x0 = z[0][0], x1 = z[1][0];
          if (!extentDomain) {
            x0 = extent[0][0], x1 = extent[1][0];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          y0 = z[0][1], y1 = z[1][1];
          if (!extentDomain) {
            y0 = extent[0][1], y1 = extent[1][1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      extentDomain = [ [ 0, 0 ], [ 0, 0 ] ];
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        extentDomain[0][0] = x0, extentDomain[1][0] = x1;
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        extent[0][0] = x0 | 0, extent[1][0] = x1 | 0;
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        extentDomain[0][1] = y0, extentDomain[1][1] = y1;
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        extent[0][1] = y0 | 0, extent[1][1] = y1 | 0;
      }
      return brush;
    };
    brush.clear = function() {
      extentDomain = null;
      extent[0][0] = extent[0][1] = extent[1][0] = extent[1][1] = 0;
      return brush;
    };
    brush.empty = function() {
      return x && extent[0][0] === extent[1][0] || y && extent[0][1] === extent[1][1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  d3.time = {};
  var d3_time = Date, d3_time_daySymbols = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
  function d3_time_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_time_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  var d3_time_formatDateTime = "%a %b %e %X %Y", d3_time_formatDate = "%m/%d/%Y", d3_time_formatTime = "%H:%M:%S";
  var d3_time_days = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], d3_time_dayAbbreviations = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], d3_time_months = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ], d3_time_monthAbbreviations = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_time(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_time(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_time = d3_time_utc;
        var utc = new d3_time_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_time = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_time = d3_time_utc;
        var utc = new d3_time_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_time = Date;
      }
    };
  }
  d3.time.year = d3_time_interval(function(date) {
    date = d3.time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3.time.years = d3.time.year.range;
  d3.time.years.utc = d3.time.year.utc.range;
  d3.time.day = d3_time_interval(function(date) {
    var day = new d3_time(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3.time.days = d3.time.day.range;
  d3.time.days.utc = d3.time.day.utc.range;
  d3.time.dayOfYear = function(date) {
    var year = d3.time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  d3_time_daySymbols.forEach(function(day, i) {
    day = day.toLowerCase();
    i = 7 - i;
    var interval = d3.time[day] = d3_time_interval(function(date) {
      (date = d3.time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3.time.year(date).getDay();
      return Math.floor((d3.time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3.time[day + "s"] = interval.range;
    d3.time[day + "s"].utc = interval.utc.range;
    d3.time[day + "OfYear"] = function(date) {
      var day = d3.time.year(date).getDay();
      return Math.floor((d3.time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3.time.week = d3.time.sunday;
  d3.time.weeks = d3.time.sunday.range;
  d3.time.weeks.utc = d3.time.sunday.utc.range;
  d3.time.weekOfYear = d3.time.sundayOfYear;
  d3.time.format = function(template) {
    var n = template.length;
    function format(date) {
      var string = [], i = -1, j = 0, c, p, f;
      while (++i < n) {
        if (template.charCodeAt(i) === 37) {
          string.push(template.substring(j, i));
          if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
          if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(template.substring(j, i));
      return string.join("");
    }
    format.parse = function(string) {
      var d = {
        y: 1900,
        m: 0,
        d: 1,
        H: 0,
        M: 0,
        S: 0,
        L: 0
      }, i = d3_time_parse(d, template, string, 0);
      if (i != string.length) return null;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      var date = new d3_time();
      if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
        date.setFullYear(d.y, 0, 1);
        date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
      } else date.setFullYear(d.y, d.m, d.d);
      date.setHours(d.H, d.M, d.S, d.L);
      return date;
    };
    format.toString = function() {
      return template;
    };
    return format;
  };
  function d3_time_parse(date, template, string, j) {
    var c, p, i = 0, n = template.length, m = string.length;
    while (i < n) {
      if (j >= m) return -1;
      c = template.charCodeAt(i++);
      if (c === 37) {
        p = d3_time_parsers[template.charAt(i++)];
        if (!p || (j = p(date, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  var d3_time_dayRe = d3_time_formatRe(d3_time_days), d3_time_dayLookup = d3_time_formatLookup(d3_time_days), d3_time_dayAbbrevRe = d3_time_formatRe(d3_time_dayAbbreviations), d3_time_dayAbbrevLookup = d3_time_formatLookup(d3_time_dayAbbreviations), d3_time_monthRe = d3_time_formatRe(d3_time_months), d3_time_monthLookup = d3_time_formatLookup(d3_time_months), d3_time_monthAbbrevRe = d3_time_formatRe(d3_time_monthAbbreviations), d3_time_monthAbbrevLookup = d3_time_formatLookup(d3_time_monthAbbreviations), d3_time_percentRe = /^%/;
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  };
  var d3_time_formats = {
    a: function(d) {
      return d3_time_dayAbbreviations[d.getDay()];
    },
    A: function(d) {
      return d3_time_days[d.getDay()];
    },
    b: function(d) {
      return d3_time_monthAbbreviations[d.getMonth()];
    },
    B: function(d) {
      return d3_time_months[d.getMonth()];
    },
    c: d3.time.format(d3_time_formatDateTime),
    d: function(d, p) {
      return d3_time_formatPad(d.getDate(), p, 2);
    },
    e: function(d, p) {
      return d3_time_formatPad(d.getDate(), p, 2);
    },
    H: function(d, p) {
      return d3_time_formatPad(d.getHours(), p, 2);
    },
    I: function(d, p) {
      return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
    },
    j: function(d, p) {
      return d3_time_formatPad(1 + d3.time.dayOfYear(d), p, 3);
    },
    L: function(d, p) {
      return d3_time_formatPad(d.getMilliseconds(), p, 3);
    },
    m: function(d, p) {
      return d3_time_formatPad(d.getMonth() + 1, p, 2);
    },
    M: function(d, p) {
      return d3_time_formatPad(d.getMinutes(), p, 2);
    },
    p: function(d) {
      return d.getHours() >= 12 ? "PM" : "AM";
    },
    S: function(d, p) {
      return d3_time_formatPad(d.getSeconds(), p, 2);
    },
    U: function(d, p) {
      return d3_time_formatPad(d3.time.sundayOfYear(d), p, 2);
    },
    w: function(d) {
      return d.getDay();
    },
    W: function(d, p) {
      return d3_time_formatPad(d3.time.mondayOfYear(d), p, 2);
    },
    x: d3.time.format(d3_time_formatDate),
    X: d3.time.format(d3_time_formatTime),
    y: function(d, p) {
      return d3_time_formatPad(d.getFullYear() % 100, p, 2);
    },
    Y: function(d, p) {
      return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
    },
    Z: d3_time_zone,
    "%": function() {
      return "%";
    }
  };
  var d3_time_parsers = {
    a: d3_time_parseWeekdayAbbrev,
    A: d3_time_parseWeekday,
    b: d3_time_parseMonthAbbrev,
    B: d3_time_parseMonth,
    c: d3_time_parseLocaleFull,
    d: d3_time_parseDay,
    e: d3_time_parseDay,
    H: d3_time_parseHour24,
    I: d3_time_parseHour24,
    j: d3_time_parseDayOfYear,
    L: d3_time_parseMilliseconds,
    m: d3_time_parseMonthNumber,
    M: d3_time_parseMinutes,
    p: d3_time_parseAmPm,
    S: d3_time_parseSeconds,
    U: d3_time_parseWeekNumberSunday,
    w: d3_time_parseWeekdayNumber,
    W: d3_time_parseWeekNumberMonday,
    x: d3_time_parseLocaleDate,
    X: d3_time_parseLocaleTime,
    y: d3_time_parseYear,
    Y: d3_time_parseFullYear,
    "%": d3_time_parseLiteralPercent
  };
  function d3_time_parseWeekdayAbbrev(date, string, i) {
    d3_time_dayAbbrevRe.lastIndex = 0;
    var n = d3_time_dayAbbrevRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekday(date, string, i) {
    d3_time_dayRe.lastIndex = 0;
    var n = d3_time_dayRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMonthAbbrev(date, string, i) {
    d3_time_monthAbbrevRe.lastIndex = 0;
    var n = d3_time_monthAbbrevRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseMonth(date, string, i) {
    d3_time_monthRe.lastIndex = 0;
    var n = d3_time_monthRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseLocaleFull(date, string, i) {
    return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
  }
  function d3_time_parseLocaleDate(date, string, i) {
    return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
  }
  function d3_time_parseLocaleTime(date, string, i) {
    return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  var d3_time_numberRe = /^\s*\d+/;
  function d3_time_parseAmPm(date, string, i) {
    var n = d3_time_amPmLookup.get(string.substring(i, i += 2).toLowerCase());
    return n == null ? -1 : (date.p = n, i);
  }
  var d3_time_amPmLookup = d3.map({
    am: 0,
    pm: 1
  });
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = ~~(Math.abs(z) / 60), zm = Math.abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.substring(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  d3.time.format.utc = function(template) {
    var local = d3.time.format(template);
    function format(date) {
      try {
        d3_time = d3_time_utc;
        var utc = new d3_time();
        utc._ = date;
        return local(utc);
      } finally {
        d3_time = Date;
      }
    }
    format.parse = function(string) {
      try {
        d3_time = d3_time_utc;
        var date = local.parse(string);
        return date && date._;
      } finally {
        d3_time = Date;
      }
    };
    format.toString = local.toString;
    return format;
  };
  var d3_time_formatIso = d3.time.format.utc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3.time.format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3.time.second = d3_time_interval(function(date) {
    return new d3_time(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3.time.seconds = d3.time.second.range;
  d3.time.seconds.utc = d3.time.second.utc.range;
  d3.time.minute = d3_time_interval(function(date) {
    return new d3_time(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3.time.minutes = d3.time.minute.range;
  d3.time.minutes.utc = d3.time.minute.utc.range;
  d3.time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_time((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3.time.hours = d3.time.hour.range;
  d3.time.hours.utc = d3.time.hour.utc.range;
  d3.time.month = d3_time_interval(function(date) {
    date = d3.time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3.time.months = d3.time.month.range;
  d3.time.months.utc = d3.time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_nice(scale.domain(), m));
    };
    scale.ticks = function(m, k) {
      var extent = d3_scaleExtent(scale.domain());
      if (typeof m !== "function") {
        var span = extent[1] - extent[0], target = span / m, i = d3.bisect(d3_time_scaleSteps, target);
        if (i == d3_time_scaleSteps.length) return methods.year(extent, m);
        if (!i) return linear.ticks(m).map(d3_time_scaleDate);
        if (target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target) --i;
        m = methods[i];
        k = m[1];
        m = m[0].range;
      }
      return m(extent[0], new Date(+extent[1] + 1), k);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  function d3_time_scaleFormat(formats) {
    return function(date) {
      var i = formats.length - 1, f = formats[i];
      while (!f[1](date)) f = formats[--i];
      return f[0](date);
    };
  }
  function d3_time_scaleSetYear(y) {
    var d = new Date(y, 0, 1);
    d.setFullYear(y);
    return d;
  }
  function d3_time_scaleGetYear(d) {
    var y = d.getFullYear(), d0 = d3_time_scaleSetYear(y), d1 = d3_time_scaleSetYear(y + 1);
    return y + (d - d0) / (d1 - d0);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3.time.second, 1 ], [ d3.time.second, 5 ], [ d3.time.second, 15 ], [ d3.time.second, 30 ], [ d3.time.minute, 1 ], [ d3.time.minute, 5 ], [ d3.time.minute, 15 ], [ d3.time.minute, 30 ], [ d3.time.hour, 1 ], [ d3.time.hour, 3 ], [ d3.time.hour, 6 ], [ d3.time.hour, 12 ], [ d3.time.day, 1 ], [ d3.time.day, 2 ], [ d3.time.week, 1 ], [ d3.time.month, 1 ], [ d3.time.month, 3 ], [ d3.time.year, 1 ] ];
  var d3_time_scaleLocalFormats = [ [ d3.time.format("%Y"), d3_true ], [ d3.time.format("%B"), function(d) {
    return d.getMonth();
  } ], [ d3.time.format("%b %d"), function(d) {
    return d.getDate() != 1;
  } ], [ d3.time.format("%a %d"), function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ d3.time.format("%I %p"), function(d) {
    return d.getHours();
  } ], [ d3.time.format("%I:%M"), function(d) {
    return d.getMinutes();
  } ], [ d3.time.format(":%S"), function(d) {
    return d.getSeconds();
  } ], [ d3.time.format(".%L"), function(d) {
    return d.getMilliseconds();
  } ] ];
  var d3_time_scaleLinear = d3.scale.linear(), d3_time_scaleLocalFormat = d3_time_scaleFormat(d3_time_scaleLocalFormats);
  d3_time_scaleLocalMethods.year = function(extent, m) {
    return d3_time_scaleLinear.domain(extent.map(d3_time_scaleGetYear)).ticks(m).map(d3_time_scaleSetYear);
  };
  d3.time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUTCMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUTCFormats = [ [ d3.time.format.utc("%Y"), d3_true ], [ d3.time.format.utc("%B"), function(d) {
    return d.getUTCMonth();
  } ], [ d3.time.format.utc("%b %d"), function(d) {
    return d.getUTCDate() != 1;
  } ], [ d3.time.format.utc("%a %d"), function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ d3.time.format.utc("%I %p"), function(d) {
    return d.getUTCHours();
  } ], [ d3.time.format.utc("%I:%M"), function(d) {
    return d.getUTCMinutes();
  } ], [ d3.time.format.utc(":%S"), function(d) {
    return d.getUTCSeconds();
  } ], [ d3.time.format.utc(".%L"), function(d) {
    return d.getUTCMilliseconds();
  } ] ];
  var d3_time_scaleUTCFormat = d3_time_scaleFormat(d3_time_scaleUTCFormats);
  function d3_time_scaleUTCSetYear(y) {
    var d = new Date(Date.UTC(y, 0, 1));
    d.setUTCFullYear(y);
    return d;
  }
  function d3_time_scaleUTCGetYear(d) {
    var y = d.getUTCFullYear(), d0 = d3_time_scaleUTCSetYear(y), d1 = d3_time_scaleUTCSetYear(y + 1);
    return y + (d - d0) / (d1 - d0);
  }
  d3_time_scaleUTCMethods.year = function(extent, m) {
    return d3_time_scaleLinear.domain(extent.map(d3_time_scaleUTCGetYear)).ticks(m).map(d3_time_scaleUTCSetYear);
  };
  d3.time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUTCMethods, d3_time_scaleUTCFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  return d3;
}();

})();

(function() {

/**
 * Version: 1.0 Alpha-1
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/.
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&&(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&&!isNaN(date)){return(this>date)?1:(this<date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t>=start.getTime()&&t<=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value<min||value>max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&&x.millisecond!==0){x.millisecond=-1;}
if(!x.second&&x.second!==0){x.second=-1;}
if(!x.minute&&x.minute!==0){x.minute=-1;}
if(!x.hour&&x.hour!==0){x.hour=-1;}
if(!x.day&&x.day!==0){x.day=-1;}
if(!x.month&&x.month!==0){x.month=-1;}
if(!x.year&&x.year!==0){x.year=-1;}
if(x.millisecond!=-1&&Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&&Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&&Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&&Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&&Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&&Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&&Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&&(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n<0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()<13?self.getHours():(self.getHours()-12));case"h":return self.getHours()<13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i<dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j<mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k<px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i<gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j<vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i<ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length>2)?n:(n+(((n+2000)<Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i<x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&&this.hour<13)?this.hour+12:this.hour;if(this.day>Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i<x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&&this.hour){this.hour=(this.hour<13&&this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&&!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&&!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i<kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i<fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};


})();

(function() {

(function() {
  d3.horizon = function() {
    var bands = 1, // between 1 and 5, typically
        mode = "offset", // or mirror
        interpolate = "linear", // or basis, monotone, step-before, etc.
        x = d3_horizonX,
        y = d3_horizonY,
        w = 960,
        h = 40,
        duration = 0;

    var color = d3.scale.linear()
        .domain([-1, 0, 1])
        .range(["#d62728", "#fff", "#1f77b4"]);

    // For each small multiple…
    function horizon(g) {
      g.each(function(d) {
        var g = d3.select(this),
            xMin = Infinity,
            xMax = -Infinity,
            yMax = -Infinity,
            x0, // old x-scale
            y0, // old y-scale
            t0,
            id; // unique id for paths

        // Compute x- and y-values along with extents.
        var data = d.map(function(d, i) {
          var xv = x.call(this, d, i),
              yv = y.call(this, d, i);
          if (xv < xMin) xMin = xv;
          if (xv > xMax) xMax = xv;
          if (-yv > yMax) yMax = -yv;
          if (yv > yMax) yMax = yv;
          return [xv, yv];
        });

        // Compute the new x- and y-scales, and transform.
        var x1 = d3.scale.linear().domain([xMin, xMax]).range([0, w]),
            y1 = d3.scale.linear().domain([0, yMax]).range([0, h * bands]),
            t1 = d3_horizonTransform(bands, h, mode);

        // Retrieve the old scales, if this is an update.
        if (this.__chart__) {
          x0 = this.__chart__.x;
          y0 = this.__chart__.y;
          t0 = this.__chart__.t;
          id = this.__chart__.id;
        } else {
          x0 = x1.copy();
          y0 = y1.copy();
          t0 = t1;
          id = ++d3_horizonId;
        }

        // We'll use a defs to store the area path and the clip path.
        var defs = g.selectAll("defs")
            .data([null]);

        // The clip path is a simple rect.
        defs.enter().append("defs").append("clipPath")
            .attr("id", "d3_horizon_clip" + id)
          .append("rect")
            .attr("width", w)
            .attr("height", h);

        defs.select("rect").transition()
            .duration(duration)
            .attr("width", w)
            .attr("height", h);

        // We'll use a container to clip all horizon layers at once.
        g.selectAll("g")
            .data([null])
          .enter().append("g")
            .attr("clip-path", "url(#d3_horizon_clip" + id + ")");

        // Instantiate each copy of the path with different transforms.
        var path = g.select("g").selectAll("path")
            .data(d3.range(-1, -bands - 1, -1).concat(d3.range(1, bands + 1)), Number);

        var d0 = d3_horizonArea
            .interpolate(interpolate)
            .x(function(d) { return x0(d[0]); })
            .y0(h * bands)
            .y1(function(d) { return h * bands - y0(d[1]); })
            (data);

        var d1 = d3_horizonArea
            .x(function(d) { return x1(d[0]); })
            .y1(function(d) { return h * bands - y1(d[1]); })
            (data);

        path.enter().append("path")
            .style("fill", color)
            .attr("transform", t0)
            .attr("d", d0);

        path.transition()
            .duration(duration)
            .style("fill", color)
            .attr("transform", t1)
            .attr("d", d1);

        path.exit().transition()
            .duration(duration)
            .attr("transform", t1)
            .attr("d", d1)
            .remove();

        // Stash the new scales.
        this.__chart__ = {x: x1, y: y1, t: t1, id: id};
      });
      d3.timer.flush();
    }

    horizon.duration = function(x) {
      if (!arguments.length) return duration;
      duration = +x;
      return horizon;
    };

    horizon.bands = function(x) {
      if (!arguments.length) return bands;
      bands = +x;
      color.domain([-bands, 0, bands]);
      return horizon;
    };

    horizon.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return horizon;
    };

    horizon.colors = function(x) {
      if (!arguments.length) return color.range();
      color.range(x);
      return horizon;
    };

    horizon.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x + "";
      return horizon;
    };

    horizon.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return horizon;
    };

    horizon.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return horizon;
    };

    horizon.width = function(x) {
      if (!arguments.length) return w;
      w = +x;
      return horizon;
    };

    horizon.height = function(x) {
      if (!arguments.length) return h;
      h = +x;
      return horizon;
    };

    return horizon;
  };

  var d3_horizonArea = d3.svg.area(),
      d3_horizonId = 0;

  function d3_horizonX(d) {
    return d[0];
  }

  function d3_horizonY(d) {
    return d[1];
  }

  function d3_horizonTransform(bands, h, mode) {
    return mode == "offset"
        ? function(d) { return "translate(0," + (d + (d < 0) - bands) * h + ")"; }
        : function(d) { return (d < 0 ? "scale(1,-1)" : "") + "translate(0," + (d - bands) * h + ")"; };
  }
})();

})();

(function() {

window.Addepar = Ember.Namespace.create();


})();

(function() {

(function ($) {

  /**
   * Augment jQuery prototype.
   */

  $.fn.antiscroll = function (options) {
    return this.each(function () {
      if ($(this).data('antiscroll')) {
        $(this).data('antiscroll').destroy();
      }

      $(this).data('antiscroll', new $.Antiscroll(this, options));
    });
  };

  /**
   * Expose constructor.
   */

  $.Antiscroll = Antiscroll;

  /**
   * Antiscroll pane constructor.
   *
   * @param {Element|jQuery} main pane
   * @parma {Object} options
   * @api public
   */

  function Antiscroll (el, opts) {
    this.el = $(el);
    this.options = opts || {};

    this.x = (false !== this.options.x) || this.options.forceHorizontal;
    this.y = (false !== this.options.y) || this.options.forceVertical;
    this.autoHide = false !== this.options.autoHide;
    this.padding = undefined == this.options.padding ? 2 : this.options.padding;

    this.inner = this.el.find('.antiscroll-inner');

    // IMPORTANT: This replaces the resizing issue in IE9
    var width = this.inner.parent().width()
    var height = this.inner.parent().height()
    this.inner.css({
        'width':  (this.y ? width + scrollbarSize() : 0)
      , 'height': (this.x ? height + scrollbarSize() : 0)
    });

    this.refresh();
  };

  /**
   * refresh scrollbars
   *
   * @api public
   */

  Antiscroll.prototype.refresh = function() {
    var needHScroll = this.inner.get(0).scrollWidth > this.el.width() + (this.y ? scrollbarSize() : 0),
	    needVScroll = this.inner.get(0).scrollHeight > this.el.height() + (this.x ? scrollbarSize() : 0);

    if (this.x) {
      if (!this.horizontal && needHScroll) {
        this.horizontal = new Scrollbar.Horizontal(this);
      } else if (this.horizontal && !needHScroll)  {
        this.horizontal.destroy();
        this.horizontal = null;
      } else if (this.horizontal) {
        this.horizontal.update();
      }
    }

    if (this.y) {
      if (!this.vertical && needVScroll) {
        this.vertical = new Scrollbar.Vertical(this);
      } else if (this.vertical && !needVScroll)  {
        this.vertical.destroy();
        this.vertical = null;
      } else if (this.vertical) {
        this.vertical.update();
      }
    }
  };

  /**
   * Cleans up.
   *
   * @return {Antiscroll} for chaining
   * @api public
   */

  Antiscroll.prototype.destroy = function () {
    if (this.horizontal) {
      this.horizontal.destroy();
      this.horizontal = null
    }
    if (this.vertical) {
      this.vertical.destroy();
      this.vertical = null
    }
    return this;
  };

  /**
   * Rebuild Antiscroll.
   *
   * @return {Antiscroll} for chaining
   * @api public
   */

  Antiscroll.prototype.rebuild = function () {
    this.destroy();
    this.inner.attr('style', '');
    Antiscroll.call(this, this.el, this.options);
    return this;
  };

  /**
   * Scrollbar constructor.
   *
   * @param {Element|jQuery} element
   * @api public
   */

  function Scrollbar (pane) {
    this.pane = pane;
    this.pane.el.append(this.el);
    this.innerEl = this.pane.inner.get(0);

    this.dragging = false;
    this.enter = false;
    this.shown = false;

    // hovering
    this.pane.el.mouseenter($.proxy(this, 'mouseenter'));
    this.pane.el.mouseleave($.proxy(this, 'mouseleave'));

    // dragging
    this.el.mousedown($.proxy(this, 'mousedown'));

    // scrolling
    this.innerPaneScrollListener = $.proxy(this, 'scroll');
    this.pane.inner.scroll(this.innerPaneScrollListener);

    // wheel -optional-
    this.innerPaneMouseWheelListener = $.proxy(this, 'mousewheel');
    this.pane.inner.bind('mousewheel', this.innerPaneMouseWheelListener);

    // show
    var initialDisplay = this.pane.options.initialDisplay;

    if (initialDisplay !== false) {
      this.show();
      if (this.pane.autoHide) {
          this.hiding = setTimeout($.proxy(this, 'hide'), parseInt(initialDisplay, 10) || 3000);
      }
    }
  };

  /**
   * Cleans up.
   *
   * @return {Scrollbar} for chaining
   * @api public
   */

  Scrollbar.prototype.destroy = function () {
    this.el.remove();
    this.pane.inner.unbind('scroll', this.innerPaneScrollListener);
    this.pane.inner.unbind('mousewheel', this.innerPaneMouseWheelListener);
    return this;
  };

  /**
   * Called upon mouseenter.
   *
   * @api private
   */

  Scrollbar.prototype.mouseenter = function () {
    this.enter = true;
    this.show();
  };

  /**
   * Called upon mouseleave.
   *
   * @api private
   */

  Scrollbar.prototype.mouseleave = function () {
    this.enter = false;

    if (!this.dragging) {
        if (this.pane.autoHide) {
            this.hide();
        }
    }
  };

  /**
   * Called upon wrap scroll.
   *
   * @api private
   */

  Scrollbar.prototype.scroll = function () {
    if (!this.shown) {
      this.show();
      if (!this.enter && !this.dragging) {
        if (this.pane.autoHide) {
            this.hiding = setTimeout($.proxy(this, 'hide'), 1500);
        }
      }
    }

    this.update();
  };

  /**
   * Called upon scrollbar mousedown.
   *
   * @api private
   */

  Scrollbar.prototype.mousedown = function (ev) {
    ev.preventDefault();

    this.dragging = true;

    this.startPageY = ev.pageY - parseInt(this.el.css('top'), 10);
    this.startPageX = ev.pageX - parseInt(this.el.css('left'), 10);

    // prevent crazy selections on IE
    this.el[0].ownerDocument.onselectstart = function () { return false; };

    var pane = this.pane,
	    move = $.proxy(this, 'mousemove'),
		self = this

    $(this.el[0].ownerDocument)
      .mousemove(move)
      .mouseup(function () {
        self.dragging = false;
        this.onselectstart = null;

        $(this).unbind('mousemove', move);

        if (!self.enter) {
          self.hide();
        }
      });
  };

  /**
   * Show scrollbar.
   *
   * @api private
   */

  Scrollbar.prototype.show = function (duration) {
    if (!this.shown && this.update()) {
      this.el.addClass('antiscroll-scrollbar-shown');
      if (this.hiding) {
        clearTimeout(this.hiding);
        this.hiding = null;
      }
      this.shown = true;
    }
  };

  /**
   * Hide scrollbar.
   *
   * @api private
   */

  Scrollbar.prototype.hide = function () {
    if (this.pane.autoHide !== false && this.shown) {
      // check for dragging
      this.el.removeClass('antiscroll-scrollbar-shown');
      this.shown = false;
    }
  };

  /**
   * Horizontal scrollbar constructor
   *
   * @api private
   */

  Scrollbar.Horizontal = function (pane) {
    this.el = $('<div class="antiscroll-scrollbar antiscroll-scrollbar-horizontal">', pane.el);
    Scrollbar.call(this, pane);
  };

  /**
   * Inherits from Scrollbar.
   */

  inherits(Scrollbar.Horizontal, Scrollbar);

  /**
   * Updates size/position of scrollbar.
   *
   * @api private
   */

  Scrollbar.Horizontal.prototype.update = function () {
    var paneWidth = this.pane.el.width(),
	    trackWidth = paneWidth - this.pane.padding * 2,
		innerEl = this.pane.inner.get(0)

    this.el
      .css('width', trackWidth * paneWidth / innerEl.scrollWidth)
      .css('left', trackWidth * innerEl.scrollLeft / innerEl.scrollWidth);

    return paneWidth < innerEl.scrollWidth;
  };

  /**
   * Called upon drag.
   *
   * @api private
   */

  Scrollbar.Horizontal.prototype.mousemove = function (ev) {
    var trackWidth = this.pane.el.width() - this.pane.padding * 2,
	    pos = ev.pageX - this.startPageX,
		barWidth = this.el.width(),
		innerEl = this.pane.inner.get(0)

    // minimum top is 0, maximum is the track height
    var y = Math.min(Math.max(pos, 0), trackWidth - barWidth);

    innerEl.scrollLeft = (innerEl.scrollWidth - this.pane.el.width())
      * y / (trackWidth - barWidth);
  };

  /**
   * Called upon container mousewheel.
   *
   * @api private
   */

  Scrollbar.Horizontal.prototype.mousewheel = function (ev, delta, x, y) {
    if ((x < 0 && 0 == this.pane.inner.get(0).scrollLeft) ||
        (x > 0 && (this.innerEl.scrollLeft + Math.ceil(this.pane.el.width())
          == this.innerEl.scrollWidth))) {
      ev.preventDefault();
      return false;
    }
  };

  /**
   * Vertical scrollbar constructor
   *
   * @api private
   */

  Scrollbar.Vertical = function (pane) {
    this.el = $('<div class="antiscroll-scrollbar antiscroll-scrollbar-vertical">', pane.el);
    Scrollbar.call(this, pane);
  };

  /**
   * Inherits from Scrollbar.
   */

  inherits(Scrollbar.Vertical, Scrollbar);

  /**
   * Updates size/position of scrollbar.
   *
   * @api private
   */

  Scrollbar.Vertical.prototype.update = function () {
    var paneHeight = this.pane.el.height(),
	    trackHeight = paneHeight - this.pane.padding * 2,
		innerEl = this.innerEl;

    var scrollbarHeight = trackHeight * paneHeight / innerEl.scrollHeight;
    scrollbarHeight = scrollbarHeight < 20 ? 20 : scrollbarHeight;

    var topPos = trackHeight * innerEl.scrollTop / innerEl.scrollHeight;

    if((topPos + scrollbarHeight) > trackHeight) {
        var diff = (topPos + scrollbarHeight) - trackHeight;
        topPos = topPos - diff - 3;
    }

    this.el
      .css('height', scrollbarHeight)
      .css('top', topPos);

	  return paneHeight < innerEl.scrollHeight;
  };

  /**
   * Called upon drag.
   *
   * @api private
   */

  Scrollbar.Vertical.prototype.mousemove = function (ev) {
    var paneHeight = this.pane.el.height(),
	    trackHeight = paneHeight - this.pane.padding * 2,
		pos = ev.pageY - this.startPageY,
		barHeight = this.el.height(),
		innerEl = this.innerEl

    // minimum top is 0, maximum is the track height
    var y = Math.min(Math.max(pos, 0), trackHeight - barHeight);

    innerEl.scrollTop = (innerEl.scrollHeight - paneHeight)
      * y / (trackHeight - barHeight);
  };

  /**
   * Called upon container mousewheel.
   *
   * @api private
   */

  Scrollbar.Vertical.prototype.mousewheel = function (ev, delta, x, y) {
    if ((y > 0 && 0 == this.innerEl.scrollTop) ||
        (y < 0 && (this.innerEl.scrollTop + Math.ceil(this.pane.el.height())
          == this.innerEl.scrollHeight))) {
      ev.preventDefault();
      return false;
    }
  };

  /**
   * Cross-browser inheritance.
   *
   * @param {Function} constructor
   * @param {Function} constructor we inherit from
   * @api private
   */

  function inherits (ctorA, ctorB) {
    function f() {};
    f.prototype = ctorB.prototype;
    ctorA.prototype = new f;
  };

  /**
   * Scrollbar size detection.
   */

  var size;

  function scrollbarSize () {
    if (size === undefined) {
      var div = $(
          '<div class="antiscroll-inner" style="width:50px;height:50px;overflow-y:scroll;'
        + 'position:absolute;top:-200px;left:-200px;"><div style="height:100px;width:100%">'
        + '</div>'
      );

      $('body').append(div);
      var w1 = $(div).innerWidth();
      var w2 = $('div', div).innerWidth();
      $(div).remove();

      size = w1 - w2;
    }

    return size;
  };

})(jQuery);


})();

(function() {

!function(){var a;Ember.Widgets=Ember.Namespace.create(),Ember.Widgets.VERSION="0.0.1",null!=(a=Ember.libraries)&&a.register("Ember Widgets",Ember.Widgets.VERSION)}(),function(){Ember.TEMPLATES.accordion_group_layout=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h="",i=this.escapeExpression;return e.buffer.push('<div class="panel-heading">\n  <h4 class="panel-title">\n    <a class="accordion-toggle collapsed">\n      '),f={},g={},e.buffer.push(i(c._triageMustache.call(b,"view.title",{hash:{},contexts:[b],types:["ID"],hashContexts:g,hashTypes:f,data:e}))),e.buffer.push('\n    </a>\n  </h4>\n</div>\n<div class="panel-collapse collapse">\n  <div class="panel-body">'),f={},g={},e.buffer.push(i(c._triageMustache.call(b,"yield",{hash:{},contexts:[b],types:["ID"],hashContexts:g,hashTypes:f,data:e}))),e.buffer.push("</div>\n</div>\n"),h}),Ember.TEMPLATES.carousel=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h="",i=this.escapeExpression;return f={tagName:b,"class":b,contentBinding:b,itemViewClass:b},g={tagName:"STRING","class":"STRING",contentBinding:"STRING",itemViewClass:"STRING"},e.buffer.push(i(c.view.call(b,"Ember.CollectionView",{hash:{tagName:"ol","class":"carousel-indicators",contentBinding:"view.content",itemViewClass:"Ember.Widgets.CarouselIndicator"},contexts:[b],types:["ID"],hashContexts:f,hashTypes:g,data:e}))),e.buffer.push('\n<div class="carousel-inner">\n  '),g={},f={},e.buffer.push(i(c._triageMustache.call(b,"yield",{hash:{},contexts:[b],types:["ID"],hashContexts:f,hashTypes:g,data:e}))),e.buffer.push('\n</div>\n<a class="left carousel-control"  href="#" '),g={},f={},e.buffer.push(i(c.action.call(b,"prev",{hash:{},contexts:[b],types:["ID"],hashContexts:f,hashTypes:g,data:e}))),e.buffer.push('>‹</a>\n<a class="right carousel-control" href="#" '),g={},f={},e.buffer.push(i(c.action.call(b,"next",{hash:{},contexts:[b],types:["ID"],hashContexts:f,hashTypes:g,data:e}))),e.buffer.push(">›</a>\n"),h}),Ember.TEMPLATES.modal=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push('\n        <button type="button" class="btn btn-primary" '),d={},e={},b.buffer.push(l(c.action.call(a,"sendConfirm",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push(">\n          "),d={},e={},b.buffer.push(l(c._triageMustache.call(a,"confirmText",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("\n        </button>\n      "),f}function g(a,b){var d,e,f="";return b.buffer.push('\n        <button type="button" class="btn btn-default" '),d={},e={},b.buffer.push(l(c.action.call(a,"sendCancel",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push(">\n          "),d={},e={},b.buffer.push(l(c._triageMustache.call(a,"cancelText",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("\n        </button>\n      "),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var h,i,j,k="",l=this.escapeExpression,m=this;return e.buffer.push('<div class="modal-dialog">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" '),i={},j={},e.buffer.push(l(c.action.call(b,"sendCancel",{hash:{},contexts:[b],types:["ID"],hashContexts:j,hashTypes:i,data:e}))),e.buffer.push('>&times;</button>\n      <h4 class="modal-title">'),i={},j={},e.buffer.push(l(c._triageMustache.call(b,"headerText",{hash:{},contexts:[b],types:["ID"],hashContexts:j,hashTypes:i,data:e}))),e.buffer.push('</h4>\n    </div>\n    <div class="modal-body">\n      '),j={contentBinding:b},i={contentBinding:"STRING"},e.buffer.push(l(c.view.call(b,"_contentViewClass",{hash:{contentBinding:"content"},contexts:[b],types:["ID"],hashContexts:j,hashTypes:i,data:e}))),e.buffer.push('\n    </div>\n    <div class="modal-footer">\n      '),i={},j={},h=c["if"].call(b,"confirmText",{hash:{},inverse:m.noop,fn:m.program(1,f,e),contexts:[b],types:["ID"],hashContexts:j,hashTypes:i,data:e}),(h||0===h)&&e.buffer.push(h),e.buffer.push("\n\n      "),i={},j={},h=c["if"].call(b,"cancelText",{hash:{},inverse:m.noop,fn:m.program(3,g,e),contexts:[b],types:["ID"],hashContexts:j,hashTypes:i,data:e}),(h||0===h)&&e.buffer.push(h),e.buffer.push("\n    </div>\n  </div>\n</div>"),k}),Ember.TEMPLATES["multi-select"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push('\n    <span class="ember-select-no-results">\n      No results match "'),d={},e={},b.buffer.push(k(c._triageMustache.call(a,"query",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push('"\n    </span>\n  '),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var g,h,i,j="",k=this.escapeExpression,l=this;return e.buffer.push('<div class="ember-select-container ember-select-multi dropdown-toggle">\n  <ul class="ember-select-choices">\n    '),e.buffer.push("\n    "),h={itemViewClass:b},i={itemViewClass:"STRING"},e.buffer.push(k(c.each.call(b,"selections",{hash:{itemViewClass:"view.selectionItemView"},contexts:[b],types:["ID"],hashContexts:h,hashTypes:i,data:e}))),e.buffer.push('\n    <li class="ember-select-search-field">\n      '),i={},h={},e.buffer.push(k(c.view.call(b,"searchView",{hash:{},contexts:[b],types:["ID"],hashContexts:h,hashTypes:i,data:e}))),e.buffer.push('\n    </li>\n  </ul>\n</div>\n<div class="dropdown-menu">\n  '),h={tagName:b,classNames:b,heightBinding:b,rowHeightBinding:b,contentBinding:b,itemViewClassBinding:b},i={tagName:"STRING",classNames:"STRING",heightBinding:"STRING",rowHeightBinding:"STRING",contentBinding:"STRING",itemViewClassBinding:"STRING"},e.buffer.push(k(c.view.call(b,"listView",{hash:{tagName:"ul",classNames:"grey-box-scroll-bar ember-select-results",heightBinding:"dropdownHeight",rowHeightBinding:"rowHeight",contentBinding:"groupedContent",itemViewClassBinding:"itemView"},contexts:[b],types:["ID"],hashContexts:h,hashTypes:i,data:e}))),e.buffer.push("\n  "),i={},h={},g=c["if"].call(b,"hasNoResults",{hash:{},inverse:l.noop,fn:l.program(1,f,e),contexts:[b],types:["ID"],hashContexts:h,hashTypes:i,data:e}),(g||0===g)&&e.buffer.push(g),e.buffer.push("\n</div>\n"),j}),Ember.TEMPLATES.multi_select_item=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h="",i=this.escapeExpression;return e.buffer.push("<div>"),f={},g={},e.buffer.push(i(c._triageMustache.call(b,"view.label",{hash:{},contexts:[b],types:["ID"],hashContexts:g,hashTypes:f,data:e}))),e.buffer.push('</div>\n<a class="ember-select-search-choice-close" href="#"\n  '),f={},g={},e.buffer.push(i(c.action.call(b,"removeSelectItem","view.content",{hash:{},contexts:[b,b],types:["ID","ID"],hashContexts:g,hashTypes:f,data:e}))),e.buffer.push(">×\n</a>\n"),h}),Ember.TEMPLATES.popover=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push('\n  <h4 class="popover-title">'),d={},e={},b.buffer.push(k(c._triageMustache.call(a,"title",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("</h4>\n"),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var g,h,i,j="",k=this.escapeExpression,l=this;return e.buffer.push('<div class="arrow"></div>\n'),h={},i={},g=c["if"].call(b,"title",{hash:{},inverse:l.noop,fn:l.program(1,f,e),contexts:[b],types:["ID"],hashContexts:i,hashTypes:h,data:e}),(g||0===g)&&e.buffer.push(g),e.buffer.push('\n<div class="popover-content">\n  '),h={},i={},e.buffer.push(k(c.view.call(b,"view._contentViewClass",{hash:{},contexts:[b],types:["ID"],hashContexts:i,hashTypes:h,data:e}))),e.buffer.push("\n</div>\n"),j}),Ember.TEMPLATES.select=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push("\n      "),d={contentBinding:a},e={contentBinding:"STRING"},b.buffer.push(n(c.view.call(a,"selectedItemView",{hash:{contentBinding:"selection"},contexts:[a],types:["ID"],hashContexts:d,hashTypes:e,data:b}))),b.buffer.push("\n      <i "),d={"class":a},e={"class":"STRING"},b.buffer.push(n(c.bindAttr.call(a,{hash:{"class":"view.dropdownToggleIcon"},contexts:[],types:[],hashContexts:d,hashTypes:e,data:b}))),b.buffer.push("></i>\n    "),f}function g(a,b){var d,e,f="";return b.buffer.push("\n      <span>"),d={},e={},b.buffer.push(n(c._triageMustache.call(a,"prompt",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("</span>\n      <i "),e={"class":a},d={"class":"STRING"},b.buffer.push(n(c.bindAttr.call(a,{hash:{"class":"view.dropdownToggleIcon"},contexts:[],types:[],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("></i>\n    "),f}function h(a,b){var d,e,f="";return b.buffer.push('\n    <div class="ember-select-search">\n      '),d={},e={},b.buffer.push(n(c.view.call(a,"searchView",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("\n    </div>\n  "),f}function i(a,b){var d,e,f="";return b.buffer.push('\n    <span class="ember-select-no-results">No results match "'),d={},e={},b.buffer.push(n(c._triageMustache.call(a,"query",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push('"</span>\n  '),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var j,k,l,m="",n=this.escapeExpression,o=this;return e.buffer.push('<div class="ember-select-container dropdown-toggle" '),k={},l={},e.buffer.push(n(c.action.call(b,"toggleDropdown",{hash:{},contexts:[b],types:["ID"],hashContexts:l,hashTypes:k,data:e}))),e.buffer.push(">\n  <a "),l={"class":b},k={"class":"STRING"},e.buffer.push(n(c.bindAttr.call(b,{hash:{"class":":ember-select-choice isButton:btn\n      isButton:btn-default"},contexts:[],types:[],hashContexts:l,hashTypes:k,data:e}))),e.buffer.push(">\n    "),k={},l={},j=c["if"].call(b,"selection",{hash:{},inverse:o.program(3,g,e),fn:o.program(1,f,e),contexts:[b],types:["ID"],hashContexts:l,hashTypes:k,data:e}),(j||0===j)&&e.buffer.push(j),e.buffer.push('\n  </a>\n</div>\n\n<div class="dropdown-menu">\n  '),k={},l={},j=c.unless.call(b,"isSelect",{hash:{},inverse:o.noop,fn:o.program(5,h,e),contexts:[b],types:["ID"],hashContexts:l,hashTypes:k,data:e}),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n  "),l={tagName:b,classNames:b,heightBinding:b,rowHeightBinding:b,contentBinding:b,itemViewClassBinding:b},k={tagName:"STRING",classNames:"STRING",heightBinding:"STRING",rowHeightBinding:"STRING",contentBinding:"STRING",itemViewClassBinding:"STRING"},e.buffer.push(n(c.view.call(b,"listView",{hash:{tagName:"ul",classNames:"ember-select-results",heightBinding:"dropdownHeight",rowHeightBinding:"rowHeight",contentBinding:"groupedContent",itemViewClassBinding:"itemView"},contexts:[b],types:["ID"],hashContexts:l,hashTypes:k,data:e}))),e.buffer.push("\n  "),k={},l={},j=c["if"].call(b,"hasNoResults",{hash:{},inverse:o.noop,fn:o.program(7,i,e),contexts:[b],types:["ID"],hashContexts:l,hashTypes:k,data:e}),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n</div>\n"),m}),Ember.TEMPLATES.select_item_layout=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push("\n  "),d={},e={},b.buffer.push(l(c._triageMustache.call(a,"view.content.name",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("\n"),f}function g(a,b){var d,e,f="";return b.buffer.push("\n  "),d={},e={},b.buffer.push(l(c._triageMustache.call(a,"yield",{hash:{},contexts:[a],types:["ID"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push("\n"),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var h,i,j,k="",l=this.escapeExpression,m=this;return i={},j={},h=c["if"].call(b,"view.content.isGroupOption",{hash:{},inverse:m.program(3,g,e),fn:m.program(1,f,e),contexts:[b],types:["ID"],hashContexts:j,hashTypes:i,data:e}),(h||0===h)&&e.buffer.push(h),e.buffer.push("\n"),k})}(),function(){Ember.Widgets.StyleBindingsMixin=Ember.Mixin.create({concatenatedProperties:["styleBindings"],attributeBindings:["style"],unitType:"px",createStyleString:function(a,b){var c;return c=this.get(b),void 0!==c?("number"===Ember.typeOf(c)&&(c+=this.get("unitType")),""+a+":"+c+";"):void 0},applyStyleBindings:function(){var a,b,c,d,e,f=this;return(c=this.styleBindings)?(a={},c.forEach(function(b){var c,d,e;return e=b.split(":"),c=e[0],d=e[1],a[d||c]=c}),e=_.keys(a),b=_.values(a),d=Ember.computed(function(){var b,c;return c=e.map(function(b){return f.createStyleString(b,a[b])}),b=c.join(""),0!==b.length?b:void 0}),d.property.apply(d,b),Ember.defineProperty(this,"style",d)):void 0},init:function(){return this.applyStyleBindings(),this._super()}}),Ember.Widgets.BodyEventListener=Ember.Mixin.create({bodyElementSelector:"html",bodyClick:Ember.K,didInsertElement:function(){return this._super(),Ember.run.next(this,this._setupDocumentHandlers)},willDestroyElement:function(){return this._super(),this._removeDocumentHandlers()},click:function(a){return a.stopPropagation()},_setupDocumentHandlers:function(){var a=this;if(!this._clickHandler)return this._clickHandler=function(){return a.bodyClick()},$(this.get("bodyElementSelector")).on("click",this._clickHandler)},_removeDocumentHandlers:function(){return $(this.get("bodyElementSelector")).off("click",this._clickHandler),this._clickHandler=null}})}(),function(){Ember.Widgets.AccordionComponent=Ember.Component.extend({classNames:"panel-group",activeIndex:0}),Ember.Widgets.AccordionItem=Ember.View.extend({defaultTemplate:Ember.Handlebars.compile("{{view.content}}"),layoutName:"accordion_group_layout",classNames:"panel panel-default",title:"Untitled Accordion Group",index:0,isActive:!1,content:Ember.computed.alias("parentView.content"),isActiveDidChange:Ember.observer(function(){return this.set("isActive",this.get("parentView.activeIndex")===this.get("index")),this.get("isActive")?this.show():this.hide()},"parentView.activeIndex"),didInsertElement:function(){var a;return a=this.get("parentView").$(".panel").index(this.$()),this.set("index",a),this.isActiveDidChange()},click:function(){return this.get("isActive")?this.set("parentView.activeIndex",null):this.set("parentView.activeIndex",this.get("index"))},hide:function(){var a;return a=this.$(".panel-collapse"),a.height(a.height())[0].offsetHeight,a.removeClass("collapse").removeClass("in").addClass("collapsing"),a.height(0).one($.support.transition.end,function(){return a.removeClass("collapsing").addClass("collapse")})},show:function(){var a;return a=this.$(".panel-collapse"),a.removeClass("collapse").addClass("collapsing").height(0),a.height(a[0].scrollHeight),this.$().one($.support.transition.end,function(){return a.removeClass("collapsing").addClass("in").height("auto")})}}),Ember.Handlebars.helper("accordion-component",Ember.Widgets.AccordionComponent),Ember.Handlebars.helper("accordion-item",Ember.Widgets.AccordionItem)}(),function(){Ember.Widgets.CarouselComponent=Ember.Component.extend({layoutName:"carousel",classNames:["carousel","slide"],classNameBindings:["sliding"],activeIndex:0,didInsertElement:function(){return this.get("content")?void 0:this.set("content",new Array(this.$(".item").length))},prev:function(){var a,b,c;if(!this.get("sliding"))return a=this.get("activeIndex"),b=this.get("content.length"),c=a-1,c=0>c?b-1:c,this.slide("prev",c)},next:function(){var a,b,c;if(!this.get("sliding"))return a=this.get("activeIndex"),b=this.get("content.length"),c=a+1,c=c>=b?0:c,this.slide("next",c)},to:function(a){var b,c=this;if(a>=0&&a<this.get("content.length"))return this.get("sliding")?this.$().one("slid",function(){return c.to(a)}):(b=a>this.get("activeIndex")?"next":"prev",this.slide(b,a))},slide:function(a,b){var c,d,e,f=this;if(this.get("activeIndex")!==b)return e="next"===a?"left":"right",c=$(this.$(".item").get(this.get("activeIndex"))),d=$(this.$(".item").get(b)),this.set("sliding",!0),d.addClass(a),d[0].offsetWidth,c.addClass(e),d.addClass(e),this.$().one($.support.transition.end,function(){return Ember.run(f,function(){return this.set("activeIndex",b),d.removeClass([a,e].join(" ")).addClass("active"),c.removeClass(["active",e].join(" ")),this.set("sliding",!1)})})}}),Ember.Widgets.CarouselIndicator=Ember.View.extend({classNameBindings:"isActive:active",isActive:Ember.computed(function(){return this.get("contentIndex")===this.get("controller.activeIndex")}).property("contentIndex","controller.activeIndex"),click:function(){return this.get("controller").to(this.get("contentIndex"))}}),Ember.Widgets.CarouselItem=Ember.View.extend({classNames:"item"}),Ember.Handlebars.helper("carousel-component",Ember.Widgets.CarouselComponent),Ember.Handlebars.helper("carousel-item",Ember.Widgets.CarouselItem)}(),function(){Ember.Widgets.ModalComponent=Ember.Component.extend(Ember.Widgets.StyleBindingsMixin,{layoutName:"modal",classNames:["modal"],classNameBindings:["isShowing:in","fade"],modalPaneBackdrop:'<div class="modal-backdrop"></div>',bodyElementSelector:".modal-backdrop",enforceModality:!1,backdrop:!0,isShowing:!1,fade:!0,headerText:"Modal Header",confirmText:"Confirm",cancelText:"Cancel",content:"",contentViewClass:null,defaultContentViewClass:Ember.View.extend({template:Ember.Handlebars.compile("<p>{{content}}</p>")}),_contentViewClass:Ember.computed(function(){var a;return a=this.get("contentViewClass"),a?"string"==typeof a?Ember.get(this.get("contentViewClass")):a:this.get("defaultContentViewClass")}).property("contentViewClass"),actions:{sendCancel:function(){return this.sendAction("cancel"),this.hide()},sendConfirm:function(){return this.sendAction("confirm"),this.hide()}},didInsertElement:function(){return this._super(),this.get("fade")&&this.$()[0].offsetWidth,this.get("backdrop")&&this._appendBackdrop(),Ember.run.next(this,function(){return this.set("isShowing",!0)}),$(document.body).addClass("modal-open")},click:function(a){return a.target===a.currentTarget?this.get("enforceModality")?void 0:this.hide():void 0},hide:function(){var a=this;return this.set("isShowing",!1),$(document.body).removeClass("modal-open"),this._backdrop.removeClass("in"),this.$().one($.support.transition.end,function(){return a._backdrop&&a._backdrop.remove(),a.destroy()})},_appendBackdrop:function(){var a,b;return b=this.$().parent(),a=this.get("modalPaneBackdrop"),this.get("fade")&&(this._backdrop=jQuery(a).addClass("fade")),this._backdrop.appendTo(b),Ember.run.next(this,function(){return this._backdrop.addClass("in")})}}),Ember.Widgets.ModalComponent.reopenClass({rootElement:".ember-application",hideAll:function(){},popup:function(a){var b,c;return null==a&&(a={}),c=a.rootElement||this.rootElement,b=this.create(a),b.container=b.get("targetObject.container"),b.appendTo(c),b}}),Ember.Handlebars.helper("modal-component",Ember.Widgets.ModalComponent)}(),function(){Ember.Widgets.PopoverComponent=Ember.Component.extend(Ember.Widgets.StyleBindingsMixin,Ember.Widgets.BodyEventListener,{layoutName:"popover",classNames:["popover"],classNameBindings:["isShowing:in","fade","placement"],styleBindings:["left","top","display","visibility"],targetElement:null,contentViewClass:null,placement:"top",title:"",left:0,top:0,display:"block",visibility:"hidden",fade:!0,isShowing:!1,inserted:!1,content:"",_resizeHandler:null,_scrollHandler:null,_contentViewClass:Ember.computed(function(){return this.get("contentViewClass")?this.get("contentViewClass"):Ember.View.extend({content:Ember.computed.alias("parentView.content"),template:Ember.Handlebars.compile("{{view.parentView.content}}")})}).property("contentViewClass"),didInsertElement:function(){return this._super(),Ember.run.next(this,function(){return this.snapToPosition(),this.set("visibility","visible"),this.set("isShowing",!0)})},bodyClick:function(){return this.hide()},hide:function(){var a=this;return this.set("isShowing",!1),this.$().one($.support.transition.end,function(){return a.destroy()})},snapToPosition:function(){var a,b,c,d;if("inDOM"===this.get("state")){switch(a=$(this.get("targetElement")),c=this.$()[0].offsetWidth,b=this.$()[0].offsetHeight,d=a.offset(),d.width=a[0].offsetWidth,d.height=a[0].offsetHeight,this.get("placement")){case"bottom":this.set("top",d.top+d.height),this.set("left",d.left+d.width/2-c/2);break;case"top":this.set("top",d.top-b),this.set("left",d.left+d.width/2-c/2);break;case"top-right":this.set("top",d.top),this.set("left",d.left+d.width);break;case"top-left":this.set("top",d.top),this.set("left",d.left-c);break;case"bottom-right":this.set("top",d.top+d.height),this.set("left",d.left+d.width-c);break;case"bottom-left":this.set("top",d.top+d.height),this.set("left",d.left);break;case"left":this.set("top",d.top+d.height/2-b/2),this.set("left",d.left-c);break;case"right":this.set("top",d.top+d.height/2-b/2),this.set("left",d.left+d.width)}return this.correctHorizontalIfOffScreen()}},correctHorizontalIfOffScreen:function(){var a,b,c;return b=$("body").width(),a=this.$()[0].offsetWidth,c=!1,this.get("left")+a>b&&(this.set("left",b-a),c=!0),this.get("left")<0&&(this.set("left",0),c=!0),c?this.$().addClass("no-arrow"):this.$().removeClass("no-arrow")},debounceSnapToPosition:Ember.computed(function(){return Ember.run.debounce(this,this.snapToPosition,100)}),_setupDocumentHandlers:function(){return this._super(),this._resizeHandler||(this._resizeHandler=this.get("debounceSnapToPosition"),$("html").on("resize",this._resizeHandler)),this._scrollHandler?void 0:(this._scrollHandler=this.get("debounceSnapToPosition"),$("html").on("scroll",this._scrollHandler))},_removeDocumentHandlers:function(){return this._super(),$("html").off("resize",this._resizeHandler),this._resizeHandler=null,$("html").off("scroll",this._scrollHandler),this._scrollHandler=null}}),Ember.Widgets.PopoverComponent.reopenClass({rootElement:".ember-application",hideAll:function(){},popup:function(a){var b,c;return c=a.rootElement||this.rootElement,b=this.create(a),b.appendTo(c),b}}),Ember.Handlebars.helper("popover-component",Ember.Widgets.PopoverComponent)}(),function(){Ember.Widgets.PopoverLinkComponent=Ember.Component.extend({classNames:["popover-link"],placement:"top",content:null,title:null,contentViewClass:null,_contentViewClass:Ember.computed(function(){return this.get("contentViewClass")?Ember.get(this.get("contentViewClass")):void 0}).property("contentViewClass"),click:function(a){return Ember.Widgets.PopoverComponent.popup({targetElement:a.target,targetObject:this.get("targetObject"),container:this.get("container"),placement:this.get("placement"),title:this.get("title"),content:this.get("content"),contentViewClass:this.get("_contentViewClass")})}}),Ember.Handlebars.helper("popover-link-component",Ember.Widgets.PopoverLinkComponent)}(),function(){var a,b;a=function(a,b){return a?b?("function"==typeof a.get?a.get(b):void 0)||a[b]:a:void 0},b=function(a,b,c){return a&&b?("function"==typeof a.set?a.set(b,c):void 0)||(a[b]=c):void 0},Ember.Widgets.SelectOptionView=Ember.ListItemView.extend({tagName:"li",defaultTemplate:Ember.Handlebars.compile("{{view.label}}"),layoutName:"select_item_layout",classNames:"ember-select-result-item",classNameBindings:["content.isGroupOption:ember-select-group","isHighlighted:highlighted"],labelPath:Ember.computed.alias("controller.optionLabelPath"),isHighlighted:Ember.computed(function(){return this.get("controller.highlighted")===this.get("content")}).property("controller.highlighted","content"),labelPathDidChange:Ember.observer(function(){var a,b;return a=this.get("labelPath"),b=a?"content."+a:"content",Ember.defineProperty(this,"label",Ember.computed.alias(b)),this.notifyPropertyChange("label")},"content","labelPath"),didInsertElement:function(){return this._super(),this.labelPathDidChange()},updateContext:function(a){return this._super(a),this.set("content",a)},click:function(){return this.get("content.isGroupOption")?void 0:(this.set("controller.selection",this.get("content")),this.get("controller").hideDropdown())},mouseEnter:function(){return this.get("content.isGroupOption")?void 0:this.set("controller.highlighted",this.get("content"))}}),Ember.Widgets.SelectComponent=Ember.Component.extend(Ember.Widgets.BodyEventListener,{templateName:"select",classNames:"ember-select",attributeBindings:["tabindex"],classNameBindings:["showDropdown:open"],itemViewClass:"Ember.Widgets.SelectOptionView",prompt:"Select a Value",highlightedIndex:-1,tabindex:-1,showDropdown:!1,dropdownHeight:300,rowHeight:26,sortLabels:!0,isSelect:!1,isButton:!0,dropdownToggleIcon:"icon-caret-down",content:[],selection:null,query:"",optionLabelPath:"",optionValuePath:"",optionGroupPath:"",optionDefaultPath:"",itemView:Ember.computed(function(){var a;return a=this.get("itemViewClass"),"string"==typeof a?Ember.get(a):a}).property("itemViewClass"),selectedItemView:Ember.computed(function(){return this.get("itemView").extend({tagName:"span",labelPath:Ember.computed.alias("controller.optionLabelPath"),context:Ember.computed.alias("controller.selection")})}).property("itemView"),selectedLabel:Ember.computed(function(){return a(this.get("selection"),this.get("optionLabelPath"))}).property("selection","optionLabelPath"),searchView:Ember.TextField.extend({attributeBindings:["tabindex","autofocus"],placeholder:"Search",valueBinding:"parentView.query",tabindex:1,autofocus:!0}),listView:Ember.ListView.extend({style:Ember.computed(function(){var a;return a=Math.min(this.get("height"),this.get("totalHeight")),"height: "+a+"px"}).property("height","totalHeight")}),filteredContent:Ember.computed(function(){var b,c,d,e=this;return b=this.get("content"),d=this.get("query"),b?(c=this.get("content").filter(function(a){return e.matcher(d,a)}),this.get("sortLabels")?_.sortBy(c,function(b){return a(b,e.get("optionLabelPath"))}):c):[]}).property("content.@each","query","optionLabelPath","sortLabels"),groupedContent:Ember.computed(function(){var b,c,d,e;return d=this.get("optionGroupPath"),b=this.get("filteredContent"),d?(c=_.groupBy(b,function(b){return a(b,d)}),e=Ember.A(),_.keys(c).sort().forEach(function(a){return e.pushObject(Ember.Object.create({isGroupOption:!0,name:a})),e.pushObjects(c[a])}),e):b}).property("filteredContent","optionGroupPath"),hasNoResults:Ember.computed.empty("filteredContent"),value:Ember.computed(function(b,c){var d,e;return 2===arguments.length?(e=this.get("optionValuePath"),d=c,e&&(d=this.get("content").findProperty(e,c)),this.set("selection",d),c):(e=this.get("optionValuePath"),d=this.get("selection"),e?a(d,e):selections)}).property("selection"),didInsertElement:function(){return this._super(),this.setDefaultSelection()},matcher:function(b,c){var d;return d=a(c,this.get("optionLabelPath")),!d||!Ember.isEmpty(d.match(RegExp(b,"gi")))},toggleDropdown:function(){return this.toggleProperty("showDropdown")},hideDropdown:function(){return this.set("showDropdown",!1)},setDefaultSelection:Ember.observer(function(){var a,b;if(!this.get("selection")&&(a=this.get("content"),b=this.get("optionDefaultPath"),a&&b))return this.set("selection",a.findProperty(b))},"content.@each"),selectableOptionsDidChange:Ember.observer(function(){var a;return a=this.get("highlighted"),this.get("selectableOptions").contains(a)?void 0:this.set("highlighted",this.get("selectableOptions.firstObject"))},"selectableOptions"),KEY_EVENTS:{8:"deletePressed",27:"escapePressed",13:"enterPressed",38:"upArrowPressed",40:"downArrowPressed"},selectableOptions:Ember.computed(function(){return(this.get("groupedContent")||[]).filter(function(b){return!a(b,"isGroupOption")})}).property("groupedContent"),highlighted:Ember.computed(function(a,b){var c,d;return c=this.get("selectableOptions")||[],b=b||[],1===arguments.length?(d=this.get("highlightedIndex"),b=c.objectAt(d)):(d=c.indexOf(b),this.setHighlightedIndex(d,!0)),b}).property("selectableOptions","highlightedIndex"),bodyClick:function(){return this.hideDropdown()},keyDown:function(a){var b,c,d;return this.get("showDropdown")?(b=this.get("KEY_EVENTS"),c=b[a.keyCode],c?null!=(d=this.get(c))?d.apply(this,arguments):void 0:void 0):this.set("showDropdown",!0)},deletePressed:Ember.K,escapePressed:function(){return this.hideDropdown()},enterPressed:function(a){var b;return b=this.get("highlighted"),b&&this.set("selection",b),this.hideDropdown(),a.preventDefault()},upArrowPressed:function(a){var b,c;return c=this.get("highlightedIndex"),b=a.ctrlKey||a.metaKey?0:c-1,this.setHighlightedIndex(b,!0),a.preventDefault()},downArrowPressed:function(a){var b,c,d;return d=this.get("highlightedIndex"),b=this.get("selectableOptions.length"),c=a.ctrlKey||a.metaKey?b-1:d+1,this.setHighlightedIndex(c,!0),a.preventDefault()},setHighlightedIndex:function(a,b){return this.ensureIndex(a)?(this.set("highlightedIndex",a),b?this.ensureVisible(a):void 0):void 0},ensureIndex:function(a){var b;return b=this.get("selectableOptions.length"),a>=0&&b>a},ensureVisible:function(a){var b,c,d,e,f,g,h;return b=this.$(".ember-list-view"),e=Ember.View.views[b.attr("id")],h=e._startingIndex(),g=e._childViewCount()-1,c=h+g,d=this.get("selectableOptions").objectAt(a),f=this.get("groupedContent").indexOf(d),0===a?b.scrollTop(0):h>f?b.scrollTop(f*this.get("rowHeight")):f>=c?b.scrollTop((f-g+1.5)*this.get("rowHeight")):void 0}}),Ember.Handlebars.helper("select-component",Ember.Widgets.SelectComponent)}(),function(){var a,b;a=function(a,b){return a?b?("function"==typeof a.get?a.get(b):void 0)||a[b]:a:void 0},b=function(a,b,c){return a&&b?("function"==typeof a.set?a.set(b,c):void 0)||(a[b]=c):void 0},Ember.Widgets.MultiSelectOptionView=Ember.View.extend({tagName:"li",templateName:"multi_select_item",classNames:"ember-select-search-choice",labelPath:Ember.computed.alias("controller.optionLabelPath"),didInsertElement:function(){return this._super(),this.labelPathDidChange()},labelPathDidChange:Ember.observer(function(){var a,b;return a=this.get("labelPath"),b=a?"context."+a:"context",Ember.defineProperty(this,"label",Ember.computed.alias(b)),this.notifyPropertyChange("label")},"context","labelPath")}),Ember.Widgets.MultiSelectComponent=Ember.Widgets.SelectComponent.extend({templateName:"multi-select",selections:void 0,values:Ember.computed(function(b,c){var d,e;if(2===arguments.length){if(!c)return;return e=this.get("optionValuePath"),this.set("selections",this.get("content").filter(function(b){return c.contains(a(b,e))})),c}return e=this.get("optionValuePath"),d=this.get("selections"),e?d.getEach(e):d}).property("selections.@each"),selectionItemView:Ember.Widgets.MultiSelectOptionView,searchView:Ember.TextField.extend({"class":"ember-select-input",valueBinding:"parentView.query",focusIn:function(){return this.set("parentView.showDropdown",!0)}}),filteredContent:Ember.computed(function(){var a,b,c,d=this;return a=this.get("content"),b=this.get("query"),c=this.get("selections"),a&&c?this.get("content").filter(function(a){return!c.contains(a)&&d.matcher(b,a)}):[]}).property("content.@each","optionLabelPath","query","selections.@each"),selectionDidChange:Ember.observer(function(){var a,b;return b=this.get("selections"),a=this.get("selection"),this.set("selection",null),this.set("query",""),a&&!b.contains(a)?b.pushObject(a):void 0},"selection"),didInsertElement:function(){return this._super(),this.get("selections")||this.set("selections",[]),this.get("values")?void 0:this.set("values",[])},deletePressed:function(a){return 0===a.target.selectionStart?this.removeSelectItem(this.get("selections.lastObject")):void 0},removeSelectItem:function(a){return this.get("selections").removeObject(a)}}),Ember.Handlebars.helper("multi-select-component",Ember.Widgets.MultiSelectComponent)}();

})();

(function() {

/*! ember-table 2013-10-22 */
(function(){Ember.TEMPLATES["body-container"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return i.buffer.push('<div class="antiscroll-box">\n  <div class="antiscroll-inner">\n    <div class="ember-table-table-scrollable-wrapper">\n      '),o={classNames:t,contentBinding:t,columnsBinding:t,widthBinding:t,numItemsShowingBinding:t,scrollTopBinding:t,startIndexBinding:t},l={classNames:"STRING",contentBinding:"STRING",columnsBinding:"STRING",widthBinding:"STRING",numItemsShowingBinding:"STRING",scrollTopBinding:"STRING",startIndexBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.Table.LazyTableBlock",{hash:{classNames:"ember-table-left-table-block",contentBinding:"controller.bodyContent",columnsBinding:"controller.fixedColumns",widthBinding:"controller._fixedBlockWidth",numItemsShowingBinding:"controller._numItemsShowing",scrollTopBinding:"controller._scrollTop",startIndexBinding:"controller._startIndex"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n      "),o={classNames:t,contentBinding:t,columnsBinding:t,scrollLeftBinding:t,widthBinding:t,numItemsShowingBinding:t,scrollTopBinding:t,startIndexBinding:t},l={classNames:"STRING",contentBinding:"STRING",columnsBinding:"STRING",scrollLeftBinding:"STRING",widthBinding:"STRING",numItemsShowingBinding:"STRING",scrollTopBinding:"STRING",startIndexBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.Table.LazyTableBlock",{hash:{classNames:"ember-table-right-table-block",contentBinding:"controller.bodyContent",columnsBinding:"controller.tableColumns",scrollLeftBinding:"controller._tableScrollLeft",widthBinding:"controller._tableBlockWidth",numItemsShowingBinding:"controller._numItemsShowing",scrollTopBinding:"controller._scrollTop",startIndexBinding:"controller._startIndex"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n    </div>\n  </div>\n</div>"),s}),Ember.TEMPLATES["components/ember-table"]=Ember.Handlebars.template(function(e,t,n,r,i){function o(e,t){var r,i,o="";return t.buffer.push("\n  "),r={},i={},t.buffer.push(d(n.view.call(e,"Ember.Table.HeaderTableContainer",{hash:{},contexts:[e],types:["ID"],hashContexts:i,hashTypes:r,data:t}))),t.buffer.push("\n"),o}function l(e,t){var r,i,o="";return t.buffer.push("\n  "),r={},i={},t.buffer.push(d(n.view.call(e,"Ember.Table.FooterTableContainer",{hash:{},contexts:[e],types:["ID"],hashContexts:i,hashTypes:r,data:t}))),t.buffer.push("\n"),o}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var s,a,h,c="",d=this.escapeExpression,m=this;return a={},h={},s=n["if"].call(t,"controller.hasHeader",{hash:{},inverse:m.noop,fn:m.program(1,o,i),contexts:[t],types:["ID"],hashContexts:h,hashTypes:a,data:i}),(s||0===s)&&i.buffer.push(s),i.buffer.push("\n"),a={},h={},i.buffer.push(d(n.view.call(t,"Ember.Table.BodyTableContainer",{hash:{},contexts:[t],types:["ID"],hashContexts:h,hashTypes:a,data:i}))),i.buffer.push("\n"),a={},h={},s=n["if"].call(t,"controller.hasFooter",{hash:{},inverse:m.noop,fn:m.program(3,l,i),contexts:[t],types:["ID"],hashContexts:h,hashTypes:a,data:i}),(s||0===s)&&i.buffer.push(s),i.buffer.push("\n"),a={},h={},i.buffer.push(d(n.view.call(t,"Ember.Table.ScrollContainer",{hash:{},contexts:[t],types:["ID"],hashContexts:h,hashTypes:a,data:i}))),i.buffer.push("\n"),a={},h={},i.buffer.push(d(n.view.call(t,"Ember.Table.ColumnSortableIndicator",{hash:{},contexts:[t],types:["ID"],hashContexts:h,hashTypes:a,data:i}))),i.buffer.push("\n"),c}),Ember.TEMPLATES["footer-container"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return i.buffer.push('<div class="ember-table-table-fixed-wrapper">\n  '),o={classNames:t,contentBinding:t,columnsBinding:t,widthBinding:t,heightBinding:t},l={classNames:"STRING",contentBinding:"STRING",columnsBinding:"STRING",widthBinding:"STRING",heightBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.Table.TableBlock",{hash:{classNames:"ember-table-left-table-block",contentBinding:"controller.footerContent",columnsBinding:"controller.fixedColumns",widthBinding:"controller._fixedBlockWidth",heightBinding:"controller.footerHeight"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n  "),o={classNames:t,contentBinding:t,columnsBinding:t,scrollLeftBinding:t,widthBinding:t,heightBinding:t},l={classNames:"STRING",contentBinding:"STRING",columnsBinding:"STRING",scrollLeftBinding:"STRING",widthBinding:"STRING",heightBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.Table.TableBlock",{hash:{classNames:"ember-table-right-table-block",contentBinding:"controller.footerContent",columnsBinding:"controller.tableColumns",scrollLeftBinding:"controller._tableScrollLeft",widthBinding:"controller._tableBlockWidth",heightBinding:"controller.footerHeight"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n</div>\n"),s}),Ember.TEMPLATES["header-cell"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return i.buffer.push('<div class="ember-table-content-container" '),o={},l={},i.buffer.push(a(n.action.call(t,"sortByColumn","view.content",{hash:{},contexts:[t,t],types:["ID","ID"],hashContexts:l,hashTypes:o,data:i}))),i.buffer.push('>\n  <span class="ember-table-content">\n    '),o={},l={},i.buffer.push(a(n._triageMustache.call(t,"view.content.headerCellName",{hash:{},contexts:[t],types:["ID"],hashContexts:l,hashTypes:o,data:i}))),i.buffer.push("\n  </span>\n</div>"),s}),Ember.TEMPLATES["header-container"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return i.buffer.push('<div class="ember-table-table-fixed-wrapper">\n  '),o={classNames:t,columnsBinding:t,widthBinding:t,heightBinding:t},l={classNames:"STRING",columnsBinding:"STRING",widthBinding:"STRING",heightBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.Table.HeaderBlock",{hash:{classNames:"ember-table-left-table-block",columnsBinding:"controller.fixedColumns",widthBinding:"controller._fixedBlockWidth",heightBinding:"controller.headerHeight"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n  "),o={classNames:t,columnsBinding:t,scrollLeftBinding:t,widthBinding:t,heightBinding:t},l={classNames:"STRING",columnsBinding:"STRING",scrollLeftBinding:"STRING",widthBinding:"STRING",heightBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.Table.HeaderBlock",{hash:{classNames:"ember-table-right-table-block",columnsBinding:"controller.tableColumns",scrollLeftBinding:"controller._tableScrollLeft",widthBinding:"controller._tableBlockWidth",heightBinding:"controller.headerHeight"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n</div>\n"),s}),Ember.TEMPLATES["header-row"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return o={contentBinding:t,itemViewClassField:t,widthBinding:t},l={contentBinding:"STRING",itemViewClassField:"STRING",widthBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.MultiItemViewCollectionView",{hash:{contentBinding:"view.content",itemViewClassField:"headerCellViewClass",widthBinding:"controller._tableColumnsWidth"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n"),s}),Ember.TEMPLATES["scroll-container"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return i.buffer.push('<div class="antiscroll-wrap">\n  <div class="antiscroll-inner">\n    '),o={},l={},i.buffer.push(a(n.view.call(t,"Ember.Table.ScrollPanel",{hash:{},contexts:[t],types:["ID"],hashContexts:l,hashTypes:o,data:i}))),i.buffer.push("\n  </div>\n</div>\n"),s}),Ember.TEMPLATES["table-cell"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return i.buffer.push('<span class="ember-table-content">\n  '),o={},l={},i.buffer.push(a(n._triageMustache.call(t,"view.cellContent",{hash:{},contexts:[t],types:["ID"],hashContexts:l,hashTypes:o,data:i}))),i.buffer.push("\n</span>"),s}),Ember.TEMPLATES["table-row"]=Ember.Handlebars.template(function(e,t,n,r,i){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),i=i||{};var o,l,s="",a=this.escapeExpression;return o={rowBinding:t,contentBinding:t,itemViewClassField:t,widthBinding:t},l={rowBinding:"STRING",contentBinding:"STRING",itemViewClassField:"STRING",widthBinding:"STRING"},i.buffer.push(a(n.view.call(t,"Ember.MultiItemViewCollectionView",{hash:{rowBinding:"view.row",contentBinding:"view.columns",itemViewClassField:"tableCellViewClass",widthBinding:"controller._tableColumnsWidth"},contexts:[t],types:["ID"],hashContexts:o,hashTypes:l,data:i}))),i.buffer.push("\n"),s})})(),function(){Ember.Table=Ember.Namespace.create(),Ember.Table.VERSION="0.0.2",null!=(_ref=Ember.libraries)&&_ref.register("Ember Table",Ember.Table.VERSION)}(),function(){Ember.AddeparMixins=Ember.AddeparMixins||Ember.Namespace.create(),Ember.AddeparMixins.ResizeHandlerMixin=Ember.Mixin.create({resizeEndDelay:200,resizing:!1,onResizeStart:Ember.K,onResizeEnd:Ember.K,onResize:Ember.K,endResize:Ember.computed(function(){return function(e){return this.isDestroyed?void 0:(this.set("resizing",!1),"function"==typeof this.onResizeEnd?this.onResizeEnd(e):void 0)}}),handleWindowResize:function(e){return this.get("resizing")||(this.set("resizing",!0),"function"==typeof this.onResizeStart&&this.onResizeStart(e)),"function"==typeof this.onResize&&this.onResize(e),Ember.run.debounce(this,this.get("endResize"),e,this.get("resizeEndDelay"))},didInsertElement:function(){return this._super(),this._setupDocumentHandlers()},willDestroyElement:function(){return this._removeDocumentHandlers(),this._super()},_setupDocumentHandlers:function(){return this._resizeHandler?void 0:(this._resizeHandler=jQuery.proxy(this.get("handleWindowResize"),this),jQuery(window).on("resize."+this.elementId,this._resizeHandler))},_removeDocumentHandlers:function(){return jQuery(window).off("resize."+this.elementId,this._resizeHandler),this._resizeHandler=null}})}(),function(){Ember.AddeparMixins=Ember.AddeparMixins||Ember.Namespace.create(),Ember.AddeparMixins.StyleBindingsMixin=Ember.Mixin.create({concatenatedProperties:["styleBindings"],attributeBindings:["style"],unitType:"px",createStyleString:function(e,t){var n;return n=this.get(t),void 0!==n?("number"===Ember.typeOf(n)&&(n+=this.get("unitType")),""+e+":"+n+";"):void 0},applyStyleBindings:function(){var e,t,n,r,i,o=this;return(n=this.styleBindings)?(e={},n.forEach(function(t){var n,r,i;i=t.split(":"),n=i[0],r=i[1],e[r||n]=n}),i=Ember.keys(e),t=i.map(function(t){return e[t]}),r=Ember.computed(function(){var t,n;return n=i.map(function(t){return o.createStyleString(t,e[t])}),t=n.join(""),0!==t.length?t:void 0}),r.property.apply(r,t),Ember.defineProperty(this,"style",r)):void 0},init:function(){return this.applyStyleBindings(),this._super()}})}(),function(){jQuery.browser||function(){var e,t,n;return t=void 0,e=void 0,jQuery.uaMatch=function(e){var t;return e=e.toLowerCase(),t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0>e.indexOf("compatible")&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],{browser:t[1]||"",version:t[2]||"0"}},t=jQuery.uaMatch(navigator.userAgent),e={},t.browser&&(e[t.browser]=!0,e.version=t.version),e.chrome?e.webkit=!0:e.webkit&&(e.safari=!0),n=jQuery.browser=e}()}(),function(){Ember.LazyContainerView=Ember.ContainerView.extend(Ember.AddeparMixins.StyleBindingsMixin,{classNames:"lazy-list-container",styleBindings:["height"],content:null,itemViewClass:null,rowHeight:null,scrollTop:null,startIndex:null,init:function(){return this._super(),this.onNumChildViewsDidChange()},height:Ember.computed(function(){return this.get("content.length")*this.get("rowHeight")}).property("content.length","rowHeight"),numChildViews:Ember.computed(function(){return this.get("numItemsShowing")+2}).property("numItemsShowing"),onNumChildViewsDidChange:Ember.observer(function(){var e,t,n,r,i,o,l,s;return i=this,e=Ember.get(this.get("itemViewClass")),t=this.get("numChildViews"),e&&t?(r=this.get("length"),n=t-r,0>n?(l=this.slice(t,r),this.removeObjects(l)):n>0?(o=function(){s=[];for(var e=0;n>=0?n>e:e>n;n>=0?e++:e--)s.push(e);return s}.apply(this).map(function(){return i.createChildView(e)}),this.pushObjects(o)):void 0):void 0},"numChildViews","itemViewClass"),viewportDidChange:Ember.observer(function(){var e,t,n,r;return t=this.get("content")||[],e=t.get("length"),n=Math.min(this.get("length"),e),r=this.get("startIndex"),r+n>=e&&(r=e-n),0>r&&(r=0),this.forEach(function(e,i){var o,l;return i>=n?(e=this.objectAt(i),e.set("content",null),void 0):(l=r+i,e=this.objectAt(l%n),o=t.objectAt(l),o!==e.get("content")?(e.teardownContent(),e.set("itemIndex",l),e.set("content",o),e.prepareContent()):void 0)},this)},"content.length","length","startIndex")}),Ember.LazyItemView=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{itemIndex:null,prepareContent:Ember.K,teardownContent:Ember.K,rowHeightBinding:"parentView.rowHeight",styleBindings:["width","top","display"],top:Ember.computed(function(){return this.get("itemIndex")*this.get("rowHeight")}).property("itemIndex","rowHeight"),display:Ember.computed(function(){return this.get("content")?void 0:"none"}).property("content")})}(),function(){Ember.MultiItemViewCollectionView=Ember.CollectionView.extend(Ember.AddeparMixins.StyleBindingsMixin,{styleBindings:"width",itemViewClassField:null,createChildView:function(e,t){var n,r;return r=this.get("itemViewClassField"),n=t.content.get(r),"string"==typeof n&&(n=Ember.get(Ember.lookup,n)),this._super(n,t)}}),Ember.MouseWheelHandlerMixin=Ember.Mixin.create({onMouseWheel:Ember.K,didInsertElement:function(){var e=this;return this._super(),this.$().bind("mousewheel",function(t,n,r,i){return Ember.run(e,e.onMouseWheel,t,n,r,i)})},willDestroyElement:function(){var e;return null!=(e=this.$())&&e.unbind("mousewheel"),this._super()}}),Ember.ScrollHandlerMixin=Ember.Mixin.create({onScroll:Ember.K,scrollElementSelector:"",didInsertElement:function(){var e=this;return this._super(),this.$(this.get("scrollElementSelector")).bind("scroll",function(t){return Ember.run(e,e.onScroll,t)})},willDestroyElement:function(){var e;return null!=(e=this.$(this.get("scrollElementSelector")))&&e.unbind("scroll"),this._super()}}),Ember.TouchMoveHandlerMixin=Ember.Mixin.create({onTouchMove:Ember.K,didInsertElement:function(){var e,t,n=this;return this._super(),e=t=0,this.$().bind("touchstart",function(n){e=n.originalEvent.targetTouches[0].pageX,t=n.originalEvent.targetTouches[0].pageY}),this.$().bind("touchmove",function(r){var i,o,l,s;l=r.originalEvent.targetTouches[0].pageX,s=r.originalEvent.targetTouches[0].pageY,i=-(l-e),o=-(s-t),Ember.run(n,n.onTouchMove,r,i,o),e=l,t=s})},willDestroy:function(){var e;return null!=(e=this.$())&&e.unbind("touchmove"),this._super()}}),Ember.Table.RowArrayController=Ember.ArrayController.extend({itemController:null,content:null,rowContent:Ember.computed(function(){return[]}).property(),controllerAt:function(e,t){var n,r,i;return n=this.get("container"),i=this.get("_subControllers"),(r=i[e])?r:(r=this.get("itemController").create({target:this,parentController:this.get("parentController")||this,content:t}),i[e]=r,r)}}),Ember.Table.ShowHorizontalScrollMixin=Ember.Mixin.create({mouseEnter:function(e){var t,n;return n=$(e.target).parents(".ember-table-tables-container"),t=n.find(".antiscroll-scrollbar-horizontal"),t.addClass("antiscroll-scrollbar-shown")},mouseLeave:function(e){var t,n;return n=$(e.target).parents(".ember-table-tables-container"),t=n.find(".antiscroll-scrollbar-horizontal"),t.removeClass("antiscroll-scrollbar-shown")}})}(),function(){Ember.Table.ColumnDefinition=Ember.Object.extend({headerCellName:void 0,contentPath:void 0,minWidth:void 0,maxWidth:void 0,defaultColumnWidth:150,columnWidth:Ember.computed.oneWay("defaultColumnWidth"),isResizable:!0,isSortable:!0,textAlign:"text-align-right",canAutoResize:!0,headerCellViewClass:"Ember.Table.HeaderCell",tableCellViewClass:"Ember.Table.TableCell",resize:function(e){return this.set("columnWidth",e)},getCellContent:function(e){var t;return t=this.get("contentPath"),Ember.assert("You must either provide a contentPath or override getCellContent in your column definition",null!=t),Ember.get(e,t)},setCellContent:Ember.K}),Ember.Table.Row=Ember.ObjectProxy.extend({content:null,isSelected:!1,isShowing:!0,isActive:!1})}(),function(){Ember.Table.TableContainer=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{classNames:["ember-table-table-container"],styleBindings:["height","width"]}),Ember.Table.TableBlock=Ember.CollectionView.extend(Ember.AddeparMixins.StyleBindingsMixin,{classNames:["ember-table-table-block"],styleBindings:["width","height"],itemViewClass:Ember.computed.alias("controller.tableRowViewClass"),columns:null,content:null,scrollLeft:null,onScrollLeftDidChange:Ember.observer(function(){return this.$().scrollLeft(this.get("scrollLeft"))},"scrollLeft"),height:Ember.computed(function(){return this.get("controller._headerHeight")}).property("controller._headerHeight")}),Ember.Table.LazyTableBlock=Ember.LazyContainerView.extend({classNames:["ember-table-table-block"],styleBindings:["width"],itemViewClass:Ember.computed.alias("controller.tableRowViewClass"),rowHeight:Ember.computed.alias("controller.rowHeight"),columns:null,content:null,scrollLeft:null,scrollTop:null,onScrollLeftDidChange:Ember.observer(function(){return this.$().scrollLeft(this.get("scrollLeft"))},"scrollLeft")}),Ember.Table.TableRow=Ember.LazyItemView.extend({templateName:"table-row",classNames:"ember-table-table-row",classNameBindings:["row.isActive:active","row.isSelected:ember-table-selected","row.rowStyle","isLastRow:ember-table-last-row"],styleBindings:["width","height"],row:Ember.computed.alias("content"),columns:Ember.computed.alias("parentView.columns"),width:Ember.computed.alias("controller._rowWidth"),height:Ember.computed.alias("controller.rowHeight"),isLastRow:Ember.computed(function(){return this.get("row")===this.get("controller.bodyContent.lastObject")}).property("controller.bodyContent.lastObject","row"),mouseEnter:function(){var e;return e=this.get("row"),e?e.set("isActive",!0):void 0},mouseLeave:function(){var e;return e=this.get("row"),e?e.set("isActive",!1):void 0},teardownContent:function(){var e;return e=this.get("row"),e?e.set("isActive",!1):void 0}}),Ember.Table.TableCell=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{templateName:"table-cell",classNames:["ember-table-cell"],classNameBindings:"column.textAlign",styleBindings:"width",row:Ember.computed.alias("parentView.row"),column:Ember.computed.alias("content"),rowContent:Ember.computed.alias("row.content"),width:Ember.computed.alias("column.columnWidth"),init:function(){return this._super(),this.contentPathDidChange(),this.contentDidChange()},contentDidChange:function(){return this.notifyPropertyChange("cellContent")},contentPathWillChange:function(){var e;return e=this.get("column.contentPath"),e?this.removeObserver("rowContent."+e,this,this.contentDidChange):void 0}.observesBefore("column.contentPath"),contentPathDidChange:function(){var e;return e=this.get("column.contentPath"),e?this.addObserver("rowContent."+e,this,this.contentDidChange):void 0}.observesBefore("column.contentPath"),cellContent:Ember.computed(function(e,t){var n,r;return r=this.get("rowContent"),n=this.get("column"),r&&n?(1===arguments.length?t=n.getCellContent(r):n.setCellContent(r,t),t):void 0}).property("rowContent.isLoaded","column")}),Ember.Table.HeaderBlock=Ember.Table.TableBlock.extend({classNames:["ember-table-header-block"],itemViewClass:"Ember.Table.HeaderRow",content:Ember.computed(function(){return[this.get("columns")]}).property("columns")}),Ember.Table.HeaderRow=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{templateName:"header-row",classNames:["ember-table-table-row","ember-table-header-row"],styleBindings:["width"],columns:Ember.computed.alias("content"),width:Ember.computed.alias("controller._rowWidth"),scrollLeft:Ember.computed.alias("controller._tableScrollLeft"),sortableOption:Ember.computed(function(){return{axis:"x",containment:"parent",cursor:"move",helper:"clone",items:".ember-table-header-cell.sortable",opacity:.9,placeholder:"ui-state-highlight",scroll:!0,tolerance:"pointer",update:jQuery.proxy(this.onColumnSortDone,this),stop:jQuery.proxy(this.onColumnSortStop,this),sort:jQuery.proxy(this.onColumnSortChange,this)}}),onScrollLeftDidChange:Ember.observer(function(){return this.$().scrollLeft(this.get("scrollLeft"))},"scrollLeft"),didInsertElement:function(){return this._super(),this.get("controller.enableColumnReorder")?this.$("> div").sortable(this.get("sortableOption")):void 0},onScroll:function(e){return this.set("scrollLeft",e.target.scrollLeft),e.preventDefault()},onColumnSortStop:function(){return this.set("controller._isShowingSortableIndicator",!1)},onColumnSortChange:function(){var e;return e=this.$(".ui-state-highlight").offset().left-this.$().closest(".ember-table-tables-container").offset().left,this.set("controller._isShowingSortableIndicator",!0),this.set("controller._sortableIndicatorLeft",e)},onColumnSortDone:function(e,t){var n,r,i;return r=t.item.index(),i=Ember.View.views[t.item.attr("id")],n=i.get("column"),this.get("controller").onColumnSort(n,r),this.set("controller._isShowingSortableIndicator",!1)}}),Ember.Table.HeaderCell=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{templateName:"header-cell",classNames:["ember-table-cell","ember-table-header-cell"],classNameBindings:["column.isSortable:sortable","column.textAlign"],styleBindings:["width","height"],column:Ember.computed.alias("content"),width:Ember.computed.alias("column.columnWidth"),height:Ember.computed(function(){return this.get("controller._headerHeight")}).property("controller._headerHeight"),resizableOption:Ember.computed(function(){return{handles:"e",minHeight:40,minWidth:this.get("column.minWidth")||100,maxWidth:this.get("column.maxWidth")||500,grid:this.get("column.snapGrid"),resize:jQuery.proxy(this.onColumnResize,this),stop:jQuery.proxy(this.onColumnResize,this)}}),didInsertElement:function(){this.elementSizeDidChange(),this.get("column.isResizable")&&(this.$().resizable(this.get("resizableOption")),this._resizableWidget=this.$().resizable("widget"))},onColumnResize:function(e,t){return this.elementSizeDidChange(),this.get("column").resize(t.size.width)},elementSizeDidChange:function(){var e;e=0,$(".ember-table-header-block .ember-table-content").each(function(){var t;return t=$(this).outerHeight(),t>e?e=t:void 0}),this.set("controller._contentHeaderHeight",e)}}),Ember.Table.ColumnSortableIndicator=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{classNames:"ember-table-column-sortable-indicator",classNameBindings:"controller._isShowingSortableIndicator:active",styleBindings:["left","height"],left:Ember.computed.alias("controller._sortableIndicatorLeft"),height:Ember.computed.alias("controller._height")}),Ember.Table.HeaderTableContainer=Ember.Table.TableContainer.extend(Ember.Table.ShowHorizontalScrollMixin,{templateName:"header-container",classNames:["ember-table-table-container","ember-table-fixed-table-container","ember-table-header-container"],height:Ember.computed.alias("controller._headerHeight"),width:Ember.computed.alias("controller._tableContainerWidth")}),Ember.Table.BodyTableContainer=Ember.Table.TableContainer.extend(Ember.MouseWheelHandlerMixin,Ember.TouchMoveHandlerMixin,Ember.ScrollHandlerMixin,Ember.Table.ShowHorizontalScrollMixin,{templateName:"body-container",classNames:["ember-table-table-container","ember-table-body-container","antiscroll-wrap"],height:Ember.computed.alias("controller._bodyHeight"),width:Ember.computed.alias("controller._width"),scrollTop:Ember.computed.alias("controller._tableScrollTop"),scrollLeft:Ember.computed.alias("controller._tableScrollLeft"),scrollElementSelector:".antiscroll-inner",onScroll:function(e){return this.set("scrollTop",e.target.scrollTop),e.preventDefault()},onMouseWheel:function(e,t,n,r){var i;if(Math.abs(n)>Math.abs(r))return i=this.$(".ember-table-right-table-block").scrollLeft()+n,this.set("scrollLeft",i),e.preventDefault()},onTouchMove:function(e,t,n){var r;if(Math.abs(t)>Math.abs(n))return r=this.$(".ember-table-right-table-block").scrollLeft()+t,this.set("scrollLeft",r),e.preventDefault()}}),Ember.Table.FooterTableContainer=Ember.Table.TableContainer.extend(Ember.MouseWheelHandlerMixin,Ember.TouchMoveHandlerMixin,Ember.Table.ShowHorizontalScrollMixin,{templateName:"footer-container",classNames:["ember-table-table-container","ember-table-fixed-table-container","ember-table-footer-container"],styleBindings:"top",height:Ember.computed.alias("controller.footerHeight"),width:Ember.computed.alias("controller._tableContainerWidth"),scrollLeft:Ember.computed.alias("controller._tableScrollLeft"),top:Ember.computed(function(){var e,t,n;return n=this.get("controller._headerHeight"),t=this.get("controller._tableContentHeight")+n,e=this.get("controller._bodyHeight")+n,e>t?t:e}).property("controller._bodyHeight","controller._headerHeight","controller._tableContentHeight"),onMouseWheel:function(e,t,n){var r;return r=this.$(".ember-table-right-table-block").scrollLeft()+n,this.set("scrollLeft",r),e.preventDefault()},onTouchMove:function(e,t){var n;return n=this.$(".ember-table-right-table-block").scrollLeft()+t,this.set("scrollLeft",n),e.preventDefault()}}),Ember.Table.ScrollContainer=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,Ember.ScrollHandlerMixin,{templateName:"scroll-container",classNames:["ember-table-scroll-container"],styleBindings:["left","width","height"],scrollElementSelector:".antiscroll-inner",width:Ember.computed.alias("controller._scrollContainerWidth"),height:10,left:Ember.computed.alias("controller._fixedColumnsWidth"),scrollTop:Ember.computed.alias("controller._tableScrollTop"),scrollLeft:Ember.computed.alias("controller._tableScrollLeft"),didInsertElement:function(){return this._super(),this.onScrollLeftDidChange()},onScroll:function(e){return this.set("scrollLeft",e.target.scrollLeft),e.preventDefault()},onScrollLeftDidChange:Ember.observer(function(){var e;return e=this.get("scrollElementSelector"),this.$(e).scrollLeft(this.get("scrollLeft"))},"scrollLeft","scrollElementSelector")}),Ember.Table.ScrollPanel=Ember.View.extend(Ember.AddeparMixins.StyleBindingsMixin,{classNames:["ember-table-scroll-panel"],styleBindings:["width","height"],width:Ember.computed.alias("controller._tableColumnsWidth"),height:Ember.computed.alias("controller._tableContentHeight")})}(),function(){Ember.Table.EmberTableComponent=Ember.Component.extend(Ember.AddeparMixins.StyleBindingsMixin,Ember.AddeparMixins.ResizeHandlerMixin,{templateName:"components/ember-table",classNames:["ember-table-tables-container"],styleBindings:["height"],height:Ember.computed.alias("_tablesContainerHeight"),columns:null,numFixedColumns:0,numFooterRow:0,rowHeight:30,minHeaderHeight:30,footerHeight:30,hasHeader:!0,hasFooter:!0,forceFillColumns:!1,enableColumnReorder:!0,selection:null,tableRowViewClass:"Ember.Table.TableRow",actions:{addColumn:Ember.K,sortByColumn:Ember.K},onColumnSort:function(e,t){var n;return n=this.get("tableColumns"),n.removeObject(e),n.insertAt(t,e)},bodyContent:Ember.computed(function(){return Ember.Table.RowArrayController.create({target:this,parentController:this,container:this.get("container"),itemController:Ember.Table.Row,content:this.get("content")})}).property("content"),footerContent:Ember.computed(function(e,t){return t?t:Ember.A()}).property(),fixedColumns:Ember.computed(function(){var e,t;return(e=this.get("columns"))?(t=this.get("numFixedColumns")||0,e=e.slice(0,t)||[],this.prepareTableColumns(e),e):Ember.A()}).property("columns.@each","numFixedColumns"),tableColumns:Ember.computed(function(){var e,t;return(e=this.get("columns"))?(t=this.get("numFixedColumns")||0,e=e.slice(t,e.get("length"))||[],this.prepareTableColumns(e),e):Ember.A()}).property("columns.@each","numFixedColumns"),prepareTableColumns:function(e){return e.setEach("controller",this)},didInsertElement:function(){return this._super(),this.set("_tableScrollTop",0),this.elementSizeDidChange()},onResizeEnd:function(){return Ember.run(this,this.elementSizeDidChange)},elementSizeDidChange:function(){return"inDOM"===this.get("state")?(this.set("_width",this.$().parent().outerWidth()),this.set("_height",this.$().parent().outerHeight()),Ember.run.next(this,this.updateLayout)):void 0},updateLayout:function(){return"inDOM"===this.get("state")?(this.$(".antiscroll-wrap").antiscroll(),this.get("forceFillColumns")?this.doForceFillColumns():void 0):void 0},doForceFillColumns:function(){var e,t,n,r,i,o,l,s;return s=this.get("_width"),r=this.get("_fixedColumnsWidth"),l=this.get("tableColumns"),n=this._getTotalWidth(l,"defaultColumnWidth"),t=s-r,t>n?(o=t-n,i=l.filterProperty("canAutoResize").length,e=Math.floor(o/i),l.forEach(function(t){var n;return t.get("canAutoResize")?(n=t.get("defaultColumnWidth")+e,t.set("columnWidth",n)):void 0})):void 0},onBodyContentLengthDidChange:Ember.observer(function(){return Ember.run.next(this,function(){return Ember.run.once(this,this.updateLayout)})},"bodyContent.length"),_tableScrollTop:0,_tableScrollLeft:0,_width:null,_height:null,_contentHeaderHeight:null,_hasVerticalScrollbar:Ember.computed(function(){var e,t;return t=this.get("_height"),e=this.get("_tableContentHeight")+this.get("_headerHeight")+this.get("_footerHeight"),e>t?!0:!1}).property("_height","_tableContentHeight","_headerHeight","_footerHeight"),_hasHorizontalScrollbar:Ember.computed(function(){var e,t;return e=this.get("_tableColumnsWidth"),t=this.get("_width")-this.get("_fixedColumnsWidth"),e>t?!0:!1}).property("_tableColumnsWidth","_width","_fixedColumnsWidth"),_tablesContainerHeight:Ember.computed(function(){var e,t;return t=this.get("_height"),e=this.get("_tableContentHeight")+this.get("_headerHeight")+this.get("_footerHeight"),t>e?e:t}).property("_height","_tableContentHeight","_headerHeight","_footerHeight"),_fixedColumnsWidth:Ember.computed(function(){return this._getTotalWidth(this.get("fixedColumns"))}).property("fixedColumns.@each.columnWidth"),_tableColumnsWidth:Ember.computed(function(){var e,t;return t=this._getTotalWidth(this.get("tableColumns"))+3,e=this.get("_width")-this.get("_fixedColumnsWidth"),t>e?t:e}).property("tableColumns.@each.columnWidth","_width","_fixedColumnsWidth"),_rowWidth:Ember.computed(function(){var e,t;return e=this.get("_tableColumnsWidth"),t=this.get("_tableContainerWidth")-this.get("_fixedColumnsWidth"),t>e?t:e}).property("_fixedColumnsWidth","_tableColumnsWidth","_tableContainerWidth"),_headerHeight:Ember.computed(function(){var e,t;return t=this.get("minHeaderHeight"),e=this.get("_contentHeaderHeight"),t>e?t:e}).property("_contentHeaderHeight","minHeaderHeight"),_footerHeight:Ember.computed(function(){return this.get("hasFooter")?this.get("footerHeight"):0}).property("footerHeight","hasFooter"),_bodyHeight:Ember.computed(function(){var e;return e=this.get("_tablesContainerHeight"),this.get("hasHeader")&&(e-=this.get("_headerHeight")),this.get("hasFooter")&&(e-=this.get("footerHeight")),e}).property("_tablesContainerHeight","_hasHorizontalScrollbar","_headerHeight","footerHeight","hasHeader","hasFooter"),_tableBlockWidth:Ember.computed(function(){return this.get("_width")-this.get("_fixedColumnsWidth")
}).property("_width","_fixedColumnsWidth"),_fixedBlockWidthBinding:"_fixedColumnsWidth",_tableContentHeight:Ember.computed(function(){return this.get("rowHeight")*this.get("bodyContent.length")}).property("rowHeight","bodyContent.length"),_tableContainerWidth:Ember.computed(function(){return this.get("_width")}).property("_width"),_scrollContainerWidth:Ember.computed(function(){return this.get("_width")-this.get("_fixedColumnsWidth")}).property("_width","_fixedColumnsWidth"),_numItemsShowing:Ember.computed(function(){return Math.floor(this.get("_bodyHeight")/this.get("rowHeight"))}).property("_bodyHeight","rowHeight"),_startIndex:Ember.computed(function(){var e,t,n,r,i;return t=this.get("bodyContent.length"),n=this.get("_numItemsShowing"),r=this.get("rowHeight"),i=this.get("_tableScrollTop"),e=Math.floor(i/r),e+n>=t&&(e=t-n),0>e?0:e}).property("bodyContent.length","_numItemsShowing","rowHeight","_tableScrollTop"),_getTotalWidth:function(e,t){var n;return null==t&&(t="columnWidth"),e?(n=e.getEach(t)||[],n.reduce(function(e,t){return e+t},0)):0},mouseDown:function(e){var t,n,r,i;return(i=this.getRowForEvent(e))?(t=this.get("bodyContent")||[],r=this.get("selection"),r&&(n=t.findProperty("content",r),n.set("isSelected",!1)),i.set("isSelected",!0),this.set("selection",i.get("content"))):void 0},getRowForEvent:function(e){var t,n;return t=$(e.target).parents(".ember-table-table-row"),n=Ember.View.views[t.attr("id")],n?n.get("row"):void 0}}),Ember.Handlebars.helper("table-component",Ember.Table.EmberTableComponent)}();

})();

(function() {

(function() {

Ember.TEMPLATES["chart"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("<svg ");
  hashContexts = {'width': depth0,'height': depth0};
  hashTypes = {'width': "STRING",'height': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'width': ("outerWidth"),
    'height': ("outerHeight")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  <g class=\"chart-viewport\" ");
  hashContexts = {'transform': depth0};
  hashTypes = {'transform': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'transform': ("transformViewport")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("></g>\n</svg>\n");
  return buffer;

});

})();

(function() {

Ember.Charts = Ember.Namespace.create();


})();

(function() {


Ember.Charts.Helpers = Ember.Namespace.create({
  groupBy: function(obj, getter) {
    var group, index, key, result, value, _i, _ref;
    result = {};
    for (index = _i = 0, _ref = obj.length; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
      value = obj[index];
      key = getter(value, index);
      group = result[key] || (result[key] = []);
      group.push(value);
    }
    return result;
  },
  LabelTrimmer: Ember.Object.extend({
    getLabelSize: function(d, selection) {
      return 100;
    },
    getLabelText: function(d, selection) {
      return d.label;
    },
    trim: Ember.computed(function() {
      var getLabelSize, getLabelText;
      getLabelSize = this.get('getLabelSize');
      getLabelText = this.get('getLabelText');
      return function(selection) {
        return selection.text(function(d) {
          var bbW, charWidth, label, numChars, textLabelWidth;
          bbW = this.getBBox().width;
          label = getLabelText(d, selection);
          if (!label) {
            return '';
          }
          charWidth = bbW / label.length;
          textLabelWidth = getLabelSize(d, selection) - 4 * charWidth;
          numChars = Math.floor(textLabelWidth / charWidth);
          if (numChars - 3 <= 0) {
            return '...';
          } else if (bbW > textLabelWidth) {
            return label.slice(0, numChars - 3) + '...';
          } else {
            return label;
          }
        });
      };
    }).property('getLabelSize', 'getLabelText')
  })
});


})();

(function() {


Ember.Charts.Colorable = Ember.Mixin.create({
  selectedSeedColor: 'rgb(65, 65, 65)',
  tint: 0.8,
  minimumTint: 0,
  maximumTint: 0.66,
  colorScaleType: d3.scale.linear,
  renderVars: ['colorScale'],
  colorRange: Ember.computed(function() {
    var interpolate, maxTintRGB, minTintRGB, seedColor;
    seedColor = this.get('selectedSeedColor');
    interpolate = d3.interpolateRgb(seedColor, 'rgb(255,255,255)');
    minTintRGB = interpolate(this.get('minimumTint'));
    maxTintRGB = interpolate(this.get('maximumTint'));
    return [d3.rgb(minTintRGB), d3.rgb(maxTintRGB)];
  }).property('selectedSeedColor', 'minimumTint', 'maximumTint'),
  colorScale: Ember.computed(function() {
    return this.get('colorScaleType')().range(this.get('colorRange'));
  }).property('colorRange', 'colorScaleType'),
  secondaryMinimumTint: 0.4,
  secondaryMaximumTint: 0.85,
  secondaryColorScaleType: d3.scale.linear,
  secondaryColorRange: Ember.computed(function() {
    var interpolate, maxTintRGB, minTintRGB, seedColor;
    seedColor = this.get('selectedSeedColor');
    interpolate = d3.interpolateRgb(seedColor, 'rgb(255,255,255)');
    minTintRGB = interpolate(this.get('secondaryMinimumTint'));
    maxTintRGB = interpolate(this.get('secondaryMaximumTint'));
    return [d3.rgb(minTintRGB), d3.rgb(maxTintRGB)];
  }).property('selectedSeedColor', 'secondaryMinimumTint', 'secondaryMaximumTint'),
  secondaryColorScale: Ember.computed(function() {
    return this.get('secondaryColorScaleType')().range(this.get('secondaryColorRange'));
  }).property('secondaryColorRange', 'secondaryColorScaleType'),
  leastTintedColor: Ember.computed(function() {
    return this.get('colorRange')[0];
  }).property('colorRange.@each'),
  mostTintedColor: Ember.computed(function() {
    return this.get('colorRange')[1];
  }).property('colorRange.@each'),
  numColorSeries: 1,
  getSeriesColor: Ember.computed(function() {
    var numColorSeries,
      _this = this;
    numColorSeries = this.get('numColorSeries');
    return function(d, i) {
      if (numColorSeries === 1) {
        return _this.get('colorRange')[0];
      } else {
        return _this.get('colorScale')(i / (numColorSeries - 1));
      }
    };
  }).property('numColorSeries', 'colorRange', 'colorScale'),
  numSecondaryColorSeries: 1,
  getSecondarySeriesColor: Ember.computed(function() {
    var numSecondaryColorSeries,
      _this = this;
    numSecondaryColorSeries = this.get('numSecondaryColorSeries');
    return function(d, i) {
      if (numSecondaryColorSeries === 1) {
        return _this.get('secondaryColorRange')[0];
      } else {
        return _this.get('secondaryColorScale')(i / (numSecondaryColorSeries - 1));
      }
    };
  }).property('numSecondaryColorSeries', 'secondaryColorRange', 'secondaryColorScale')
});


})();

(function() {


Ember.Charts.AxesMixin = Ember.Mixin.create({
  minXTicks: 3,
  minYTicks: 3,
  tickSpacing: 40,
  numXTicks: Ember.computed(function() {
    var calculatedTicks;
    calculatedTicks = Math.floor(this.get('graphicWidth') / this.get('tickSpacing'));
    return Math.max(calculatedTicks, this.get('minXTicks'));
  }).property('graphicWidth', 'tickSpacing', 'minXTicks'),
  numYTicks: Ember.computed(function() {
    var calculatedTicks;
    calculatedTicks = Math.floor(this.get('graphicHeight') / this.get('tickSpacing'));
    return Math.max(calculatedTicks, this.get('minYTicks'));
  }).property('graphicHeight', 'tickSpacing', 'minYTicks')
});


})();

(function() {


Ember.Charts.FloatingTooltipMixin = Ember.Mixin.create({
  tooltipId: Ember.computed(function() {
    return this.get('elementId') + '_tooltip';
  }),
  tooltipWidth: 40,
  tooltipValueDisplayName: 'Value',
  showTooltip: function(content, event) {
    var $ttid;
    $ttid = this.get('$tooltip');
    $ttid.html(content);
    $ttid.show();
    return this.updatePosition(event);
  },
  hideTooltip: function() {
    return this.get('$tooltip').hide();
  },
  updatePosition: function(event) {
    var $tooltipId, curX, curY, height, minTooltipLeft, minTooltipTop, tooltipLeft, tooltipTop, width, windowScrollLeft, windowScrollTop, xOffset, yOffset;
    $tooltipId = this.get('$tooltip');
    xOffset = 10;
    yOffset = 10;
    width = $tooltipId.width();
    height = $tooltipId.height();
    windowScrollTop = $(window).scrollTop();
    windowScrollLeft = $(window).scrollLeft();
    curX = event.clientX + windowScrollLeft;
    curY = event.clientY + windowScrollTop;
    tooltipLeft = curX + ((curX - windowScrollLeft + xOffset * 2 + width) > $(window).width() ? -(width + xOffset * 2) : xOffset);
    tooltipTop = curY + ((curY - windowScrollTop + yOffset * 2 + height) > $(window).height() ? -(height + yOffset * 2) : yOffset);
    minTooltipLeft = windowScrollLeft + xOffset;
    minTooltipTop = windowScrollTop + yOffset;
    if (tooltipLeft < minTooltipLeft) {
      tooltipLeft = minTooltipLeft;
    }
    if (tooltipTop < windowScrollTop + yOffset) {
      tooltipTop = minTooltipTop;
    }
    return $tooltipId.css('top', tooltipTop + 'px').css('left', tooltipLeft + 'px');
  },
  didInsertElement: function() {
    this._super();
    $("body").append("<div class='chart-float-tooltip' id='" + (this.get('tooltipId')) + "'></div>");
    return this.hideTooltip();
  },
  willDestroyElement: function() {
    this._super();
    return this.get('$tooltip').remove();
  },
  widthDidChange: function() {
    return this.get('$tooltip').css('width', this.get('tooltipWidth'));
  }
}, 'tooltipWidth', {
  $tooltip: Ember.computed(function() {
    return $("#" + (this.get('tooltipId')));
  }).volatile()
});


})();

(function() {


Ember.Charts.HasTimeSeriesRule = Ember.Mixin.create({
  lineMarkerTolerance: 60 * 1000,
  mousePosition: Ember.computed(function() {
    if (!d3.event) {
      return null;
    }
    return d3.mouse(this.get('$viewport'));
  }).volatile(),
  isEventWithinValidRange: Ember.computed(function() {
    var inX, inY, x, xRange, y, yRange, _ref;
    xRange = this.get('xRange');
    yRange = this.get('yRange');
    _ref = this.get('mousePosition'), x = _ref[0], y = _ref[1];
    inX = (d3.min(xRange) < x && x < d3.max(xRange));
    inY = (d3.min(yRange) < y && y < d3.max(yRange));
    return inX && inY;
  }).volatile(),
  lineMarkerData: Ember.computed(function() {
    var invXScale, invYScale, lineMarkerTolerance, markerData, mousePosition, timeX;
    mousePosition = this.get('mousePosition');
    if (Ember.isEmpty(mousePosition)) {
      return [];
    }
    invXScale = this.get('xTimeScale').invert;
    invYScale = this.get('yScale').invert;
    lineMarkerTolerance = this.get('lineMarkerTolerance');
    timeX = invXScale(mousePosition[0]);
    markerData = [];
    this.get('viewport').selectAll('path.line').each(function(d, i) {
      var iterations, maxIterations, point, searchEnd, searchLen, searchStart;
      iterations = 0;
      maxIterations = 25;
      searchStart = 0;
      searchEnd = this.getTotalLength();
      searchLen = searchEnd / 2;
      point = this.getPointAtLength(searchLen);
      while (Math.abs(timeX - invXScale(point.x)) > lineMarkerTolerance && maxIterations > ++iterations) {
        if (timeX < invXScale(point.x)) {
          searchEnd = searchLen;
        } else {
          searchStart = searchLen;
        }
        searchLen = (searchStart + searchEnd) / 2;
        point = this.getPointAtLength(searchLen);
      }
      return markerData.push({
        x: point.x,
        y: point.y,
        group: d.group,
        value: invYScale(point.y),
        time: invXScale(point.x),
        path: this
      });
    });
    return markerData;
  }).volatile(),
  rule: Ember.computed(function() {
    var rule;
    rule = this.get('viewport').select('.rule');
    if (rule.empty()) {
      return this.get('viewport').insert('line', '.series').style('stroke-width', 0).attr('class', 'rule');
    } else {
      return rule;
    }
  }).volatile(),
  lineMarkers: Ember.computed(function() {
    return this.get('viewport').selectAll('.line-marker').data(this.get('lineMarkerData'));
  }).volatile(),
  updateLineMarkers: function() {
    var hideDetails, lineMarkers, showDetails;
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    lineMarkers = this.get('lineMarkers');
    lineMarkers.enter().append('path').on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    }).attr({
      "class": 'line-marker',
      fill: this.get('getLineColor'),
      d: d3.svg.symbol().size(50).type('circle')
    });
    lineMarkers.exit().remove();
    lineMarkers.attr({
      transform: function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }
    });
    return lineMarkers.style({
      'stroke-width': function(d) {
        return d3.select(d.path).attr('stroke-width');
      }
    });
  },
  updateRule: function() {
    var x, zeroDisplacement;
    zeroDisplacement = 1;
    x = (this.get('mousePosition') || [0])[0];
    return this.get('rule').attr({
      x1: x,
      x2: x,
      y0: 0,
      y1: this.get('graphicHeight') - zeroDisplacement
    });
  },
  didInsertElement: function() {
    var _this = this;
    this._super();
    this.get('hideRule')();
    return d3.select(this.$('svg')[0]).on('mousemove', function() {
      if (_this.get('isEventWithinValidRange')) {
        _this.get('showRule')();
        Ember.run(_this, _this.get('updateRule'));
        return Ember.run(_this, _this.get('updateLineMarkers'));
      } else {
        return _this.get('hideRule')();
      }
    });
  },
  isRuleShown: false,
  showRule: Ember.computed(function() {
    var _this = this;
    return function(d) {
      if (!_this.get('hasLineData')) {
        return;
      }
      _this.get('rule').style('stroke-width', 1.5);
      return _this.get('lineMarkers').style('opacity', 1);
    };
  }),
  hideRule: Ember.computed(function() {
    var _this = this;
    return function(d) {
      _this.get('rule').style('stroke-width', 0);
      return _this.get('lineMarkers').style('opacity', 0);
    };
  })
});


})();

(function() {


Ember.Charts.TimeSeriesLabeler = Ember.Mixin.create({
  selectedInterval: 'M',
  maxNumberOfLabels: 10,
  numberOfMinorTicks: Ember.computed(function() {
    var allTicks, findTick, firstIndex, labelledTicks, secondIndex, start, stop, _ref;
    labelledTicks = this.get('labelledTicks');
    _ref = this.get('xDomain'), start = _ref[0], stop = _ref[1];
    allTicks = (function() {
      switch (this.get('selectedInterval')) {
        case 'years':
        case 'Y':
          return d3.time.years(start, stop);
        case 'quarters':
        case 'Q':
          return d3.time.months(start, stop, 3);
        case 'months':
        case 'M':
          return this.monthsBetween(start, stop);
        case 'weeks':
        case 'W':
          return this.weeksBetween(start, stop);
      }
    }).call(this);
    if (labelledTicks.length < 2) {
      return 0;
    }
    findTick = function(tick) {
      return function(x) {
        return +x === +tick;
      };
    };
    secondIndex = _.findIndex(allTicks, findTick(labelledTicks[1]));
    firstIndex = _.findIndex(allTicks, findTick(labelledTicks[0]));
    return secondIndex - firstIndex - 1;
  }).property('xDomain', 'selectedInterval'),
  labelledTicks: Ember.computed(function() {
    var domain;
    domain = this.get('xDomain');
    return this.get('getLabelledTicks')(domain[0], domain[1]);
  }).property('xDomain'),
  labelledYears: function(start, stop) {
    var skipVal, years;
    years = d3.time.years(start, stop);
    if (years.length > this.get('maxNumberOfLabels')) {
      skipVal = Math.ceil(years.length / this.get('maxNumberOfLabels'));
      return d3.time.years(start, stop, skipVal);
    } else {
      return years;
    }
  },
  labelledQuarters: function(start, stop) {
    var quarters;
    quarters = d3.time.months(start, stop, 3);
    if (quarters.length > this.get('maxNumberOfLabels')) {
      return this.labelledYears(start, stop);
    } else {
      return quarters;
    }
  },
  monthsBetween: function(start, stop, skip) {
    if (skip == null) {
      skip = 1;
    }
    return d3.time.months(start, stop).filter(function(d, i) {
      return !(i % skip);
    });
  },
  labelledMonths: function(start, stop) {
    var months, skipVal;
    months = this.monthsBetween(start, stop);
    if (months.length > this.get('maxNumberOfLabels')) {
      skipVal = Math.ceil(months.length / this.get('maxNumberOfLabels'));
      return this.monthsBetween(start, stop, skipVal);
    } else {
      return months;
    }
  },
  weeksBetween: function(start, stop, skip) {
    if (skip == null) {
      skip = 1;
    }
    return d3.time.weeks(start, stop).filter(function(d, i) {
      return !(i % skip);
    });
  },
  labelledWeeks: function(start, stop) {
    var skipVal, weeks;
    weeks = this.weeksBetween(start, stop);
    if (weeks.length > this.get('maxNumberOfLabels')) {
      skipVal = Math.ceil(weeks.length / this.get('maxNumberOfLabels'));
      return this.weeksBetween(start, stop, skipVal);
    } else {
      return weeks;
    }
  },
  getLabelledTicks: Ember.computed(function() {
    var _this = this;
    switch (this.get('selectedInterval')) {
      case 'years':
      case 'Y':
        return function(start, stop) {
          return _this.labelledYears(start, stop);
        };
      case 'quarters':
      case 'Q':
        return function(start, stop) {
          return _this.labelledQuarters(start, stop);
        };
      case 'months':
      case 'M':
        return function(start, stop) {
          return _this.labelledMonths(start, stop);
        };
      case 'weeks':
      case 'W':
        return function(start, stop) {
          return _this.labelledWeeks(start, stop);
        };
      case 'days':
      case 'D':
        return d3.time.days;
      default:
        return d3.time.years;
    }
  }).property('maxNumberOfLabels', 'selectedInterval'),
  quarterFormat: function(d) {
    var prefix, suffix;
    prefix = (function() {
      switch (d.getMonth() % 12) {
        case 0:
          return 'Q1';
        case 3:
          return 'Q2';
        case 6:
          return 'Q3';
        case 9:
          return 'Q4';
      }
    })();
    suffix = d3.time.format('%Y')(d);
    return prefix + ' ' + suffix;
  },
  formattedTime: Ember.computed(function() {
    switch (this.get('selectedInterval')) {
      case 'years':
      case 'Y':
        return d3.time.format('%Y');
      case 'quarters':
      case 'Q':
        return this.quarterFormat;
      case 'months':
      case 'M':
        return d3.time.format("%b '%y");
      case 'weeks':
      case 'W':
        return d3.time.format('%-m/%-d/%y');
      case 'days':
      case 'D':
        return d3.time.format('%a');
      default:
        return d3.time.format('%Y');
    }
  }).property('selectedInterval')
});


})();

(function() {


Ember.Charts.Legend = Ember.Mixin.create({
  legendTopPadding: 10,
  legendItemHeight: 18,
  minLegendItemWidth: 120,
  maxLegendItemWidth: 160,
  legendIconRadius: 9,
  legendLabelPadding: 10,
  legendWidth: Ember.computed.alias('width'),
  legendHeight: Ember.computed(function() {
    return this.get('numLegendRows') * this.get('legendItemHeight');
  }).property('numLegendRows', 'legendItemHeight'),
  legendItemWidth: Ember.computed(function() {
    var itemWidth;
    itemWidth = this.get('legendWidth') / this.get('legendItems.length');
    if (itemWidth < this.get('minLegendItemWidth')) {
      return this.get('minLegendItemWidth');
    }
    if (itemWidth > this.get('maxLegendItemWidth')) {
      return this.get('maxLegendItemWidth');
    }
    return itemWidth;
  }).property('legendWidth', 'minLegendItemWidth', 'maxLegendItemWidth', 'legendItems.length'),
  numLegendItemsPerRow: Ember.computed(function() {
    return Math.floor(this.get('legendWidth') / this.get('legendItemWidth'));
  }).property('legendWidth', 'legendItemWidth'),
  numLegendRows: Ember.computed(function() {
    return Math.ceil(this.get('legendItems.length') / this.get('numLegendItemsPerRow'));
  }).property('legendItems.length', 'numLegendItemsPerRow'),
  legendLabelWidth: Ember.computed(function() {
    return this.get('legendItemWidth') - this.get('legendIconRadius') - this.get('legendLabelPadding') * 2;
  }).property('legendItemWidth', 'legendIconRadius', 'legendLabelPadding'),
  legendChartPadding: 0,
  legendAttrs: Ember.computed(function() {
    var dx, dy, offsetToLegend;
    dx = this.get('outerWidth') / 2;
    offsetToLegend = this.get('legendChartPadding') + this.get('legendTopPadding');
    dy = this.get('graphicBottom') + offsetToLegend;
    return {
      transform: "translate(" + dx + ", " + dy + ")"
    };
  }).property('outerWidth', 'graphicBottom', 'legendTopPadding', 'legendChartPadding'),
  legendItemAttrs: Ember.computed(function() {
    var isSingleRow, legendItemHeight, legendItemWidth, numAllItems, numItemsPerRow,
      _this = this;
    legendItemWidth = this.get('legendItemWidth');
    legendItemHeight = this.get('legendItemHeight');
    numItemsPerRow = this.get('numLegendItemsPerRow');
    numAllItems = this.get('legendItems.length');
    isSingleRow = this.get('numLegendRows') === 1;
    return {
      "class": 'legend-item',
      width: legendItemWidth,
      'stroke-width': 0,
      transform: function(d, i) {
        var col, dx, dy, items, row;
        col = i % numItemsPerRow;
        row = Math.floor(i / numItemsPerRow);
        items = isSingleRow ? numAllItems : numItemsPerRow;
        dx = col * legendItemWidth - items / 2 * legendItemWidth + 1 / 2;
        dy = row * legendItemHeight + legendItemHeight / 2;
        return "translate(" + dx + ", " + dy + ")";
      }
    };
  }).property('legendItemWidth', 'legendItemHeight', 'numLegendItemsPerRow', 'legendItems.length', 'numLegendRows'),
  legendIconAttrs: Ember.computed(function() {
    var iconRadius, legendItemHeight;
    iconRadius = this.get('legendIconRadius');
    legendItemHeight = this.get('legendItemHeight');
    return {
      d: function(d, i) {
        if (d.icon(d) === 'line') {
          return "M " + (-iconRadius) + " 0 L " + iconRadius + " 0";
        } else {
          return d3.svg.symbol().type(d.icon(d, i)).size(Math.pow(iconRadius, 2))(d, i);
        }
      },
      fill: function(d, i) {
        if (_.isFunction(d.fill)) {
          return d.fill(d, i);
        } else {
          return d.fill;
        }
      },
      stroke: function(d, i) {
        if (_.isFunction(d.stroke)) {
          return d.stroke(d, i);
        } else {
          return d.stroke;
        }
      },
      'stroke-width': function(d) {
        if (!d.width) {
          return 1.5;
        }
        if (_.isFunction(d.width)) {
          return d.width(d, i);
        } else {
          return d.width;
        }
      },
      'stroke-dasharray': function(d) {
        if (d.dotted) {
          return '2,2';
        }
      }
    };
  }).property('legendIconRadius', 'legendItemHeight'),
  legendLabelAttrs: Ember.computed(function() {
    return {
      x: this.get('legendIconRadius') / 2 + this.get('legendLabelPadding'),
      y: '.35em'
    };
  }).property('legendIconRadius', 'legendLabelPadding', 'legendItemHeight'),
  showLegendDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      var content, formatXValue, formatYValue;
      d3.select(element).classed('hovered', true);
      if (data.selector) {
        _this.get('viewport').selectAll(data.selector).classed('hovered', true);
      }
      content = "<span class=\"tip-label\">" + data.label + "</span>";
      if (data.xValue != null) {
        formatXValue = _this.get('formatXValue');
        formatYValue = _this.get('formatYValue');
        content += "<span class=\"name\">" + (_this.get('tooltipXValueDisplayName')) + ": </span>";
        content += "<span class=\"value\">" + (formatXValue(data.xValue)) + "</span><br/>";
        content += "<span class=\"name\">" + (_this.get('tooltipYValueDisplayName')) + ": </span>";
        content += "<span class=\"value\">" + (formatYValue(data.yValue)) + "</span>";
      }
      return _this.showTooltip(content, d3.event);
    };
  }),
  hideLegendDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      d3.select(element).classed('hovered', false);
      if (data.selector) {
        _this.get('viewport').selectAll(data.selector).classed('hovered', false);
      }
      return _this.hideTooltip();
    };
  }),
  clearLegend: function() {
    return this.get('viewport').select('.legend-container').remove();
  },
  legend: Ember.computed(function() {
    var legend;
    legend = this.get('viewport').select('.legend-container');
    if (legend.empty()) {
      return this.get('viewport').append('g').attr('class', 'legend-container');
    } else {
      return legend;
    }
  }).volatile(),
  drawLegend: function() {
    var hideLegendDetails, isShowingTotal, labelTrimmer, labels, legend, legendIconAttrs, legendItems, legendLabelWidth, showLegendDetails, totalPointShape;
    this.clearLegend();
    legend = this.get('legend');
    legend.attr(this.get('legendAttrs'));
    showLegendDetails = this.get('showLegendDetails');
    hideLegendDetails = this.get('hideLegendDetails');
    legendItems = legend.selectAll('.legend-item').data(this.get('legendItems')).enter().append('g').attr(this.get('legendItemAttrs')).on("mouseover", function(d, i) {
      return showLegendDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideLegendDetails(d, i, this);
    });
    legendIconAttrs = this.get('legendIconAttrs');
    isShowingTotal = this.get('isShowingTotal');
    totalPointShape = this.get('totalPointShape');
    legendItems.each(function(d, i) {
      var sel;
      sel = d3.select(this);
      if ((i === 0) && isShowingTotal) {
        return sel.append('g').attr('class', 'icon').call(totalPointShape);
      } else {
        return d3.select(this).append('path').attr('class', 'icon').attr(legendIconAttrs);
      }
    });
    legendLabelWidth = this.get('legendLabelWidth');
    labelTrimmer = Ember.Charts.Helpers.LabelTrimmer.create({
      getLabelSize: function(d) {
        return legendLabelWidth;
      },
      getLabelText: function(d) {
        return d.label;
      }
    });
    return labels = legendItems.append('text').style('text-anchor', 'start').text(function(d) {
      return d.label;
    }).attr(this.get('legendLabelAttrs')).call(labelTrimmer.get('trim'));
  }
});


})();

(function() {


Ember.Charts.PieLegend = Ember.Mixin.create({
  legendVerticalPadding: 30,
  legendHorizontalPadding: Ember.computed(function() {
    return 0.2 * this.get('outerWidth');
  }).property('outerWidth'),
  maxLabelHeight: Ember.computed(function() {
    return 0.05 * this.get('outerHeight');
  }).property('outerWidth', 'outerHeight'),
  legendWidth: Ember.computed(function() {
    return this.get('outerWidth') - this.get('legendHorizontalPadding');
  }).property('outerWidth', 'legendHorizontalPadding'),
  legendHeight: Ember.computed(function() {
    return this.get('maxLabelHeight') + this.get('legendVerticalPadding') * 2;
  }).property('maxLabelHeight', 'legendVerticalPadding'),
  legendAttrs: Ember.computed(function() {
    var dx, dy;
    dx = 0;
    dy = this.get('outerHeight') / 2;
    return {
      transform: "translate(" + dx + ", " + dy + ")"
    };
  }).property('outerHeight'),
  legendLabelAttrs: Ember.computed(function() {
    return {
      style: "text-anchor:middle;",
      y: '-.35em'
    };
  }),
  legend: Ember.computed(function() {
    var legend;
    legend = this.get('viewport').select('.legend');
    if (legend.empty()) {
      return this.get('viewport').append('g').attr('class', 'legend');
    } else {
      return legend;
    }
  }).volatile(),
  clearLegend: function() {
    return this.get('viewport').select('.legend .labels').remove();
  },
  drawLegend: function() {
    var currentText, labelStrings, labelTop, labels, legend, nextLabel, otherSlice, row, rowNode, _i, _len, _ref;
    this.clearLegend();
    legend = this.get('legend').attr(this.get('legendAttrs'));
    otherSlice = this.get('viewport').select('.other-slice');
    if (!otherSlice.empty()) {
      legend.on('mouseover', function() {
        otherSlice.classed('hovered', true);
        return legend.classed('hovered', true);
      }).on('mouseout', function() {
        otherSlice.classed('hovered', false);
        return legend.classed('hovered', false);
      });
    }
    labels = legend.append('g').attr('class', 'labels');
    labelStrings = this.get('legendItems').map(function(d) {
      if (d.percent != null) {
        return "" + d.label + " (" + d.percent + "%)";
      } else {
        return d.label;
      }
    });
    row = labels.append('text').text("Other: " + labelStrings[0]).attr(this.get('legendLabelAttrs'));
    labelTop = 0;
    _ref = labelStrings.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nextLabel = _ref[_i];
      currentText = row.text();
      row.text("" + currentText + ", " + nextLabel);
      rowNode = row.node();
      if (rowNode.getBBox().width > this.get('legendWidth')) {
        if (labelTop + rowNode.getBBox().height > this.get('maxLabelHeight')) {
          row.text("" + currentText + ", ...");
          break;
        } else {
          row.text("" + currentText + ",");
          labelTop += rowNode.getBBox().height;
          row = labels.append('text').text(nextLabel).attr(this.get('legendLabelAttrs')).attr('dy', labelTop);
        }
      }
    }
    return labels.attr('transform', "translate(0, " + (-labelTop) + ")");
  }
});


})();

(function() {


Ember.Charts.ChartComponent = Ember.Component.extend(Ember.Charts.Colorable, Ember.AddeparMixins.ResizeHandlerMixin, {
  templateName: 'chart',
  classNames: ['chart-frame', 'scroll-y'],
  horizontalMargin: 30,
  verticalMargin: 30,
  marginRight: Ember.computed.alias('horizontalMargin'),
  marginLeft: Ember.computed.alias('horizontalMargin'),
  marginTop: Ember.computed.alias('verticalMargin'),
  marginBottom: Ember.computed.alias('verticalMargin'),
  defaultOuterHeight: 500,
  defaultOuterWidth: 700,
  outerHeight: Ember.computed.alias('defaultOuterHeight'),
  outerWidth: Ember.computed.alias('defaultOuterWidth'),
  width: Ember.computed(function() {
    return this.get('outerWidth') - this.get('marginLeft') - this.get('marginRight');
  }).property('outerWidth', 'marginLeft', 'marginRight'),
  height: Ember.computed(function() {
    return this.get('outerHeight') - this.get('marginBottom') - this.get('marginTop');
  }).property('outerHeight', 'marginBottom', 'marginTop'),
  $viewport: Ember.computed(function() {
    return this.$('.chart-viewport')[0];
  }),
  viewport: Ember.computed(function() {
    return d3.select(this.get('$viewport'));
  }),
  transformViewport: Ember.computed(function() {
    return "translate(" + (this.get('marginLeft')) + "," + (this.get('marginTop')) + ")";
  }).property('marginLeft', 'marginTop'),
  labelPadding: 10,
  labelWidth: 30,
  labelHeight: 15,
  labelWidthOffset: Ember.computed(function() {
    return this.get('labelWidth') + this.get('labelPadding');
  }).property('labelWidth', 'labelPadding'),
  labelHeightOffset: Ember.computed(function() {
    return this.get('labelHeight') + this.get('labelPadding');
  }).property('labelHeight', 'labelPadding'),
  graphicTop: 0,
  graphicLeft: 0,
  graphicWidth: Ember.computed.alias('width'),
  graphicHeight: Ember.computed.alias('height'),
  graphicBottom: Ember.computed(function() {
    return this.get('graphicTop') + this.get('graphicHeight');
  }).property('graphicTop', 'graphicHeight'),
  graphicRight: Ember.computed(function() {
    return this.get('graphicLeft') + this.get('graphicWidth');
  }).property('graphicLeft', 'graphicWidth'),
  hasNoData: Ember.computed(function() {
    return Ember.isEmpty(this.get('finishedData'));
  }).property('finishedData'),
  concatenatedProperties: ['renderVars'],
  renderVars: ['finishedData', 'width', 'height', 'margin'],
  init: function() {
    var renderVar, _i, _len, _ref, _results,
      _this = this;
    this._super();
    _ref = this.get('renderVars').uniq();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      renderVar = _ref[_i];
      _results.push(this.addObserver(renderVar, function() {
        return Ember.run.once(_this, _this.get('draw'));
      }));
    }
    return _results;
  },
  didInsertElement: function() {
    this._super();
    this._updateDimensions();
    return Ember.run.once(this, this.get('draw'));
  },
  onResizeEnd: function() {
    return this._updateDimensions();
  },
  _updateDimensions: function() {
    this.set('defaultOuterHeight', this.$().height());
    return this.set('defaultOuterWidth', this.$().width());
  },
  clearChart: function() {
    return this.$('.chart-viewport').children().remove();
  },
  draw: function() {
    if (this.get('state') !== 'inDOM') {
      return;
    }
    if (this.get('hasNoData')) {
      return this.clearChart();
    } else {
      return this.drawChart();
    }
  }
});


})();

(function() {


Ember.Charts.HorizontalBarComponent = Ember.Charts.ChartComponent.extend(Ember.Charts.FloatingTooltipMixin, {
  classNames: ['chart-horizontal-bar'],
  formatValue: d3.format('.2s'),
  formatValueLong: d3.format(',.r'),
  selectedSortType: 'value',
  defaultOuterHeight: 500,
  labelWidth: Ember.computed(function() {
    return 0.25 * this.get('outerWidth');
  }).property('outerWidth'),
  labelPadding: 20,
  barPadding: 0.2,
  maxBarThickness: 60,
  minBarThickness: 20,
  sortedData: Ember.computed(function() {
    var comparator, data, sortFunc, sortType;
    data = this.get('data');
    if (Ember.isEmpty(data)) {
      return [];
    }
    sortType = this.get('selectedSortType');
    sortFunc = (function() {
      var _this = this;
      switch (sortType) {
        case 'value':
          return function(d) {
            return -d.value;
          };
        case 'label':
          return function(d) {
            return d.label;
          };
      }
    }).call(this);
    comparator = function(a, b) {
      if (sortFunc(a) < sortFunc(b)) {
        return -1;
      } else if (sortFunc(a) > sortFunc(b)) {
        return 1;
      } else {
        return 0;
      }
    };
    return data.sort(comparator);
  }).property('data.@each', 'selectedSortType'),
  finishedData: Ember.computed.alias('sortedData'),
  minOuterHeight: Ember.computed(function() {
    var minBarSpace;
    minBarSpace = this.get('numBars') * this.get('minBarThickness');
    return minBarSpace + this.get('marginTop') + this.get('marginBottom');
  }).property('numBars', 'minBarThickness', 'marginTop', 'marginBottom'),
  maxOuterHeight: Ember.computed(function() {
    var maxBarSpace;
    maxBarSpace = this.get('numBars') * this.get('maxBarThickness');
    return maxBarSpace + this.get('marginTop') + this.get('marginBottom');
  }).property('numBars', 'maxBarThickness', 'marginTop', 'marginBottom'),
  outerHeight: Ember.computed(function() {
    var maxMinDefault;
    maxMinDefault = d3.max([this.get('defaultOuterHeight'), this.get('minOuterHeight')]);
    return d3.min([maxMinDefault, this.get('maxOuterHeight')]);
  }).property('minOuterHeight', 'maxOuterHeight', 'defaultOuterHeight'),
  marginTop: Ember.computed.alias('labelPadding'),
  marginBottom: Ember.computed.alias('labelPadding'),
  horizontalMargin: Ember.computed(function() {
    return this.get('labelWidth') + this.get('labelPadding') * 2;
  }).property('labelWidth', 'labelPadding'),
  numBars: Ember.computed.alias('finishedData.length'),
  xDomain: Ember.computed(function() {
    var absMax, maxValue, minValue, values,
      _this = this;
    values = this.get('finishedData').map(function(d) {
      return d.value;
    });
    minValue = d3.min(values);
    maxValue = d3.max(values);
    if (minValue < 0) {
      absMax = Math.max(-minValue, maxValue);
      return [-absMax, absMax];
    } else {
      return [0, maxValue];
    }
  }).property('finishedData', 'xDomainPadding'),
  xScale: Ember.computed(function() {
    return d3.scale.linear().domain(this.get('xDomain')).range([0, this.get('width')]).nice();
  }).property('width', 'xDomain'),
  yScale: Ember.computed(function() {
    return d3.scale.ordinal().domain(d3.range(this.get('numBars'))).rangeRoundBands([0, this.get('height')], this.get('barPadding'));
  }).property('height', 'barPadding'),
  barThickness: Ember.computed(function() {
    return this.get('yScale').rangeBand();
  }).property('yScale'),
  showDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      var content, formatValue;
      d3.select(element).classed('hovered', true);
      formatValue = _this.get('formatValue');
      content = "<span class=\"tip-label\">" + data.label + "</span>";
      content += "<span class=\"name\">" + (_this.get('tooltipValueDisplayName')) + ": </span>";
      content += "<span class=\"value\">" + (formatValue(data.value)) + "</span>";
      return _this.showTooltip(content, d3.event);
    };
  }),
  hideDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      d3.select(element).classed('hovered', false);
      return _this.hideTooltip();
    };
  }),
  groupAttrs: Ember.computed(function() {
    var xScale, yScale,
      _this = this;
    xScale = this.get('xScale');
    yScale = this.get('yScale');
    return {
      transform: function(d, i) {
        var value;
        value = Math.min(0, d.value);
        return "translate(" + (xScale(value)) + ", " + (yScale(i)) + ")";
      }
    };
  }).property('xScale', 'yScale'),
  barAttrs: Ember.computed(function() {
    var xScale,
      _this = this;
    xScale = this.get('xScale');
    return {
      width: function(d) {
        return Math.abs(xScale(d.value) - xScale(0));
      },
      height: this.get('barThickness'),
      'stroke-width': 0,
      style: function(d) {
        var color;
        if (d.value < 0) {
          color = _this.get('mostTintedColor');
        } else {
          color = _this.get('leastTintedColor');
        }
        return "fill:" + color;
      }
    };
  }).property('xScale', 'mostTintedColor', 'leastTintedColor', 'barThickness'),
  valueLabelAttrs: Ember.computed(function() {
    var xScale,
      _this = this;
    xScale = this.get('xScale');
    return {
      x: function(d) {
        if (d.value < 0) {
          return -_this.get('labelPadding');
        } else {
          return xScale(d.value) - xScale(0) + _this.get('labelPadding');
        }
      },
      y: this.get('barThickness') / 2,
      dy: '.35em',
      'text-anchor': function(d) {
        if (d.value < 0) {
          return 'end';
        } else {
          return 'start';
        }
      },
      'stroke-width': 0
    };
  }).property('xScale', 'barThickness', 'labelPadding'),
  groupLabelAttrs: Ember.computed(function() {
    var xScale,
      _this = this;
    xScale = this.get('xScale');
    return {
      x: function(d) {
        if (d.value < 0) {
          return xScale(0) - xScale(d.value) + _this.get('labelPadding');
        } else {
          return -_this.get('labelPadding');
        }
      },
      y: this.get('barThickness') / 2,
      dy: '.35em',
      'text-anchor': function(d) {
        if (d.value < 0) {
          return 'start';
        } else {
          return 'end';
        }
      },
      'stroke-width': 0
    };
  }).property('xScale', 'barThickness', 'labelPadding'),
  axisAttrs: Ember.computed(function() {
    var xScale;
    xScale = this.get('xScale');
    return {
      x1: xScale(0),
      x2: xScale(0),
      y1: 0,
      y2: this.get('height')
    };
  }).property('xScale', 'height'),
  groups: Ember.computed(function() {
    return this.get('viewport').selectAll('.bar').data(this.get('finishedData'));
  }).volatile(),
  yAxis: Ember.computed(function() {
    var yAxis;
    yAxis = this.get('viewport').select('.y.axis line');
    if (yAxis.empty()) {
      return this.get('viewport').insert('g', ':first-child').attr('class', 'y axis').append('line');
    } else {
      return yAxis;
    }
  }).volatile(),
  renderVars: ['barThickness', 'yScale', 'finishedData'],
  drawChart: function() {
    this.updateData();
    this.updateAxes();
    return this.updateGraphic();
  },
  updateData: function() {
    var entering, exiting, groups, hideDetails, showDetails;
    groups = this.get('groups');
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    entering = groups.enter().append('g').attr('class', 'bar').on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    entering.append('rect');
    entering.append('text').attr('class', 'value');
    entering.append('text').attr('class', 'group');
    return exiting = groups.exit().remove();
  },
  updateAxes: function() {
    return this.get('yAxis').attr(this.get('axisAttrs'));
  },
  updateGraphic: function() {
    var groupLabels, groups, labelTrimmer, labelWidth, valueLabels,
      _this = this;
    groups = this.get('groups').attr(this.get('groupAttrs'));
    groups.select('rect').attr(this.get('barAttrs'));
    valueLabels = groups.select('text.value').text(function(d) {
      return _this.get('formatValue')(d.value);
    }).attr(this.get('valueLabelAttrs'));
    labelWidth = this.get('labelWidth');
    labelTrimmer = Ember.Charts.Helpers.LabelTrimmer.create({
      getLabelSize: function(d) {
        return labelWidth;
      },
      getLabelText: function(d) {
        return d.label;
      }
    });
    return groupLabels = groups.select('text.group').text(function(d) {
      return d.label;
    }).attr(this.get('groupLabelAttrs')).call(labelTrimmer.get('trim'));
  }
});

Ember.Handlebars.helper('horizontal-bar-chart', Ember.Charts.HorizontalBarComponent);


})();

(function() {


Ember.Charts.PieComponent = Ember.Charts.ChartComponent.extend(Ember.Charts.PieLegend, Ember.Charts.FloatingTooltipMixin, {
  classNames: ['chart-pie'],
  formatValue: d3.format('.2s'),
  formatValueLong: d3.format(',.r'),
  minSlicePercent: 5,
  maxNumberOfSlices: 8,
  labelWidth: Ember.computed(function() {
    return 0.25 * this.get('outerWidth');
  }).property('outerWidth'),
  maxRadius: 2000,
  sortFunction: Ember.computed(function() {
    switch (this.get('selectedSortType')) {
      case 'value':
        return function(d) {
          return d.percent;
        };
      case 'label':
        return function(d) {
          return d.label;
        };
      default:
        return function(d) {
          return d.percent;
        };
    }
  }).property('selectedSortType'),
  filteredData: Ember.computed(function() {
    var data;
    data = this.get('data');
    if (Ember.isEmpty(data)) {
      return [];
    }
    return data.filter(function(child) {
      return child.value >= 0;
    });
  }).property('data.@each'),
  rejectedData: Ember.computed(function() {
    var data;
    data = this.get('data');
    if (Ember.isEmpty(data)) {
      return [];
    }
    return data.filter(function(child) {
      return child.value < 0;
    });
  }).property('data.@each'),
  sortedData: Ember.computed(function() {
    var data, total;
    data = this.get('filteredData');
    total = data.reduce(function(p, child) {
      return child.value + p;
    }, 0);
    if (total === 0) {
      return [];
    }
    data = data.map(function(d) {
      return {
        label: d.label,
        value: d.value,
        percent: d3.round(100 * d.value / total)
      };
    });
    return _.sortBy(data, this.get('sortFunction'));
  }).property('filteredData', 'sortFunc'),
  sortedDataWithOther: Ember.computed(function() {
    var data, lowPercentIndex, maxNumberOfSlices, minNumberOfSlices, minSlicePercent, otherItems, otherSlice, overflowSlices, slicesLeft,
      _this = this;
    data = _.cloneDeep(this.get('sortedData')).reverse();
    maxNumberOfSlices = this.get('maxNumberOfSlices');
    minNumberOfSlices = this.get('minNumberOfSlices');
    minSlicePercent = this.get('minSlicePercent');
    otherItems = [];
    otherSlice = {
      label: 'Other',
      percent: 0,
      _otherItems: otherItems
    };
    lowPercentIndex = _.indexOf(data, _.find(data, function(d) {
      return d.percent < minSlicePercent;
    }));
    if (lowPercentIndex < 0) {
      lowPercentIndex = data.length;
    } else {
      _.rest(data, lowPercentIndex).forEach(function(d) {
        otherItems.push(d);
        return otherSlice.percent += d.percent;
      });
      if (otherSlice.percent < minSlicePercent) {
        lowPercentIndex -= 1;
        otherItems.push(data[lowPercentIndex]);
        otherSlice.percent += data[lowPercentIndex].percent;
      }
    }
    if (otherSlice.percent > 0) {
      maxNumberOfSlices -= 1;
    }
    slicesLeft = _.first(data, lowPercentIndex);
    overflowSlices = _.rest(slicesLeft, maxNumberOfSlices);
    if (overflowSlices.length > 0) {
      overflowSlices.forEach(function(d) {
        otherItems.push(d);
        return otherSlice.percent += d.percent;
      });
      slicesLeft = _.first(slicesLeft, maxNumberOfSlices);
    }
    if (otherSlice.percent > 0) {
      slicesLeft.push(otherSlice);
    }
    return slicesLeft.reverse();
  }).property('sortedData', 'maxNumberOfSlices', 'minSlicePercent'),
  otherData: Ember.computed(function() {
    var otherItems, otherSlice, _ref;
    otherSlice = _.find(this.get('sortedDataWithOther'), function(d) {
      return d._otherItems;
    });
    otherItems = (_ref = otherSlice != null ? otherSlice._otherItems : void 0) != null ? _ref : [];
    return _.sortBy(otherItems, this.get('sortFunction')).reverse();
  }).property('sortedDataWithOther', 'sortFunction'),
  finishedData: Ember.computed.alias('sortedDataWithOther'),
  horizontalMargin: Ember.computed(function() {
    return this.get('labelPadding') + this.get('labelWidth');
  }).property('labelPadding', 'labelWidth'),
  marginBottom: Ember.computed(function() {
    return this.get('legendHeight');
  }).property('legendHeight'),
  marginTop: Ember.computed(function() {
    return 0.3 * this.get('marginBottom');
  }).property('marginBottom'),
  numSlices: Ember.computed.alias('finishedData.length'),
  startOffset: Ember.computed(function() {
    var data, sum;
    data = this.get('finishedData');
    sum = data.reduce(function(p, d) {
      return d.percent + p;
    }, 0);
    return _.last(data).percent / sum * 2 * Math.PI;
  }).property('finishedData'),
  radius: Ember.computed(function() {
    return d3.min([this.get('maxRadius'), this.get('width') / 2, this.get('height') / 2]);
  }).property('maxRadius', 'width', 'height'),
  labelRadius: Ember.computed(function() {
    return this.get('radius') + this.get('labelPadding');
  }).property('radius', 'labelPadding'),
  getSliceColor: Ember.computed(function() {
    var _this = this;
    return function(d, i) {
      var index, numSlices;
      numSlices = _this.get('numSlices');
      index = numSlices - i - 1;
      if (numSlices !== 1) {
        index = index / (numSlices - 1);
      }
      return _this.get('colorScale')(index);
    };
  }).property('numSlices', 'colorScale'),
  legendItems: Ember.computed(function() {
    return this.get('otherData').concat(this.get('rejectedData'));
  }).property('otherData', 'rejectedData'),
  hasLegend: Ember.computed(function() {
    return this.get('legendItems.length') > 0;
  }).property('legendItems.length'),
  showDetails: Ember.computed(function() {
    var _this = this;
    return function(d, i, element) {
      var content, data, formatValue;
      d3.select(element).classed('hovered', true);
      data = d.data;
      if (data._otherItems) {
        return _this.get('viewport').select('.legend').classed('hovered', true);
      } else {
        formatValue = _this.get('formatValue');
        content = "<span class=\"tip-label\">" + data.label + "</span>";
        content += "<span class=\"name\">" + (_this.get('tooltipValueDisplayName')) + ": </span>";
        content += "<span class=\"value\">" + (formatValue(data.value)) + "</span>";
        return _this.showTooltip(content, d3.event);
      }
    };
  }),
  hideDetails: Ember.computed(function() {
    var _this = this;
    return function(d, i, element) {
      var data;
      d3.select(element).classed('hovered', false);
      data = d.data;
      if (data._otherItems) {
        return _this.get('viewport').select('.legend').classed('hovered', false);
      } else {
        return _this.hideTooltip();
      }
    };
  }),
  transformViewport: Ember.computed(function() {
    var cx, cy;
    cx = this.get('marginLeft') + this.get('width') / 2;
    cy = this.get('marginTop') + this.get('height') / 2;
    return "translate(" + cx + "," + cy + ")";
  }).property('marginLeft', 'marginTop', 'width', 'height'),
  arc: Ember.computed(function() {
    var arc;
    return arc = d3.svg.arc().outerRadius(this.get('radius')).innerRadius(0);
  }).property('radius'),
  collapsedArc: Ember.computed(function() {
    return d3.svg.arc().outerRadius(0);
  }),
  pie: Ember.computed(function() {
    return d3.layout.pie().startAngle(this.get('startOffset')).endAngle(this.get('startOffset') + Math.PI * 2).sort(null).value(function(d) {
      return d.percent;
    });
  }).property('startOffset'),
  groupAttrs: Ember.computed(function() {
    return {
      "class": function(d) {
        if (d.data._otherItems) {
          return 'arc other-slice';
        } else {
          return 'arc';
        }
      }
    };
  }),
  enterSliceAttrs: Ember.computed(function() {
    return {
      d: this.get('collapsedArc'),
      fill: this.get('getSliceColor'),
      stroke: this.get('getSliceColor')
    };
  }).property('collapsedArc', 'getSliceColor'),
  updateSliceAttrs: Ember.computed(function() {
    return {
      d: this.get('arc'),
      fill: this.get('getSliceColor'),
      stroke: this.get('getSliceColor')
    };
  }).property('arc', 'getSliceColor'),
  labelAttrs: Ember.computed(function() {
    var arc, labelRadius, lastXPos, lastYPos, mostTintedColor;
    arc = this.get('arc');
    labelRadius = this.get('labelRadius');
    lastXPos = 0;
    lastYPos = 0;
    if (this.get('numSlices') > 1) {
      return {
        dy: '.35em',
        style: null,
        'stroke-width': 0,
        'text-anchor': function(d) {
          var angle;
          angle = (d.endAngle - d.startAngle) * 0.5 + d.startAngle;
          if ((Math.PI < angle && angle < 2 * Math.PI)) {
            return 'end';
          } else {
            return 'start';
          }
        },
        transform: function(d) {
          var f, isSwitchingSides, labelHeight, labelXPos, labelYPos, labelsTooClose, x, y, _ref;
          _ref = arc.centroid(d), x = _ref[0], y = _ref[1];
          f = function(d) {
            return d / Math.sqrt(x * x + y * y) * labelRadius;
          };
          labelXPos = f(x);
          labelYPos = f(y);
          labelHeight = this.getBBox().height;
          isSwitchingSides = (lastXPos > 0 && 0 > labelXPos) || (lastXPos < 0 && 0 < labelXPos);
          labelsTooClose = Math.abs(labelYPos - lastYPos) < labelHeight;
          if (labelsTooClose && !isSwitchingSides) {
            if (labelYPos < lastYPos) {
              labelYPos = lastYPos - labelHeight;
            } else {
              labelYPos = lastYPos + labelHeight;
            }
          }
          lastXPos = labelXPos;
          lastYPos = labelYPos;
          return "translate(" + labelXPos + "," + labelYPos + ")";
        }
      };
    } else {
      mostTintedColor = this.get('mostTintedColor');
      return {
        dy: '.71em',
        'stroke-width': 0,
        'text-anchor': 'middle',
        transform: null,
        style: "fill:" + mostTintedColor + ";"
      };
    }
  }).property('arc', 'labelRadius', 'numSlices', 'mostTintedColor'),
  groups: Ember.computed(function() {
    var data;
    data = this.get('pie')(this.get('finishedData'));
    return this.get('viewport').selectAll('.arc').data(data);
  }).volatile(),
  renderVars: ['radius', 'labelWidth', 'finishedData'],
  drawChart: function() {
    this.updateData();
    this.updateGraphic();
    if (this.get('hasLegend')) {
      return this.drawLegend();
    } else {
      return this.clearLegend();
    }
  },
  updateData: function() {
    var entering, groups, hideDetails, showDetails;
    groups = this.get('groups');
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    entering = groups.enter().append('g').attr({
      "class": 'arc'
    }).on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    entering.append('path').attr('class', 'slice').attr(this.get('enterSliceAttrs'));
    entering.append('text').attr('class', 'data');
    return groups.exit().remove();
  },
  updateGraphic: function() {
    var groups, labelTrimmer, labelWidth;
    groups = this.get('groups').attr(this.get('groupAttrs'));
    groups.select('path').transition().delay(function(d, i) {
      return 300 + (i * 60);
    }).duration(1000).ease('elastic', 1, 1).attr(this.get('updateSliceAttrs'));
    labelWidth = this.get('labelWidth');
    labelTrimmer = Ember.Charts.Helpers.LabelTrimmer.create({
      getLabelSize: function(d) {
        return labelWidth;
      },
      getLabelText: function(d) {
        return d.data.label;
      }
    });
    return groups.select('text.data').text(function(d) {
      return d.data.label;
    }).attr(this.get('labelAttrs')).call(labelTrimmer.get('trim')).text(function(d) {
      return "" + this.textContent + ", " + d.data.percent + "%";
    });
  }
});

Ember.Handlebars.helper('pie-chart', Ember.Charts.PieComponent);


})();

(function() {


Ember.Charts.VerticalBarComponent = Ember.Charts.ChartComponent.extend(Ember.Charts.Legend, Ember.Charts.FloatingTooltipMixin, Ember.Charts.AxesMixin, {
  classNames: ['chart-vertical-bar'],
  formatValue: d3.format('.2s'),
  formatValueLong: d3.format(',.r'),
  ungroupedSeriesName: 'Other',
  stackBars: false,
  withinGroupPadding: 0,
  betweenGroupPadding: Ember.computed(function() {
    var scale;
    scale = d3.scale.linear().domain([1, 8]).range([1.25, 0.25]).clamp(true);
    return scale(this.get('numBars'));
  }).property('numBars'),
  numBars: Ember.computed(function() {
    return this.get('xBetweenGroupDomain.length') * this.get('xWithinGroupDomain.length') || 0;
  }).property('xBetweenGroupDomain', 'xWithinGroupDomain'),
  maxLabelHeight: 50,
  groupedData: Ember.computed(function() {
    var data,
      _this = this;
    data = this.get('data');
    if (Ember.isEmpty(data)) {
      return [];
    }
    return Ember.Charts.Helpers.groupBy(data, function(d) {
      var _ref;
      return (_ref = d.group) != null ? _ref : _this.get('ungroupedSeriesName');
    });
  }).property('data.@each', 'ungroupedSeriesName'),
  groupNames: Ember.computed(function() {
    var groupName, values, _ref, _results;
    _ref = this.get('groupedData');
    _results = [];
    for (groupName in _ref) {
      values = _ref[groupName];
      _results.push(groupName);
    }
    return _results;
  }).property('groupedData'),
  isGrouped: Ember.computed(function() {
    return this.get('groupNames.length') > 1;
  }).property('groupNames.length'),
  finishedData: Ember.computed(function() {
    var d, groupName, stackedValues, values, y0, _i, _len, _ref, _ref1, _results, _results1;
    if (this.get('isGrouped')) {
      if (Ember.isEmpty(this.get('groupedData'))) {
        return [];
      }
      _ref = this.get('groupedData');
      _results = [];
      for (groupName in _ref) {
        values = _ref[groupName];
        y0 = 0;
        stackedValues = (function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = values.length; _i < _len; _i++) {
            d = values[_i];
            _results1.push({
              y0: y0,
              y1: y0 += Math.max(d.value, 0),
              value: d.value,
              group: d.group,
              label: d.label
            });
          }
          return _results1;
        })();
        _results.push({
          group: groupName,
          values: values,
          stackedValues: stackedValues,
          totalValue: y0
        });
      }
      return _results;
    } else if (this.get('stackBars')) {
      if (Ember.isEmpty(this.get('data'))) {
        return [];
      }
      y0 = 0;
      stackedValues = (function() {
        var _i, _len, _ref1, _results1;
        _ref1 = this.get('data');
        _results1 = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          d = _ref1[_i];
          _results1.push({
            y0: y0,
            y1: y0 += Math.max(d.value, 0)
          });
        }
        return _results1;
      }).call(this);
      return [
        {
          group: this.get('data.firstObject.group'),
          values: this.get('data'),
          stackedValues: stackedValues,
          totalValue: y0
        }
      ];
    } else {
      if (Ember.isEmpty(this.get('data'))) {
        return [];
      }
      _ref1 = this.get('data');
      _results1 = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        d = _ref1[_i];
        _results1.push({
          group: d.label,
          values: [d]
        });
      }
      return _results1;
    }
  }).property('groupedData', 'isGrouped', 'stackBars'),
  labelHeightOffset: Ember.computed(function() {
    var labelSize;
    labelSize = this.get('_shouldRotateLabels') ? this.get('maxLabelHeight') : this.get('labelHeight');
    return labelSize + this.get('labelPadding');
  }).property('_shouldRotateLabels', 'maxLabelHeight', 'labelHeight', 'labelPadding'),
  legendChartPadding: Ember.computed.alias('labelHeightOffset'),
  graphicLeft: Ember.computed.alias('labelWidthOffset'),
  graphicWidth: Ember.computed(function() {
    return this.get('width') - this.get('labelWidthOffset');
  }).property('width', 'labelWidthOffset'),
  graphicHeight: Ember.computed(function() {
    return this.get('height') - this.get('legendHeight') - this.get('legendChartPadding');
  }).property('height', 'legendHeight', 'legendChartPadding'),
  yDomain: Ember.computed(function() {
    var finishedData, max, maxOfGroups, maxOfStacks, min, minOfGroups, minOfStacks;
    finishedData = this.get('finishedData');
    minOfGroups = d3.min(finishedData, function(d) {
      return _.min(d.values.map(function(dd) {
        return dd.value;
      }));
    });
    maxOfGroups = d3.max(finishedData, function(d) {
      return _.max(d.values.map(function(dd) {
        return dd.value;
      }));
    });
    maxOfStacks = d3.max(finishedData, function(d) {
      return d.totalValue;
    });
    minOfStacks = d3.min(finishedData, function(d) {
      return 0;
    });
    if (this.get('stackBars')) {
      min = minOfStacks;
      max = maxOfStacks;
    } else {
      min = minOfGroups;
      max = maxOfGroups;
    }
    if (min > 0) {
      return [0, max];
    }
    if (max < 0) {
      return [min, 0];
    }
    if ((min === max && max === 0)) {
      return [0, 1];
    } else {
      return [min, max];
    }
  }).property('finishedData', 'stackBars'),
  yScale: Ember.computed(function() {
    return d3.scale.linear().domain(this.get('yDomain')).range([this.get('graphicTop') + this.get('graphicHeight'), this.get('graphicTop')]).nice(this.get('numYTicks'));
  }).property('graphicTop', 'graphicHeight', 'yDomain', 'numYTicks'),
  individualBarLabels: Ember.computed(function() {
    var groups;
    groups = _.values(this.get('groupedData')).map(function(g) {
      return _.pluck(g, 'label');
    });
    return _.uniq(_.flatten(groups));
  }).property('groupedData.@each'),
  xBetweenGroupDomain: Ember.computed.alias('groupNames'),
  xWithinGroupDomain: Ember.computed.alias('individualBarLabels'),
  groupWidth: Ember.computed(function() {
    return this.get('xBetweenGroupScale').rangeBand();
  }).property('xBetweenGroupScale'),
  barWidth: Ember.computed(function() {
    return this.get('xWithinGroupScale').rangeBand();
  }).property('xWithinGroupScale'),
  xWithinGroupScale: Ember.computed(function() {
    if (this.get('isGrouped') || this.get('stackBars')) {
      return d3.scale.ordinal().domain(this.get('xWithinGroupDomain')).rangeRoundBands([0, this.get('groupWidth')], this.get('withinGroupPadding') / 2, 0);
    } else {
      return d3.scale.ordinal().domain(this.get('xWithinGroupDomain')).rangeRoundBands([0, this.get('groupWidth')], this.get('betweenGroupPadding') / 2, this.get('betweenGroupPadding') / 2);
    }
  }).property('isGrouped', 'stackBars', 'xWithinGroupDomain', 'groupWidth', 'withinGroupPadding', 'betweenGroupPadding'),
  xBetweenGroupScale: Ember.computed(function() {
    var betweenGroupPadding, labelWidth;
    labelWidth = this.get('labelWidth');
    if (this.get('isGrouped') || this.get('stackBars')) {
      betweenGroupPadding = this.get('betweenGroupPadding');
    } else {
      betweenGroupPadding = 0;
    }
    return d3.scale.ordinal().domain(this.get('xBetweenGroupDomain')).rangeRoundBands([0, this.get('graphicWidth')], betweenGroupPadding / 2, betweenGroupPadding / 2);
  }).property('isGrouped', 'stackBars', 'graphicWidth', 'labelWidth', 'xBetweenGroupDomain', 'betweenGroupPadding'),
  numColorSeries: Ember.computed.alias('individualBarLabels.length'),
  hasLegend: Ember.computed(function() {
    return this.get('stackBars') || this.get('isGrouped') && this.get('legendItems.length') > 1;
  }).property('stackBars', 'isGrouped', 'legendItems.length'),
  legendItems: Ember.computed(function() {
    var getSeriesColor;
    getSeriesColor = this.get('getSeriesColor');
    return this.get('individualBarLabels').map(function(d, i) {
      var color;
      color = getSeriesColor(d, i);
      return {
        label: d,
        fill: color,
        stroke: color,
        icon: function() {
          return 'square';
        },
        selector: ".grouping-" + i
      };
    });
  }).property('individualBarLabels', 'getSeriesColor'),
  showDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      var addValueLine, content, formatValue, isGroup;
      isGroup = Ember.isArray(data.values);
      element = isGroup ? element.parentNode.parentNode : element;
      d3.select(element).classed('hovered', true);
      content = "<span class=\"tip-label\">" + data.group + "</span>";
      formatValue = _this.get('formatValue');
      addValueLine = function(d) {
        content += "<span class=\"name\">" + d.label + ": </span>";
        return content += "<span class=\"value\">" + (formatValue(d.value)) + "</span><br/>";
      };
      if (isGroup) {
        data.values.forEach(addValueLine);
      } else {
        addValueLine(data);
      }
      return _this.showTooltip(content, d3.event);
    };
  }),
  hideDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      if (Ember.isArray(data.values)) {
        element = element.parentNode.parentNode;
      }
      d3.select(element).classed('hovered', false);
      return _this.hideTooltip();
    };
  }),
  groupAttrs: Ember.computed(function() {
    var xBetweenGroupScale,
      _this = this;
    xBetweenGroupScale = this.get('xBetweenGroupScale');
    return {
      transform: function(d) {
        var dx, dy;
        dx = _this.get('graphicLeft') + xBetweenGroupScale(d.group);
        dy = _this.get('graphicTop');
        return "translate(" + dx + ", " + dy + ")";
      }
    };
  }).property('graphicLeft', 'graphicTop', 'xBetweenGroupScale'),
  stackedBarAttrs: Ember.computed(function() {
    var yScale, zeroDisplacement,
      _this = this;
    zeroDisplacement = 1;
    yScale = this.get('yScale');
    return {
      "class": function(d, i) {
        return "grouping-" + i;
      },
      'stroke-width': 0,
      width: function(d) {
        return _this.get('groupWidth');
      },
      x: null,
      y: function(d) {
        return yScale(d.y1) + zeroDisplacement;
      },
      height: function(d) {
        return yScale(d.y0) - yScale(d.y1);
      }
    };
  }).property('yScale', 'groupWidth'),
  groupedBarAttrs: Ember.computed(function() {
    var yScale, zeroDisplacement,
      _this = this;
    zeroDisplacement = 1;
    yScale = this.get('yScale');
    return {
      "class": function(d, i) {
        return "grouping-" + i;
      },
      'stroke-width': 0,
      width: function(d) {
        return _this.get('barWidth');
      },
      x: function(d) {
        return _this.get('xWithinGroupScale')(d.label);
      },
      height: function(d) {
        return Math.max(0, Math.abs(yScale(d.value) - yScale(0)) - zeroDisplacement);
      },
      y: function(d) {
        if (d.value > 0) {
          return yScale(d.value);
        } else {
          return yScale(0) + zeroDisplacement;
        }
      }
    };
  }).property('yScale', 'getSeriesColor', 'barWidth', 'xWithinGroupScale'),
  labelAttrs: Ember.computed(function() {
    var _this = this;
    return {
      'stroke-width': 0,
      transform: function(d) {
        var dx, dy;
        dx = _this.get('barWidth') / 2;
        if (_this.get('isGrouped') || _this.get('stackBars')) {
          dx += _this.get('groupWidth') / 2 - _this.get('barWidth') / 2;
        } else {
          dx += _this.get('xWithinGroupScale')(d.group);
        }
        dy = _this.get('graphicTop') + _this.get('graphicHeight') + _this.get('labelPadding');
        return "translate(" + dx + ", " + dy + ")";
      }
    };
  }).property('barWidth', 'isGrouped', 'stackBars', 'groupWidth', 'xWithinGroupScale', 'graphicTop', 'graphicHeight', 'labelPadding'),
  groups: Ember.computed(function() {
    return this.get('viewport').selectAll('.bars').data(this.get('finishedData'));
  }).volatile(),
  yAxis: Ember.computed(function() {
    var yAxis;
    yAxis = this.get('viewport').select('.y.axis');
    if (yAxis.empty()) {
      return this.get('viewport').insert('g', ':first-child').attr('class', 'y axis');
    } else {
      return yAxis;
    }
  }).volatile(),
  maxLabelWidth: Ember.computed(function() {
    var maxLabelWidth;
    if (this.get('isGrouped') || this.get('stackBars')) {
      return maxLabelWidth = this.get('groupWidth');
    } else {
      return maxLabelWidth = this.get('barWidth');
    }
  }).property('isGrouped', 'stackBars', 'groupWidth', 'barWidth'),
  _shouldRotateLabels: false,
  setRotateLabels: function() {
    var labels, maxLabelWidth, rotateLabels;
    labels = this.get('groups').select('.groupLabel text');
    maxLabelWidth = this.get('maxLabelWidth');
    rotateLabels = false;
    if (this.get('rotatedLabelLength') > maxLabelWidth) {
      labels.each(function(d) {
        if (this.getBBox().width > maxLabelWidth) {
          return rotateLabels = true;
        }
      });
    }
    return this.set('_shouldRotateLabels', rotateLabels);
  },
  rotateLabelDegrees: Ember.computed(function() {
    var degrees, radians;
    radians = Math.atan(this.get('labelHeight') / this.get('maxLabelWidth'));
    degrees = radians * 180 / Math.PI;
    return Math.max(degrees, 20);
  }).property('labelHeight', 'maxLabelWidth'),
  rotatedLabelLength: Ember.computed(function() {
    var rotateLabelRadians;
    rotateLabelRadians = Math.PI / 180 * this.get('rotateLabelDegrees');
    return Math.abs(this.get('maxLabelHeight') / Math.sin(rotateLabelRadians));
  }).property('maxLabelHeight', 'rotateLabelDegrees'),
  renderVars: ['xWithinGroupScale', 'xBetweenGroupScale', 'yScale', 'finishedData'],
  drawChart: function() {
    this.updateData();
    this.updateLayout();
    this.updateAxes();
    this.updateGraphic();
    if (this.get('hasLegend')) {
      return this.drawLegend();
    } else {
      return this.clearLegend();
    }
  },
  updateData: function() {
    var bars, entering, exiting, groups, hideDetails, showDetails, subdata;
    groups = this.get('groups');
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    entering = groups.enter().append('g').attr('class', 'bars');
    entering.append('g').attr('class', 'groupLabel').append('text').on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    exiting = groups.exit().remove();
    if (this.get('stackBars')) {
      subdata = function(d) {
        return d.stackedValues;
      };
    } else {
      subdata = function(d) {
        return d.values;
      };
    }
    bars = groups.selectAll('rect').data(subdata);
    bars.enter().append('rect').on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    return bars.exit().remove();
  },
  updateLayout: function() {
    var groups, labelTrimmer, labels, maxLabelWidth, rotateLabelDegrees,
      _this = this;
    groups = this.get('groups');
    labels = groups.select('.groupLabel text').attr('transform', null).text(function(d) {
      return d.group;
    });
    this.setRotateLabels();
    if (this.get('_shouldRotateLabels')) {
      rotateLabelDegrees = this.get('rotateLabelDegrees');
      labelTrimmer = Ember.Charts.Helpers.LabelTrimmer.create({
        getLabelSize: function(d) {
          return _this.get('rotatedLabelLength');
        },
        getLabelText: function(d) {
          return d.group;
        }
      });
      return labels.call(labelTrimmer.get('trim')).attr({
        'text-anchor': 'end',
        transform: "rotate(" + (-rotateLabelDegrees) + ")",
        dy: function(d) {
          return this.getBBox().height;
        }
      });
    } else {
      maxLabelWidth = this.get('maxLabelWidth');
      labelTrimmer = Ember.Charts.Helpers.LabelTrimmer.create({
        getLabelSize: function(d) {
          return maxLabelWidth;
        },
        getLabelText: function(d) {
          var _ref;
          return (_ref = d.group) != null ? _ref : '';
        }
      });
      return labels.call(labelTrimmer.get('trim')).attr({
        'text-anchor': 'middle',
        dy: this.get('labelPadding')
      });
    }
  },
  updateAxes: function() {
    var gYAxis, graphicLeft, graphicTop, yAxis;
    yAxis = d3.svg.axis().scale(this.get('yScale')).orient('right').ticks(this.get('numYTicks')).tickSize(this.get('graphicWidth')).tickFormat(this.get('formatValue'));
    graphicTop = this.get('graphicTop');
    graphicLeft = this.get('graphicLeft');
    gYAxis = this.get('yAxis').attr({
      transform: "translate(" + graphicLeft + "," + graphicTop + ")"
    }).call(yAxis);
    gYAxis.selectAll('g').filter(function(d) {
      return d !== 0;
    }).classed('major', false).classed('minor', true);
    return gYAxis.selectAll('text').style('text-anchor', 'end').attr({
      x: -this.get('labelPadding')
    });
  },
  updateGraphic: function() {
    var barAttrs, groups, labels;
    groups = this.get('groups');
    if (this.get('stackBars')) {
      barAttrs = this.get('stackedBarAttrs');
    } else {
      barAttrs = this.get('groupedBarAttrs');
    }
    groups.attr(this.get('groupAttrs'));
    groups.selectAll('rect').style('fill', this.get('getSeriesColor')).attr(barAttrs);
    return labels = groups.select('g.groupLabel').attr(this.get('labelAttrs'));
  }
});

Ember.Handlebars.helper('vertical-bar-chart', Ember.Charts.VerticalBarComponent);


})();

(function() {


Ember.Charts.ScatterComponent = Ember.Charts.ChartComponent.extend(Ember.Charts.Legend, Ember.Charts.FloatingTooltipMixin, Ember.Charts.AxesMixin, {
  classNames: ['chart-scatter'],
  formatXValue: d3.format('.2s'),
  formatYValue: d3.format('.2s'),
  formatXValueLong: d3.format(',.r'),
  formatYValueLong: d3.format(',.r'),
  dotRadius: 7,
  dotShapeArea: Ember.computed(function() {
    return Math.pow(this.get('dotRadius'), 2);
  }).property('dotRadius'),
  graphPadding: 0.05,
  tickSpacing: 80,
  isShowingTotal: false,
  totalPointData: null,
  filteredData: Ember.computed(function() {
    var data;
    data = this.get('data');
    if (Ember.isEmpty(data)) {
      return [];
    }
    return data.filter(function(d) {
      return (d.xValue != null) && (d.yValue != null) && isFinite(d.xValue) && isFinite(d.yValue);
    });
  }).property('data.@each'),
  groupedData: Ember.computed(function() {
    var data, groupedData, k, v, _results,
      _this = this;
    data = this.get('filteredData');
    if (Ember.isEmpty(data)) {
      return [];
    }
    groupedData = Ember.Charts.Helpers.groupBy(data, function(d) {
      var _ref;
      return (_ref = d.group) != null ? _ref : _this.get('ungroupedSeriesName');
    });
    _results = [];
    for (k in groupedData) {
      v = groupedData[k];
      _results.push(v);
    }
    return _results;
  }).property('filteredData.@each'),
  groupNames: Ember.computed(function() {
    var d, _i, _len, _ref, _results;
    _ref = this.get('groupedData');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      _results.push(d.get(0).group);
    }
    return _results;
  }).property('groupedData'),
  numGroups: Ember.computed.alias('groupedData.length'),
  isGrouped: Ember.computed(function() {
    return this.get('numGroups') > 1;
  }).property('numGroups'),
  finishedData: Ember.computed.alias('groupedData'),
  axisTitleHeightOffset: Ember.computed(function() {
    return this.get('axisTitleHeight') + this.get('labelPadding');
  }).property('axisTitleHeight', 'labelPadding'),
  legendChartPadding: Ember.computed(function() {
    return this.get('axisTitleHeightOffset') + this.get('labelHeightOffset');
  }).property('labelHeightOffset', 'axisTitleHeightOffset'),
  graphicTop: Ember.computed.alias('axisTitleHeight'),
  graphicLeft: Ember.computed.alias('labelWidthOffset'),
  graphicHeight: Ember.computed(function() {
    return this.get('height') - this.get('legendHeight') - this.get('legendChartPadding');
  }).property('height', 'legendHeight', 'legendChartPadding'),
  graphicWidth: Ember.computed(function() {
    return this.get('width') - this.get('labelWidthOffset');
  }).property('width', 'labelWidthOffset'),
  axisTitleHeight: 18,
  xDomain: Ember.computed(function() {
    var totalData, xMax, xMin, _ref;
    totalData = this.get('isShowingTotal') ? [this.get('totalPointData')] : [];
    _ref = d3.extent(totalData.concat(this.get('filteredData')), function(d) {
      return d.xValue;
    }), xMin = _ref[0], xMax = _ref[1];
    if ((xMin === xMax && xMax === 0)) {
      return [-1, 1];
    } else if (xMin === xMax) {
      return [xMin * (1 - this.get('graphPadding')), xMin * (1 + this.get('graphPadding'))];
    } else {
      return [xMin, xMax];
    }
  }).property('filteredData.@each', 'isShowingTotal', 'totalPointData'),
  yDomain: Ember.computed(function() {
    var totalData, yMax, yMin, _ref;
    totalData = this.get('isShowingTotal') ? [this.get('totalPointData')] : [];
    _ref = d3.extent(totalData.concat(this.get('filteredData')), function(d) {
      return d.yValue;
    }), yMin = _ref[0], yMax = _ref[1];
    if ((yMin === yMax && yMax === 0)) {
      return [-1, 1];
    } else if (yMin === yMax) {
      return [yMin * (1 - this.get('graphPadding')), yMin * (1 + this.get('graphPadding'))];
    } else {
      return [yMin, yMax];
    }
  }).property('filteredData.@each', 'isShowingTotal', 'totalPointData', 'graphPadding'),
  xScale: Ember.computed(function() {
    var graphicLeft, graphicWidth, padding, xDomain;
    xDomain = this.get('xDomain');
    graphicLeft = this.get('graphicLeft');
    graphicWidth = this.get('graphicWidth');
    padding = (xDomain[1] - xDomain[0]) * this.get('graphPadding');
    return d3.scale.linear().domain([xDomain[0] - padding, xDomain[1] + padding]).range([graphicLeft, graphicLeft + graphicWidth]).nice(this.get('numXTicks'));
  }).property('xDomain', 'graphPadding', 'graphicLeft', 'graphicWidth', 'numXTicks'),
  yScale: Ember.computed(function() {
    var graphicHeight, graphicTop, padding, yDomain;
    yDomain = this.get('yDomain');
    graphicTop = this.get('graphicTop');
    graphicHeight = this.get('graphicHeight');
    padding = (yDomain[1] - yDomain[0]) * this.get('graphPadding');
    return d3.scale.linear().domain([yDomain[0] - padding, yDomain[1] + padding]).range([graphicTop + graphicHeight, graphicTop]).nice(this.get('numYTicks'));
  }).property('yDomain', 'graphPadding', 'graphicTop', 'graphicHeight', 'numYTicks'),
  groupShapes: Ember.computed(function() {
    return ['circle', 'square', 'triangle-up', 'cross', 'diamond'];
  }),
  numGroupShapes: Ember.computed.alias('groupShapes.length'),
  numGroupColors: 2,
  maxNumGroups: Ember.computed(function() {
    return this.get('numGroupColors') * this.get('numGroupShapes');
  }).property('numGroupColors', 'numGroupShapes'),
  displayGroups: Ember.computed(function() {
    return this.get('isGrouped') && this.get('numGroups') <= this.get('maxNumGroups');
  }).property('isGrouped', 'numGroups', 'numGroupShapes'),
  getGroupShape: Ember.computed(function() {
    var _this = this;
    return function(d, i) {
      i = _this.get('groupNames').indexOf(d.group);
      if (!_this.get('displayGroups')) {
        return 'circle';
      }
      return _this.get('groupShapes')[i % _this.get('numGroupShapes')];
    };
  }),
  getGroupColor: Ember.computed(function() {
    var _this = this;
    return function(d, i) {
      var colorIndex;
      colorIndex = 0;
      if (_this.get('displayGroups')) {
        i = _this.get('groupNames').indexOf(d.group);
        colorIndex = Math.floor(i / _this.get('numGroupShapes'));
      }
      return _this.get('colorScale')(colorIndex / _this.get('numGroupColors'));
    };
  }),
  hasLegend: Ember.computed.alias('isGrouped'),
  legendIconRadius: Ember.computed.alias('dotRadius'),
  legendItems: Ember.computed(function() {
    var displayGroups, getGroupColor, getGroupShape, legendData, point;
    if (this.get('hasNoData')) {
      return [];
    }
    getGroupShape = this.get('getGroupShape');
    getGroupColor = this.get('getGroupColor');
    displayGroups = this.get('displayGroups');
    legendData = this.get('groupedData').map(function(d, i) {
      var name, value;
      name = d.get(0).group;
      value = d.get('length') === 1 ? d.get(0) : null;
      return {
        label: name,
        group: name,
        stroke: getGroupColor,
        fill: displayGroups ? getGroupColor : 'transparent',
        icon: getGroupShape,
        selector: ".group-" + i,
        xValue: value != null ? value.xValue : void 0,
        yValue: value != null ? value.yValue : void 0
      };
    });
    if (this.get('isShowingTotal')) {
      point = this.get('totalPointData');
      legendData.unshift({
        label: point.group,
        group: point.group,
        stroke: getGroupColor,
        selector: '.totalgroup',
        xValue: point.xValue,
        yValue: point.yValue
      });
    }
    return legendData;
  }).property('hasNoData', 'groupedData', 'getGroupShape', 'getGroupColor', 'displayGroups', 'isShowingTotal', 'totalPointData'),
  tooltipXValueDisplayName: 'X Factor',
  tooltipYValueDisplayName: 'Y Factor',
  showDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      var content, formatXValue, formatYValue;
      d3.select(element).classed('hovered', true);
      formatXValue = _this.get('formatXValue');
      formatYValue = _this.get('formatYValue');
      content = "<span class=\"tip-label\">" + data.group + "</span>";
      content += "<span class=\"name\">" + (_this.get('tooltipXValueDisplayName')) + ": </span>";
      content += "<span class=\"value\">" + (formatXValue(data.xValue)) + "</span><br/>";
      content += "<span class=\"name\">" + (_this.get('tooltipYValueDisplayName')) + ": </span>";
      content += "<span class=\"value\">" + (formatYValue(data.yValue)) + "</span>";
      return _this.showTooltip(content, d3.event);
    };
  }),
  hideDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      d3.select(element).classed('hovered', false);
      return _this.hideTooltip();
    };
  }),
  groupAttrs: Ember.computed(function() {
    return {
      "class": function(d, i) {
        return "group group-" + i;
      }
    };
  }),
  pointAttrs: Ember.computed(function() {
    var _this = this;
    return {
      d: d3.svg.symbol().size(this.get('dotShapeArea')).type(this.get('getGroupShape')),
      fill: this.get('displayGroups') ? this.get('getGroupColor') : 'transparent',
      stroke: this.get('getGroupColor'),
      'stroke-width': 1.5,
      transform: function(d) {
        var dx, dy;
        dx = _this.get('xScale')(d.xValue);
        dy = _this.get('yScale')(d.yValue);
        return "translate(" + dx + ", " + dy + ")";
      }
    };
  }).property('dotShapeArea', 'getGroupShape', 'xScale', 'yScale', 'displayGroups', 'getGroupColor'),
  groups: Ember.computed(function() {
    return this.get('viewport').selectAll('.group').data(this.get('finishedData'));
  }).volatile(),
  selectOrCreateAxis: function(selector) {
    var axis;
    axis = this.get('viewport').select(selector);
    if (axis.empty()) {
      return this.get('viewport').insert('g', ':first-child');
    } else {
      return axis;
    }
  },
  selectOrCreateAxisTitle: function(selector) {
    var title;
    title = this.get('viewport').select(selector);
    if (title.empty()) {
      return this.get('viewport').append('text');
    } else {
      return title;
    }
  },
  xAxis: Ember.computed(function() {
    return this.selectOrCreateAxis('.x.axis').attr('class', 'x axis');
  }).volatile(),
  yAxis: Ember.computed(function() {
    return this.selectOrCreateAxis('.y.axis').attr('class', 'y axis');
  }).volatile(),
  xAxisTitle: Ember.computed(function() {
    return this.selectOrCreateAxisTitle('.x.axis-title').attr('class', 'x axis-title');
  }).volatile(),
  yAxisTitle: Ember.computed(function() {
    return this.selectOrCreateAxisTitle('.y.axis-title').attr('class', 'y axis-title');
  }).volatile(),
  renderVars: ['xScale', 'yScale', 'dotShapeArea', 'finishedData'],
  drawChart: function() {
    this.updateTotalPointData();
    this.updateData();
    this.updateAxes();
    this.updateGraphic();
    if (this.get('hasLegend')) {
      return this.drawLegend();
    } else {
      return this.clearLegend();
    }
  },
  totalPointShape: Ember.computed(function() {
    var dotShapeArea,
      _this = this;
    dotShapeArea = this.get('dotShapeArea');
    return function(selection) {
      selection.append('path').attr({
        "class": 'totaldot',
        d: d3.svg.symbol().size(dotShapeArea).type('circle'),
        fill: _this.get('getGroupColor')
      });
      return selection.append('path').attr({
        "class": 'totaloutline',
        d: d3.svg.symbol().size(dotShapeArea * 3).type('circle'),
        fill: 'transparent',
        stroke: _this.get('getGroupColor'),
        'stroke-width': 2
      });
    };
  }),
  updateTotalPointData: function() {
    var totalData, totalPoint;
    totalData = this.get('isShowingTotal') ? [this.get('totalPointData')] : [];
    totalPoint = this.get('viewport').selectAll('.totalgroup').data(totalData);
    totalPoint.exit().remove();
    return totalPoint.enter().append('g').attr('class', 'totalgroup').call(this.get('totalPointShape'));
  },
  updateData: function() {
    var groups, points;
    groups = this.get('groups');
    groups.enter().append('g').attr('class', 'group').attr(this.get('groupAttrs'));
    groups.exit().remove();
    points = groups.selectAll('.dot').data(function(d) {
      return d;
    });
    points.enter().append('path').attr('class', 'dot');
    return points.exit().remove();
  },
  updateAxes: function() {
    var gXAxis, gYAxis, graphicHeight, graphicLeft, graphicTop, labelPadding, xAxis, xAxisPadding, yAxis;
    xAxis = d3.svg.axis().scale(this.get('xScale')).orient('top').ticks(this.get('numXTicks')).tickSize(this.get('graphicHeight')).tickFormat(this.get('formatXValue'));
    yAxis = d3.svg.axis().scale(this.get('yScale')).orient('right').ticks(this.get('numYTicks')).tickSize(this.get('graphicWidth')).tickFormat(this.get('formatYValue'));
    graphicTop = this.get('graphicTop');
    graphicHeight = this.get('graphicHeight');
    gXAxis = this.get('xAxis').attr('transform', "translate(0," + (graphicTop + graphicHeight) + ")").call(xAxis);
    gXAxis.selectAll('g').filter(function(d) {
      return d !== 0;
    }).classed('major', false).classed('minor', true);
    labelPadding = this.get('labelPadding');
    gXAxis.selectAll('text').style('text-anchor', 'middle').attr({
      y: function(d) {
        return this.getBBox().height + labelPadding / 2;
      }
    });
    graphicLeft = this.get('graphicLeft');
    gYAxis = this.get('yAxis').attr('transform', "translate(" + graphicLeft + ",0)").call(yAxis);
    gYAxis.selectAll('g').filter(function(d) {
      return d !== 0;
    }).classed('major', false).classed('minor', true);
    gYAxis.selectAll('text').style('text-anchor', 'end').attr({
      x: -this.get('labelPadding')
    });
    xAxisPadding = this.get('labelHeightOffset') + this.get('labelPadding');
    this.get('xAxisTitle').text(this.get('tooltipXValueDisplayName')).style('text-anchor', 'middle').attr({
      x: this.get('graphicWidth') / 2 + this.get('labelWidthOffset'),
      y: this.get('graphicBottom') + xAxisPadding
    });
    return this.get('yAxisTitle').text(this.get('tooltipYValueDisplayName')).style('text-anchor', 'start').attr({
      y: 0,
      x: -this.get('labelPadding')
    });
  },
  updateGraphic: function() {
    var hideDetails, showDetails,
      _this = this;
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    this.get('groups').selectAll('.dot').attr(this.get('pointAttrs')).on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    return this.get('viewport').select('.totalgroup').on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    }).attr({
      transform: function(d) {
        var dx, dy;
        dx = _this.get('xScale')(d.xValue);
        dy = _this.get('yScale')(d.yValue);
        return "translate(" + dx + ", " + dy + ")";
      }
    });
  }
});

Ember.Handlebars.helper('scatter-chart', Ember.Charts.ScatterComponent);


})();

(function() {


Ember.Charts.TimeSeriesComponent = Ember.Charts.ChartComponent.extend(Ember.Charts.Legend, Ember.Charts.TimeSeriesLabeler, Ember.Charts.FloatingTooltipMixin, Ember.Charts.HasTimeSeriesRule, Ember.Charts.AxesMixin, {
  classNames: ['chart-time-series'],
  formatTime: d3.time.format('%Y-%m-%d'),
  formatTimeLong: d3.time.format('%a %b %-d, %Y'),
  formatValue: d3.format('.2s'),
  formatValueLong: d3.format(',.r'),
  ungroupedSeriesName: 'Other',
  stackBars: false,
  interpolate: false,
  yAxisFromZero: false,
  barPadding: 0,
  barGroupPadding: 0.25,
  groupedLineData: Ember.computed(function() {
    var groupName, groups, lineData, values, _results,
      _this = this;
    lineData = this.get('lineData');
    if (Ember.isEmpty(lineData)) {
      return [];
    }
    groups = Ember.Charts.Helpers.groupBy(lineData, function(d) {
      var _ref;
      return (_ref = d.label) != null ? _ref : _this.get('ungroupedSeriesName');
    });
    _results = [];
    for (groupName in groups) {
      values = groups[groupName];
      _results.push({
        group: groupName,
        values: values
      });
    }
    return _results;
  }).property('lineData.@each', 'ungroupedSeriesName'),
  groupedBarData: Ember.computed(function() {
    var barData, barGroupsByTime, barTimes, g, groups, grps, timePoint, v;
    barData = this.get('barData');
    if (Ember.isEmpty(barData)) {
      return [];
    }
    barTimes = Ember.Charts.Helpers.groupBy(barData, function(d) {
      return +d.time;
    });
    return barGroupsByTime = (function() {
      var _results,
        _this = this;
      _results = [];
      for (timePoint in barTimes) {
        groups = barTimes[timePoint];
        grps = Ember.Charts.Helpers.groupBy(groups, function(d) {
          var _ref;
          return (_ref = d.label) != null ? _ref : _this.get('ungroupedSeriesName');
        });
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (g in grps) {
            v = grps[g];
            _results1.push({
              group: g,
              time: v[0].time,
              value: v[0].value,
              label: v[0].label
            });
          }
          return _results1;
        })());
      }
      return _results;
    }).call(this);
  }).property('barData.@each', 'ungroupedSeriesName'),
  barGroups: Ember.computed(function() {
    var barData, barGroups, groupName, values, _results,
      _this = this;
    barData = this.get('barData');
    if (Ember.isEmpty(barData)) {
      return [];
    }
    barGroups = Ember.Charts.Helpers.groupBy(barData, function(d) {
      var _ref;
      return (_ref = d.label) != null ? _ref : _this.get('ungroupedSeriesName');
    });
    _results = [];
    for (groupName in barGroups) {
      values = barGroups[groupName];
      _results.push(groupName);
    }
    return _results;
  }).property('barData.@each', 'ungroupedSeriesName'),
  stackedBarData: Ember.computed(function() {
    var barData, barGroupsByTime, barTimes, d, g, groupName, groups, stackedValues, time, timePoint, value, y0, _i, _len, _results;
    barData = this.get('barData');
    if (Ember.isEmpty(barData)) {
      return [];
    }
    barTimes = Ember.Charts.Helpers.groupBy(barData, function(d) {
      return +d.time;
    });
    barGroupsByTime = (function() {
      var _results,
        _this = this;
      _results = [];
      for (timePoint in barTimes) {
        groups = barTimes[timePoint];
        _results.push(Ember.Charts.Helpers.groupBy(groups, function(d) {
          var _ref;
          return (_ref = d.label) != null ? _ref : _this.get('ungroupedSeriesName');
        }));
      }
      return _results;
    }).call(this);
    _results = [];
    for (_i = 0, _len = barGroupsByTime.length; _i < _len; _i++) {
      g = barGroupsByTime[_i];
      y0 = 0;
      stackedValues = (function() {
        var _ref, _ref1, _results1;
        _results1 = [];
        for (groupName in g) {
          d = g[groupName];
          time = d != null ? (_ref = d[0]) != null ? _ref.time : void 0 : void 0;
          value = d != null ? (_ref1 = d[0]) != null ? _ref1.value : void 0 : void 0;
          _results1.push({
            group: groupName,
            x: time,
            y0: y0,
            y1: y0 += Math.max(value, 0)
          });
        }
        return _results1;
      })();
      _results.push({
        stackedValues: stackedValues,
        totalValue: y0
      });
    }
    return _results;
  }).property('barData', 'ungroupedSeriesName'),
  finishedData: Ember.computed(function() {
    return {
      lineData: this.get('groupedLineData'),
      groupedBarData: this.get('groupedBarData'),
      stackedBarData: this.get('stackedBarData')
    };
  }).property('groupedLineData.@each.values', 'groupedBarData.@each', 'stackedBarData.@each'),
  hasNoData: Ember.computed(function() {
    return !(this.get('hasBarData') || this.get('hasLineData'));
  }).property('hasBarData', 'hasLineData'),
  hasLineData: Ember.computed(function() {
    return !Ember.isEmpty(this.get('lineData'));
  }).property('lineData'),
  hasBarData: Ember.computed(function() {
    return !Ember.isEmpty(this.get('barData'));
  }).property('barData'),
  legendChartPadding: Ember.computed.alias('labelHeightOffset'),
  graphicLeft: Ember.computed.alias('labelWidthOffset'),
  graphicWidth: Ember.computed(function() {
    return this.get('width') - this.get('labelWidthOffset');
  }).property('width', 'labelWidthOffset'),
  graphicHeight: Ember.computed(function() {
    return this.get('height') - this.get('legendHeight') - this.get('legendChartPadding');
  }).property('height', 'legendHeight', 'legendChartPadding'),
  barDataExtent: Ember.computed(function() {
    var endTime, endTimeGroup, groupedBarData, paddedEnd, paddedStart, startTime, startTimeGroup, timeDelta;
    timeDelta = this.get('timeDelta');
    groupedBarData = this.get('groupedBarData');
    if (Ember.isEmpty(groupedBarData)) {
      return [new Date(), new Date()];
    }
    startTimeGroup = groupedBarData[0];
    startTime = startTimeGroup[0].time;
    endTimeGroup = groupedBarData[groupedBarData.length - 1];
    endTime = endTimeGroup[0].time;
    paddedStart = timeDelta === 'quarter' ? +startTime / 2 + d3.time['month'].offset(startTime, -3) / 2 : +startTime / 2 + d3.time[timeDelta].offset(startTime, -1) / 2;
    paddedEnd = timeDelta === 'quarter' ? +endTime / 2 + d3.time['month'].offset(endTime, 3) / 2 : +endTime / 2 + d3.time[timeDelta].offset(endTime, 1) / 2;
    return [new Date(paddedStart), new Date(paddedEnd)];
  }).property('timeDelta', 'groupedBarData.@each'),
  individualBarLabels: Ember.computed.alias('barGroups'),
  xBetweenGroupDomain: Ember.computed.alias('barDataExtent'),
  xWithinGroupDomain: Ember.computed.alias('individualBarLabels'),
  barWidth: Ember.computed(function() {
    return this.get('xGroupScale').rangeBand();
  }).property('xGroupScale'),
  stackWidth: Ember.computed(function() {
    return this.get('paddedStackWidth') * (1 - this.get('barGroupPadding'));
  }).property('paddedStackWidth', 'barGroupPadding'),
  paddedStackWidth: Ember.computed(function() {
    var end, start, _ref;
    _ref = this.get('xGroupScale').rangeExtent(), start = _ref[0], end = _ref[1];
    return end - start;
  }).property('xGroupScale'),
  paddedGroupWidth: Ember.computed(function() {
    var scale, t1, t2, timeDelta;
    timeDelta = this.get('timeDelta');
    scale = this.get('xTimeScale');
    t1 = this.get('xBetweenGroupDomain')[0];
    t2 = timeDelta === 'quarter' ? d3.time['month'].offset(t1, 3) : d3.time[timeDelta].offset(t1, 1);
    return scale(t2) - scale(t1);
  }).property('timeDelta', 'xTimeScale', 'xBetweenGroupDomain'),
  lineSeriesNames: Ember.computed(function() {
    var data;
    data = this.get('groupedLineData');
    if (Ember.isEmpty(data)) {
      return [];
    }
    return data.map(function(d) {
      return d.group;
    });
  }).property('groupedLineData'),
  lineDataExtent: Ember.computed(function() {
    var data, extents;
    data = this.get('groupedLineData');
    if (Ember.isEmpty(data)) {
      return [new Date(), new Date()];
    }
    extents = data.getEach('values').map(function(series) {
      return d3.extent(series.map(function(d) {
        return d.time;
      }));
    });
    return [
      d3.min(extents, function(e) {
        return e[0];
      }), d3.max(extents, function(e) {
        return e[1];
      })
    ];
  }).property('groupedLineData.@each.values'),
  xBetweenSeriesDomain: Ember.computed.alias('lineSeriesNames'),
  xWithinSeriesDomain: Ember.computed.alias('lineDataExtent'),
  maxNumberOfLabels: Ember.computed.alias('numXTicks'),
  xDomain: Ember.computed(function() {
    var maxOfGroups, maxOfSeries, minOfGroups, minOfSeries, _ref, _ref1;
    if (!this.get('hasBarData')) {
      return this.get('xWithinSeriesDomain');
    }
    if (!this.get('hasLineData')) {
      return this.get('xBetweenGroupDomain');
    }
    _ref = this.get('xBetweenGroupDomain'), minOfGroups = _ref[0], maxOfGroups = _ref[1];
    _ref1 = this.get('xWithinSeriesDomain'), minOfSeries = _ref1[0], maxOfSeries = _ref1[1];
    return [Math.min(minOfGroups, minOfSeries), Math.max(maxOfGroups, maxOfSeries)];
  }).property('xBetweenGroupDomain', 'xWithinSeriesDomain', 'hasBarData', 'hasLineData'),
  yDomain: Ember.computed(function() {
    var groupData, hasBarData, hasLineData, lineData, max, maxOfGroups, maxOfSeries, maxOfStacks, min, minOfGroups, minOfSeries, minOfStacks, stackBars, stackData;
    lineData = this.get('groupedLineData');
    stackData = this.get('stackedBarData');
    groupData = this.get('groupedBarData');
    maxOfSeries = d3.max(lineData, function(d) {
      return d3.max(d.values, function(dd) {
        return dd.value;
      });
    });
    minOfSeries = d3.min(lineData, function(d) {
      return d3.min(d.values, function(dd) {
        return dd.value;
      });
    });
    minOfStacks = d3.min(stackData, function(d) {
      return d.totalValue;
    });
    maxOfStacks = d3.max(stackData, function(d) {
      return d.totalValue;
    });
    maxOfGroups = d3.max(groupData, function(d) {
      return d3.max(d, function(dd) {
        return dd.value;
      });
    });
    minOfGroups = d3.min(groupData, function(d) {
      return d3.min(d, function(dd) {
        return dd.value;
      });
    });
    hasBarData = this.get('hasBarData');
    hasLineData = this.get('hasLineData');
    stackBars = this.get('stackBars');
    if (!hasBarData) {
      min = minOfSeries;
      max = maxOfSeries;
    } else if (!hasLineData) {
      min = stackBars ? minOfStacks : minOfGroups;
      max = stackBars ? maxOfStacks : maxOfGroups;
    } else if (stackBars) {
      min = Math.min(minOfSeries, minOfStacks);
      max = Math.max(maxOfSeries, maxOfStacks);
    } else {
      min = Math.min(minOfGroups, minOfSeries);
      max = Math.max(maxOfGroups, maxOfSeries);
    }
    if (stackBars || this.get('yAxisFromZero') || min === max) {
      if (max < 0) {
        return [min, 0];
      }
      if (min > 0) {
        return [0, max];
      }
      if ((min === max && max === 0)) {
        return [-1, 1];
      }
    }
    return [min, max];
  }).property('groupedLineData', 'stackedBarData', 'groupedBarData', 'hasBarData', 'hasLineData', 'stackBars', 'yAxisFromZero'),
  yRange: Ember.computed(function() {
    return [this.get('graphicTop') + this.get('graphicHeight'), this.get('graphicTop')];
  }).property('graphicTop', 'graphicHeight'),
  yScale: Ember.computed(function() {
    return d3.scale.linear().domain(this.get('yDomain')).range(this.get('yRange')).nice(this.get('numYTicks'));
  }).property('yDomain', 'yRange', 'numYTicks'),
  xRange: Ember.computed(function() {
    return [this.get('graphicLeft'), this.get('graphicLeft') + this.get('graphicWidth')];
  }).property('graphicLeft', 'graphicWidth'),
  xTimeScale: Ember.computed(function() {
    var xDomain;
    xDomain = this.get('xDomain');
    return d3.time.scale().domain(this.get('xDomain')).range(this.get('xRange'));
  }).property('xDomain', 'xRange'),
  xGroupScale: Ember.computed(function() {
    return d3.scale.ordinal().domain(this.get('xWithinGroupDomain')).rangeRoundBands([0, this.get('paddedGroupWidth')], this.get('barPadding') / 2, this.get('barGroupPadding') / 2);
  }).property('xWithinGroupDomain', 'paddedGroupWidth', 'barPadding', 'barGroupPadding'),
  showDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      var addValueLine, content, formatValue;
      d3.select(element).classed('hovered', true);
      content = "<span class=\"tip-label\">" + (_this.get('formatTime')(data.time)) + "</span>";
      formatValue = _this.get('formatValue');
      addValueLine = function(d) {
        content += "<span class=\"name\">" + d.group + ": </span>";
        return content += "<span class=\"value\">" + (formatValue(d.value)) + "</span><br/>";
      };
      if (Ember.isArray(data.values)) {
        data.values.forEach(addValueLine);
      } else {
        addValueLine(data);
      }
      return _this.showTooltip(content, d3.event);
    };
  }),
  hideDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      d3.select(element).classed('hovered', false);
      return _this.hideTooltip();
    };
  }),
  zeroDisplacement: 1,
  groupAttrs: Ember.computed(function() {
    var _this = this;
    return {
      transform: function(d) {
        var dx, dy;
        if (_this.get('stackBars')) {
          dx = -_this.get('stackWidth') / 2;
        } else {
          dx = -_this.get('paddedGroupWidth') / 2;
        }
        dy = 0;
        return "translate(" + dx + "," + dy + ")";
      }
    };
  }).property('stackBars', 'stackWidth', 'paddedGroupWidth'),
  stackedBarAttrs: Ember.computed(function() {
    var xTimeScale, yScale,
      _this = this;
    xTimeScale = this.get('xTimeScale');
    yScale = this.get('yScale');
    return {
      "class": function(d, i) {
        return "grouping-" + i;
      },
      'stroke-width': 0,
      width: this.get('stackWidth'),
      x: function(d) {
        return xTimeScale(d.x);
      },
      y: function(d) {
        return yScale(d.y1) + _this.get('zeroDisplacement');
      },
      height: function(d) {
        return yScale(d.y0) - yScale(d.y1);
      }
    };
  }).property('xTimeScale', 'yScale', 'stackWidth', 'zeroDisplacement'),
  groupedBarAttrs: Ember.computed(function() {
    var xGroupScale, xTimeScale, yScale, zeroDisplacement,
      _this = this;
    xTimeScale = this.get('xTimeScale');
    xGroupScale = this.get('xGroupScale');
    yScale = this.get('yScale');
    zeroDisplacement = this.get('zeroDisplacement');
    return {
      "class": function(d, i) {
        return "grouping-" + i;
      },
      'stroke-width': 0,
      width: this.get('barWidth'),
      x: function(d) {
        return xGroupScale(d.label) + xTimeScale(d.time);
      },
      y: function(d) {
        if (d.value > 0) {
          return yScale(d.value);
        } else {
          return yScale(0) + zeroDisplacement;
        }
      },
      height: function(d) {
        var zeroLine;
        zeroLine = Math.max(0, yScale.domain()[0]);
        return Math.max(0, d.value > zeroLine ? Math.abs(yScale(zeroLine) - yScale(d.value)) - zeroDisplacement : Math.abs(yScale(d.value) - yScale(zeroLine)) - zeroDisplacement);
      }
    };
  }).property('xTimeScale', 'xGroupScale', 'barWidth', 'yScale', 'zeroDisplacement'),
  line: Ember.computed(function() {
    var _this = this;
    return d3.svg.line().x(function(d) {
      return _this.get('xTimeScale')(d.time);
    }).y(function(d) {
      return _this.get('yScale')(d.value);
    }).interpolate(this.get('interpolate') ? 'basis' : 'linear');
  }).property('xTimeScale', 'yScale', 'interpolate'),
  getLineColor: Ember.computed(function() {
    var _this = this;
    return function(d, i) {
      var getSeriesColor;
      getSeriesColor = _this.get('getSeriesColor');
      switch (i) {
        case 0:
          return getSeriesColor(d, 0);
        case 1:
          return getSeriesColor(d, 2);
        case 2:
          return getSeriesColor(d, 0);
        case 3:
          return getSeriesColor(d, 2);
        case 4:
          return getSeriesColor(d, 0);
        case 5:
          return getSeriesColor(d, 1);
        default:
          return getSeriesColor(d, i);
      }
    };
  }),
  lineAttrs: Ember.computed(function() {
    var getSeriesColor, line,
      _this = this;
    getSeriesColor = this.get('getSeriesColor');
    line = this.get('line');
    return {
      "class": function(d, i) {
        return "line series-" + i;
      },
      d: function(d) {
        return line(d.values);
      },
      stroke: this.get('getLineColor'),
      'stroke-width': function(d, i) {
        switch (i) {
          case 0:
            return 2;
          case 1:
            return 1.5;
          case 2:
            return 2;
          case 3:
            return 1.5;
          case 4:
            return 2.5;
          case 5:
            return 2.5;
          default:
            return 2;
        }
      },
      'stroke-dasharray': function(d, i) {
        switch (i) {
          case 2:
          case 3:
          case 5:
            return '2,2';
          default:
            return '';
        }
      }
    };
  }).property('line', 'getSeriesColor'),
  numLines: Ember.computed.alias('xBetweenSeriesDomain.length'),
  numBarsPerGroup: Ember.computed.alias('xWithinGroupDomain.length'),
  numColorSeries: 6,
  numSecondaryColorSeries: Ember.computed.alias('numBarsPerGroup'),
  secondaryMinimumTint: Ember.computed(function() {
    if (this.get('numLines') === 0) {
      return 0;
    } else {
      return 0.4;
    }
  }).property('numLines'),
  secondaryMaximumTint: Ember.computed(function() {
    if (this.get('numLines') === 0) {
      return 0.8;
    } else {
      return 0.85;
    }
  }).property('numLines'),
  hasLegend: Ember.computed(function() {
    return this.get('legendItems.length') > 1;
  }).property('legendItems.length'),
  legendItems: Ember.computed(function() {
    var getSeriesColor, lineAttrs,
      _this = this;
    getSeriesColor = this.get('getSeriesColor');
    lineAttrs = this.get('lineAttrs');
    return this.get('xBetweenSeriesDomain').map(function(d, i) {
      return {
        label: d,
        stroke: lineAttrs['stroke'](d, i),
        width: lineAttrs['stroke-width'](d, i),
        dotted: lineAttrs['stroke-dasharray'](d, i),
        icon: function() {
          return 'line';
        },
        selector: ".series-" + i
      };
    }).concat(this.get('xWithinGroupDomain').map(function(d, i) {
      var color;
      color = _this.get('getSecondarySeriesColor')(d, i);
      return {
        stroke: color,
        fill: color,
        label: d,
        icon: function() {
          return 'square';
        },
        selector: ".grouping-" + i
      };
    }));
  }).property('xBetweenSeriesDomain', 'xWithinGroupDomain', 'getSeriesColor', 'getSecondarySeriesColor'),
  removeAllGroups: function() {
    return this.get('viewport').selectAll('.bars').remove();
  },
  groups: Ember.computed(function() {
    var barData;
    if (this.get('stackBars')) {
      barData = this.get('stackedBarData');
    } else {
      barData = this.get('groupedBarData');
    }
    return this.get('viewport').selectAll('.bars').data(barData);
  }).volatile(),
  removeAllSeries: function() {
    return this.get('viewport').selectAll('.series').remove();
  },
  series: Ember.computed(function() {
    return this.get('viewport').selectAll('.series').data(this.get('groupedLineData'));
  }).volatile(),
  xAxis: Ember.computed(function() {
    var xAxis;
    xAxis = this.get('viewport').select('.x.axis');
    if (xAxis.empty()) {
      return this.get('viewport').insert('g', ':first-child').attr('class', 'x axis');
    } else {
      return xAxis;
    }
  }).volatile(),
  yAxis: Ember.computed(function() {
    var yAxis;
    yAxis = this.get('viewport').select('.y.axis');
    if (yAxis.empty()) {
      return this.get('viewport').insert('g', ':first-child').attr('class', 'y axis');
    } else {
      return yAxis;
    }
  }).volatile(),
  renderVars: ['getLabelledTicks', 'xGroupScale', 'xTimeScale', 'yScale'],
  drawChart: function() {
    this.updateRule();
    this.updateBarData();
    this.updateLineData();
    this.updateLineMarkers();
    this.updateAxes();
    this.updateBarGraphic();
    this.updateLineGraphic();
    if (this.get('hasLegend')) {
      return this.drawLegend();
    } else {
      return this.clearLegend();
    }
  },
  updateAxes: function() {
    var gXAxis, gYAxis, graphicHeight, graphicLeft, graphicTop, xAxis, yAxis;
    xAxis = d3.svg.axis().scale(this.get('xTimeScale')).orient('bottom').ticks(this.get('getLabelledTicks')).tickSubdivide(this.get('numberOfMinorTicks')).tickFormat(this.get('formattedTime')).tickSize(6, 3, 0);
    yAxis = d3.svg.axis().scale(this.get('yScale')).orient('right').ticks(this.get('numYTicks')).tickSize(this.get('graphicWidth')).tickFormat(this.get('formatValue'));
    graphicTop = this.get('graphicTop');
    graphicHeight = this.get('graphicHeight');
    gXAxis = this.get('xAxis').attr({
      transform: "translate(0," + (graphicTop + graphicHeight) + ")"
    }).call(xAxis);
    graphicLeft = this.get('graphicLeft');
    gYAxis = this.get('yAxis').attr('transform', "translate(" + graphicLeft + ",0)").call(yAxis);
    gYAxis.selectAll('g').filter(function(d) {
      return d;
    }).classed('major', false).classed('minor', true);
    return gYAxis.selectAll('text').style('text-anchor', 'end').attr({
      x: -this.get('labelPadding')
    });
  },
  updateBarData: function() {
    var bars, groups, hideDetails, showDetails, subdata;
    this.removeAllGroups();
    groups = this.get('groups');
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    groups.enter().insert('g', '.series').attr('class', 'bars');
    groups.exit().remove();
    if (this.get('stackBars')) {
      subdata = function(d) {
        return d.stackedValues;
      };
    } else {
      subdata = function(d) {
        return d;
      };
    }
    bars = groups.selectAll('rect').data(subdata);
    bars.enter().append('rect').on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    return bars.exit().remove();
  },
  updateBarGraphic: function() {
    var barAttrs, groups;
    if (this.get('stackBars')) {
      barAttrs = this.get('stackedBarAttrs');
    } else {
      barAttrs = this.get('groupedBarAttrs');
    }
    groups = this.get('groups');
    groups.attr(this.get('groupAttrs'));
    return groups.selectAll('rect').style('fill', this.get('getSecondarySeriesColor')).attr(barAttrs);
  },
  updateLineData: function() {
    var series;
    this.removeAllSeries();
    series = this.get('series');
    series.enter().append('g').attr('class', 'series').append('path').attr('class', 'line');
    return series.exit().remove();
  },
  updateLineGraphic: function() {
    var graphicTop, series;
    series = this.get('series');
    graphicTop = this.get('graphicTop');
    series.attr('transform', "translate(0, " + graphicTop + ")");
    return series.select('path.line').attr(this.get('lineAttrs'));
  }
});

Ember.Handlebars.helper('time-series-chart', Ember.Charts.TimeSeriesComponent);


})();

(function() {


Ember.Charts.BubbleComponent = Ember.Charts.ChartComponent.extend(Ember.Charts.FloatingTooltipMixin, {
  classNames: ['chart-bubble'],
  layoutGravity: -0.01,
  damper: 0.1,
  charge: Ember.computed(function() {
    return function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };
  }),
  formatValue: d3.format('.2s'),
  formatValueLong: d3.format(',.r'),
  showDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      var content, formatValue;
      d3.select(element).classed('hovered', true);
      formatValue = _this.get('formatValue');
      content = "<span class=\"tip-label\">" + data.label + "</span>";
      content += "<span class=\"name\">" + (_this.get('tooltipValueDisplayName')) + ": </span>";
      content += "<span class=\"value\">" + (formatValue(data.value)) + "</span>";
      return _this.showTooltip(content, d3.event);
    };
  }),
  hideDetails: Ember.computed(function() {
    var _this = this;
    return function(data, i, element) {
      d3.select(element).classed('hovered', false);
      return _this.hideTooltip();
    };
  }),
  renderVars: ['selectedSeedColor'],
  radiusScale: Ember.computed(function() {
    var maxAmount, maxRadius;
    maxAmount = d3.max(this.data, function(d) {
      return d.value;
    });
    maxRadius = d3.min([this.get('width'), this.get('height')]) / 7;
    return d3.scale.pow().exponent(0.5).domain([0, maxAmount]).range([2, maxRadius]);
  }).property('data', 'width', 'height'),
  nodeData: Ember.computed(function() {
    var data, nodes, radiusScale,
      _this = this;
    data = this.get('data');
    if (Ember.isEmpty(data)) {
      return [];
    }
    radiusScale = this.get('radiusScale');
    nodes = data.map(function(d) {
      return {
        radius: radiusScale(d.value),
        value: d.value,
        label: d.label,
        id: d.label,
        x: Math.random() * _this.get('width') / 2,
        y: Math.random() * _this.get('height') / 2
      };
    });
    nodes.sort(function(a, b) {
      return b.value - a.value;
    });
    return nodes;
  }).property('radiusScale'),
  finishedData: Ember.computed.alias('nodeData'),
  numColorSeries: Ember.computed.alias('finishedData.length'),
  drawChart: function() {
    return this.updateVis();
  },
  updateVis: function() {
    var circles, fill_color, force, hideDetails, move_towards_center, nodes, showDetails, vis,
      _this = this;
    vis = this.get('viewport');
    nodes = this.get('nodeData');
    showDetails = this.get('showDetails');
    hideDetails = this.get('hideDetails');
    fill_color = this.get('getSeriesColor');
    circles = vis.selectAll("circle").data(nodes, function(d) {
      return d.id;
    });
    circles.enter().append("circle").attr("r", 0).attr("id", function(d) {
      return "bubble_" + d.id;
    }).on("mouseover", function(d, i) {
      return showDetails(d, i, this);
    }).on("mouseout", function(d, i) {
      return hideDetails(d, i, this);
    });
    circles.transition().duration(2000).attr("r", function(d) {
      return d.radius;
    });
    circles.attr("fill", fill_color).attr("stroke-width", 2).attr("stroke", function(d, i) {
      return d3.rgb(fill_color(d, i)).darker();
    });
    circles.exit().remove();
    move_towards_center = function(alpha) {
      var center;
      center = {
        x: _this.get('width') / 2,
        y: _this.get('height') / 2
      };
      return function(d) {
        d.x = d.x + (center.x - d.x) * (_this.get('damper') + 0.02) * alpha;
        return d.y = d.y + (center.y - d.y) * (_this.get('damper') + 0.02) * alpha;
      };
    };
    force = d3.layout.force().nodes(nodes).size([this.get('width'), this.get('height')]);
    force.gravity(this.get('layoutGravity')).charge(this.get('charge')).friction(0.9).on("tick", function(e) {
      return circles.each(move_towards_center(e.alpha)).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
    force.start();
    return vis.selectAll(".years").remove();
  }
});

Ember.Handlebars.helper('bubble-chart', Ember.Charts.BubbleComponent);


})();

})();

(function() {

window.App = Ember.Application.create({
  LOG_TRANSITIONS: true
});


})();

(function() {


App.data = {};

App.data["null"] = null;

App.data.empty = [];


})();

(function() {


App.data.treedata = {
  "root": {
    "group_value": "Total",
    "level": 0,
    "values": [
      {
        "type": "money",
        "value": 60269996.24879856,
        "currency": "USD"
      }, {
        "type": "money",
        "value": 61494836.611845456,
        "currency": "USD"
      }, {
        "type": "money",
        "value": 60816540.19589533,
        "currency": "USD"
      }, {
        "type": "money",
        "value": -1039739.6313347403,
        "currency": "USD"
      }, {
        "type": "percent",
        "value": -0.016858920950260137
      }, {
        "type": "percent",
        "value": -0.01685892095026014
      }
    ],
    "children": [
      {
        "group_name": "Owner (Down)",
        "group_value": "Uncle Money Penny",
        "level": 1,
        "values": [
          {
            "type": "money",
            "value": 60269996.248798564,
            "currency": "USD"
          }, {
            "type": "money",
            "value": 61494836.61184546,
            "currency": "USD"
          }, {
            "type": "money",
            "value": 60816540.19589534,
            "currency": "USD"
          }, {
            "type": "money",
            "value": -1039739.6313347424,
            "currency": "USD"
          }, {
            "type": "percent",
            "value": -0.016858920950260176
          }, {
            "type": "percent",
            "value": -0.01685892095026018
          }
        ],
        "children": [
          {
            "group_name": "Owner (Down)",
            "group_value": "The Money Penny Trust",
            "level": 2,
            "values": [
              {
                "type": "money",
                "value": 18241432.089211173,
                "currency": "USD"
              }, {
                "type": "money",
                "value": 19049191.44150407,
                "currency": "USD"
              }, {
                "type": "money",
                "value": 18480088.281079322,
                "currency": "USD"
              }, {
                "type": "money",
                "value": -549006.9566043427,
                "currency": "USD"
              }, {
                "type": "percent",
                "value": -0.028841927979075494
              }, {
                "type": "percent",
                "value": -0.00890190640386938
              }
            ],
            "children": [
              {
                "group_name": "Owner (Down)",
                "group_value": "Sterling Holdings, LLC",
                "level": 3,
                "values": [
                  {
                    "type": "money",
                    "value": 6828594.139080001,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 6840053.28,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 6841431,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 8502.119999999879,
                    "currency": "USD"
                  }, {
                    "type": "percent",
                    "value": 0.0012440650800411423
                  }, {
                    "type": "percent",
                    "value": 0.00013785813743159806
                  }
                ],
                "children": [
                  {
                    "group_name": "Holding Status",
                    "group_value": "Current Holding",
                    "level": 4,
                    "values": [
                      {
                        "type": "money",
                        "value": 6828594.139080001,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 6840053.28,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 6841431,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 8502.119999999879,
                        "currency": "USD"
                      }, {
                        "type": "percent",
                        "value": 0.0012440650800411423
                      }, {
                        "type": "percent",
                        "value": 0.00013785813743159806
                      }
                    ],
                    "children": [
                      {
                        "group_name": "Asset Class",
                        "group_value": "Fixed Income",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 6828594.139080001,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 6840053.28,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 6841431,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 8502.119999999879,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.0012440650800411423
                          }, {
                            "type": "percent",
                            "value": 0.00013785813743159806
                          }
                        ],
                        "children": [
                          {
                            "group_name": "Security",
                            "group_value": "Bay Area Toll Auth Calif Toll Rev BDS 3.50 % Due Apr 1, 2019",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38471.4,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38232.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38656.8,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 424.79999999999563,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.011111111111110995
                              }, {
                                "type": "percent",
                                "value": 0.000006887945216127635
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Bay Area Toll Auth Calif Toll Toll Bridge Rev 3.90 % Due Apr 1, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38471.4,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38232.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38656.8,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 424.79999999999563,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.011111111111110995
                              }, {
                                "type": "percent",
                                "value": 0.000006887945216127635
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Berkshire Hathaway Inc 3.20 % Due Feb 11, 2015",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38063.16,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38147.04,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 37989.36000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -157.67999999999302,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.0041334792948546735
                              }, {
                                "type": "percent",
                                "value": -0.0000025567118683591537
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Burlington Northern Santa Fe CP 4.30 % Due Jul 1, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 37758.600000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38019.96000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 37260.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -759.9599999999991,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.019988448173012256
                              }, {
                                "type": "percent",
                                "value": -0.000012322417246818278
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Burlington Northern Santa Fe CP 4.70 % Due Oct 1, 2019",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 39441.600000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 40383.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 40011.840000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -371.1600000000035,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.009190996211277107
                              }, {
                                "type": "percent",
                                "value": -0.000006018196201548924
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "CA CNTY Calif Tob Sec Asset Backed BDS 5.00 % Due Jun 1, 2036",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1423656.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1467460.8000000003,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1468519.2,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1058.399999999674,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.0007212458417967103
                              }, {
                                "type": "percent",
                                "value": 0.000017161490623228148
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Canadian Natl RY Co 7.62 % Due May 15, 2023",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 48960.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 50580.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 49207.50000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 0,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0
                              }, {
                                "type": "percent",
                                "value": 0
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Comcast Corp 6.50 % Due Jan 15, 2015",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 40730.4,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41179.32000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 40817.520000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -361.8000000000029,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.008785963439901456
                              }, {
                                "type": "percent",
                                "value": -0.000005866427917125762
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "CSX Corp 5.75 % Due Mar 15, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38115.36000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38282.4,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38055.96000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -226.43999999999505,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.005914989655820822
                              }, {
                                "type": "percent",
                                "value": -0.0000036716250346985016
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Dell Inc 1.40 % Due Sep 10, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 36448.560000000005,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 36234.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 36241.560000000005,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 7.559999999997672,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.00020864381520112796
                              }, {
                                "type": "percent",
                                "value": 1.2258207588020108e-7
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Du Pont E I De Nemours & Co 3.25 % Due Jan 15, 2015",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38441.16,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38532.600000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38362.68000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -169.91999999999825,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.004409772504320971
                              }, {
                                "type": "percent",
                                "value": -0.0000027551780864510538
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Duke Energy 3.95 % Due Sep 15, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38405.520000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38570.04000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38552.04000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -18,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.00046668346727148834
                              }, {
                                "type": "percent",
                                "value": -2.9186208542914004e-7
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Golden ST Tob Sec C Tobacco Settlement 5.12 % Due May 31, 2047",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1350000.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1333087.2000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1326240.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -6847.199999999953,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.005136348169872123
                              }, {
                                "type": "percent",
                                "value": -0.00011102433729724412
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Golden ST Tob Sec C Tobacco Settlement 5.75 % Due Jun 1, 2047",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1260000.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1243800,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1256778.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 12978.000000000233,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.010434153400868494
                              }, {
                                "type": "percent",
                                "value": 0.00021043256359441374
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Long Beach Calif HBR Rev Rev BDS 4.00 % Due May 15, 2019",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 40452.840000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38716.560000000005,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 40452.840000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 2456.279999999999,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.06402791155277268
                              }, {
                                "type": "percent",
                                "value": 0.00003982750017766043
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Menlo PK Calif City SCH Dist Go BDS 0.00 % Due Jul 1, 2040",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1752192.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1752192.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1752192.0000000002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 0,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0
                              }, {
                                "type": "percent",
                                "value": 0
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Midamerican Energy Co 5.30 % Due Mar 15, 2018",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 41422.339080000005,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41973.840000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41568.12,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -405.72000000000116,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.009666020549942563
                              }, {
                                "type": "percent",
                                "value": -0.000006578571405572836
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Napa Calif Santn Dist CTFS Par Cops 5.00 % Due Aug 1, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38045.16,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38592.72,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38131.560000000005,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -461.1599999999962,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.011949403929031077
                              }, {
                                "type": "percent",
                                "value": -0.000007477506628694506
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "National Grid PLC 6.30 % Due Aug 1, 2016",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 41097.600000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41767.920000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41082.48,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -685.4400000000023,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.01641068073296449
                              }, {
                                "type": "percent",
                                "value": -0.000011114108213141692
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Norfolk Southern Corp 7.05 % Due May 1, 2037",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 46945.44,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 46945.44,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 45684.54000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 7.275957614183426e-12,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0
                              }, {
                                "type": "percent",
                                "value": 0
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Pacific Gas & Elec Co 3.25 % Due Sep 15, 2021",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 36443.520000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 36476.280000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 36115.920000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -360.3600000000006,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.00987929690198673
                              }, {
                                "type": "percent",
                                "value": -0.000005843078950291393
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Pepsico Inc 3.75 % Due Mar 1, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38118.96000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38498.4,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38247.12,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -251.27999999999884,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.006527024499719439
                              }, {
                                "type": "percent",
                                "value": -0.0000040743947125907765
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Port Oakland CA Rev Inter Lien Rev Ref BDS 5.00 % Due Nov 1, 2017",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 41180.04000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39441.600000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39902.76,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1361.1599999999962,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.035288714560572254
                              }, {
                                "type": "percent",
                                "value": 0.000022070610900151507
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Reynolds R J Tob HLDGS Inc 9.25 % Due Aug 15, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 39547.8,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41373.72000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39009.600000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -2364.1200000000026,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.05714061969772121
                              }, {
                                "type": "percent",
                                "value": -0.000038333166300263294
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Sac Calif City Fing Aut Ref Rev BDS 5.00 % Due Dec 1, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 39448.8,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39307.32000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39448.8,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 141.47999999999593,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.0035993295905189134
                              }, {
                                "type": "percent",
                                "value": 0.000002294035991472975
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "SD CNTY Calif WTR Auth Water Rev BDS 4.00 % Due May 1, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 38529.36000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38528.280000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 38529.36000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 721.0800000000017,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.01905993068485019
                              }, {
                                "type": "percent",
                                "value": 0.000011691995142291378
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "SF Calif City & CNT Lease Rev BDS 5.00 % Due Jun 15, 2022",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 40270.32000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39305.520000000004,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 40270.32000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 964.8000000000029,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.024546170614203878
                              }, {
                                "type": "percent",
                                "value": 0.000015643807779001955
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "SF Calif City & CNT Second Series 5.73 % Due Jun 11, 2031",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 39948.48,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39053.880000000005,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39825.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 771.1200000000026,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.01974502917507819
                              }, {
                                "type": "percent",
                                "value": 0.000012503371739784402
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "SF Calif City & CNT WTR Rev BDS 5.00 % Due Nov 1, 2015",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 41299.920000000006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41536.44,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 41269.32000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 632.8800000000047,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.0155627256171805
                              }, {
                                "type": "percent",
                                "value": 0.00001026187092368864
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "SF Calif City & CNT WTR Rev BDS 6.95 % Due Nov 1, 2050",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 46688.40000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 45603.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 44352.00000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 0,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0
                              }, {
                                "type": "percent",
                                "value": 0
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }, {
                "group_name": "Owner (Down)",
                "group_value": "Directly Owned",
                "level": 3,
                "values": [
                  {
                    "type": "money",
                    "value": 11412837.950131172,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 12209138.16150407,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 11638657.281079324,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": -557509.0766043423,
                    "currency": "USD"
                  }, {
                    "type": "percent",
                    "value": -0.04569464814997896
                  }, {
                    "type": "percent",
                    "value": -0.009039764541300975
                  }
                ],
                "children": [
                  {
                    "group_name": "Holding Status",
                    "group_value": "Current Holding",
                    "level": 4,
                    "values": [
                      {
                        "type": "money",
                        "value": 11412837.950131172,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 12209138.16150407,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 11638657.281079324,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": -557509.0766043423,
                        "currency": "USD"
                      }, {
                        "type": "percent",
                        "value": -0.04569464814997896
                      }, {
                        "type": "percent",
                        "value": -0.009039764541300975
                      }
                    ],
                    "children": [
                      {
                        "group_name": "Asset Class",
                        "group_value": "Equity",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 10752798.650131172,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 11545886.761504069,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 10982219.781079324,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -550695.1766043424,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.04773083747756965
                          }, {
                            "type": "percent",
                            "value": -0.008929280148861775
                          }
                        ],
                        "children": [
                          {
                            "group_name": "Security",
                            "group_value": "Aflac, Inc",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 773996.2160337,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 853079.6719863001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 821862.5183208,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -24973.72293150006,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.02939034020252622
                              }, {
                                "type": "percent",
                                "value": -0.00040493793642873026
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Amazon.Com, Inc",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1218327.10971093,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1435093.353163305,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1292464.525688595,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -142628.82747471007,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.09938644559973776
                              }, {
                                "type": "percent",
                                "value": -0.0023126637238378837
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Apple, Inc.",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1602345.684855546,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1702266.249319794,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1607308.06979106,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -94958.17952873395,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.05578338850733729
                              }, {
                                "type": "percent",
                                "value": -0.0015397051281006093
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Baidu, Inc",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 251366.97313778396,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 307689.681229956,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 287517.98647675803,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -20171.694753197953,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.06555856755599929
                              }, {
                                "type": "percent",
                                "value": -0.0003270751609615776
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Berkshire Hathaway Inc",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1014984.9394992001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1056777.1081632,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1070783.132256,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 14006.024092799984,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.013253527148353981
                              }, {
                                "type": "percent",
                                "value": 0.00022710152223863236
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Boeing Co.",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 1137575.6496792,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1053951.5841768002,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 1100409.3983448,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 53186.187254399876,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.0506990429849482
                              }, {
                                "type": "percent",
                                "value": 0.0008623906404496608
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Chipotle Mexican Grill, Inc",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 3262295.080584,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 3443852.4575562007,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 3294672.1297506006,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -149180.32780560013,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.04331786266809476
                              }, {
                                "type": "percent",
                                "value": -0.0024188934210191766
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "General Electric Company",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 990873.7863488102,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 973398.0581945102,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 926796.1164497101,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -46601.941744800075,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.04787552363853986
                              }, {
                                "type": "percent",
                                "value": -0.0007556299945935915
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Green Mountain Coffee Roasters",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 501033.210282,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 719778.5977139999,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 580405.904001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -139372.69371299993,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.19363272839126414
                              }, {
                                "type": "percent",
                                "value": -0.0022598669466084974
                              }
                            ]
                          }
                        ]
                      }, {
                        "group_name": "Asset Class",
                        "group_value": "Fixed Income",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 660039.3,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 663251.4,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 656437.5000000001,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -6813.900000000023,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.01027348001074709
                          }, {
                            "type": "percent",
                            "value": -0.00011048439243920134
                          }
                        ],
                        "children": [
                          {
                            "group_name": "Security",
                            "group_value": "American Express Co 4.88 % Due Jul 15, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 94106.7,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 94784.40000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 94344.3,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -440.1000000000058,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.0046431691290972545
                              }, {
                                "type": "percent",
                                "value": -0.000007136027988742569
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "East Bay Calif Mun Util Dist W Rev BDS 4.00 % Due Jun 1, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 96615,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 95378.40000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 95378.40000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 0,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0
                              }, {
                                "type": "percent",
                                "value": 0
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "FPL Group Cap Inc 5.35 % Due Jun 15, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 95578.2,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 95585.40000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 95625,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 39.59999999999127,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.00041428921153221376
                              }, {
                                "type": "percent",
                                "value": 6.420965879439665e-7
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "JPMorgan Chase & Co Unsec. Notes 4.75 % Due Jul 15, 2013",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 90823.5,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 92850.3,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 91250.1,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -1600.199999999997,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.01723419310438412
                              }, {
                                "type": "percent",
                                "value": -0.000025946539394650502
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Metlife Inc 5.38 % Due Dec 15, 2012",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 93712.5,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 93150,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 93757.5,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 607.5,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": 0.006521739130434782
                              }, {
                                "type": "percent",
                                "value": 0.000009850345383233477
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Morgan Stanley 2.88 % Due Jul 28, 2014",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 85325.40000000001,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 88021.8,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 84289.5,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -3732.300000000003,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.04240199586920516
                              }, {
                                "type": "percent",
                                "value": -0.00006051760341373224
                              }
                            ]
                          }, {
                            "group_name": "Security",
                            "group_value": "Ohio PWR Co 5.38 % Due Oct 1, 2021",
                            "level": 6,
                            "values": [
                              {
                                "type": "money",
                                "value": 103878,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 103481.1,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": 101792.7,
                                "currency": "USD"
                              }, {
                                "type": "money",
                                "value": -1688.4000000000087,
                                "currency": "USD"
                              }, {
                                "type": "percent",
                                "value": -0.016316022925925686
                              }, {
                                "type": "percent",
                                "value": -0.000027376663613253477
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }, {
            "group_name": "Owner (Down)",
            "group_value": "Directly Owned",
            "level": 2,
            "values": [
              {
                "type": "money",
                "value": 42028564.1595874,
                "currency": "USD"
              }, {
                "type": "money",
                "value": 42445645.1703414,
                "currency": "USD"
              }, {
                "type": "money",
                "value": 42336451.914816,
                "currency": "USD"
              }, {
                "type": "money",
                "value": -490732.6747303987,
                "currency": "USD"
              }, {
                "type": "percent",
                "value": -0.011509297500501158
              }, {
                "type": "percent",
                "value": -0.007957014546390778
              }
            ],
            "children": [
              {
                "group_name": "Holding Status",
                "group_value": "Current Holding",
                "level": 3,
                "values": [
                  {
                    "type": "money",
                    "value": 42028564.1595874,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 42445645.1703414,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": 42336451.914816,
                    "currency": "USD"
                  }, {
                    "type": "money",
                    "value": -490732.6747303987,
                    "currency": "USD"
                  }, {
                    "type": "percent",
                    "value": -0.011509297500501158
                  }, {
                    "type": "percent",
                    "value": -0.007957014546390778
                  }
                ],
                "children": [
                  {
                    "group_name": "Asset Class",
                    "group_value": "Cash & Cash Equivalents",
                    "level": 4,
                    "values": [
                      {
                        "type": "money",
                        "value": 4522893,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 3584496,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 4048725,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": -2,
                        "currency": "USD"
                      }, {
                        "type": "percent",
                        "value": 0
                      }, {
                        "type": "percent",
                        "value": -3.2429120603237784e-8
                      }
                    ],
                    "children": [
                      {
                        "group_name": "Security",
                        "group_value": "Cash",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 4522893,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 3584496,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 4048725,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -2,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": -3.2429120603237784e-8
                          }
                        ]
                      }
                    ]
                  }, {
                    "group_name": "Asset Class",
                    "group_value": "Equity",
                    "level": 4,
                    "values": [
                      {
                        "type": "money",
                        "value": 14354363.1840884,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 15577473.865274899,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 15033957.5173331,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": -507398.5953467991,
                        "currency": "USD"
                      }, {
                        "type": "percent",
                        "value": -0.03259330821114757
                      }, {
                        "type": "percent",
                        "value": -0.008227245121207396
                      }
                    ],
                    "children": [
                      {
                        "group_name": "Security",
                        "group_value": "Hewlett-Packard Company",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 492659.6758712,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 507340.32410729997,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 532888.4651935,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 25548.141086200078,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.05035700864336731
                          }, {
                            "type": "percent",
                            "value": 0.0004142518742364583
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Johnson & Johnson",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 994124.922925,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 995516.3886025001,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1000618.4294200001,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 13914.65677250002,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.013997949380945998
                          }, {
                            "type": "percent",
                            "value": 0.00022562004131403127
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Las Vegas Sands Corp.",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 2498796.6305316,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 2824909.747254,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 2810469.3140412,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -14440.433212799951,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.005111821086261964
                          }, {
                            "type": "percent",
                            "value": -0.00023414527511044503
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "McDonald's",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1552883.0833780998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1478974.1952165,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1521503.6631888,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 53679.5157623,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.03630421027233325
                          }, {
                            "type": "percent",
                            "value": 0.0008703897452895151
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Microsoft",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 840064.62046,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 860420.0324172999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 826494.3458218,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -17770.59774550004,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.020849854094320323
                          }, {
                            "type": "percent",
                            "value": -0.00028814242874022314
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Netflix, Inc",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1305534.7794962,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1534779.3569328,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1206619.2970623001,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -328160.0598704999,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.21381578947368413
                          }, {
                            "type": "percent",
                            "value": -0.005320971079353086
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Oracle Corporation",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1175452.7162349,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1318712.2735713,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1261569.4164314999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -57142.85713980021,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.04333231614281371
                          }, {
                            "type": "percent",
                            "value": -0.0009265463029000841
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Procter & Gamble Company",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1065772.2510156,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1046956.8059946,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1056446.3347878,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 9489.52879319992,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.00906391623691194
                          }, {
                            "type": "percent",
                            "value": 0.00015386853685128886
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Salesforce.Com",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1430900.8288592002,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1779871.6923143999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1582731.8900944002,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -197139.80221999972,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.11076068183524804
                          }, {
                            "type": "percent",
                            "value": -0.0031965352109454073
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Sysco Corp.",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1028469.7508289999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 986476.8682691999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1015658.3629293999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 29181.494660200085,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.029581529581529674
                          }, {
                            "type": "percent",
                            "value": 0.00047316510485918394
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Vmware, Inc",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1969703.9244875999,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 2243516.180595,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 2218957.9983624,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -24558.182232599705,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.010946291560102172
                          }, {
                            "type": "percent",
                            "value": -0.0003982001267086336
                          }
                        ]
                      }
                    ]
                  }, {
                    "group_name": "Asset Class",
                    "group_value": "Alternatives",
                    "level": 4,
                    "values": [
                      {
                        "type": "money",
                        "value": 23151307.975499,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 23283675.3050665,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 23253769.3974829,
                        "currency": "USD"
                      }, {
                        "type": "money",
                        "value": 16667.920616400195,
                        "currency": "USD"
                      }, {
                        "type": "percent",
                        "value": 0.0007170712230973364
                      }, {
                        "type": "percent",
                        "value": 0.0002702630039372177
                      }
                    ],
                    "children": [
                      {
                        "group_name": "Security",
                        "group_value": "Accel Internet Venture Fund Vi LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1100000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1100000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1100000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Anything But The Usd, LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1597770,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1664190,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1616548,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -45288.60000000009,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.027250853198422898
                          }, {
                            "type": "percent",
                            "value": -0.0007343347356758988
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Apollo Investment Fund V",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1614907,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1614907,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1614907,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Blackstone Communications I",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1522387,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1522387,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1522387,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Blue Ridge",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1335005,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1335005,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1335005,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Brevan Howard Master Fund LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1652094,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1652094,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1652094,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Bridgewater All Weather 12% Strategy LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1012502,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1012502,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1012502,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Buckeye Partners LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1109712.230167,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1214928.0575004998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1147482.014338,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -49010.79136249982,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.040775699586931786
                          }, {
                            "type": "percent",
                            "value": -0.0007946884319773157
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Citadel Kensington Global Strategies LTD",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 757000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 757000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 757000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Debt Collectors, LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1574468,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1594264,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1538404,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -48686.39999999991,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.0306673372406235
                          }, {
                            "type": "percent",
                            "value": -0.0007894285686687365
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Enterprise Products Partners LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1371708.5119359998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1372627.0667430998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1392835.2724993,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 20208.205756200245,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.014722284184697928
                          }, {
                            "type": "percent",
                            "value": 0.00032766717082143086
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "GS Capital Partners V LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 523468,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 523468,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 523468,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "GS Distressed Opportunities Fund III",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 305263,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 305263,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 305263,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Horseman Global Fund LTD",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 600000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 600000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 600000,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Kinder Morgan Energy Partners, LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1273574.2973384,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1220722.8917097,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1256224.899746,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 35502.008036300074,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.029082774049217063
                          }, {
                            "type": "percent",
                            "value": 0.000575649450133146
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Kinder Morgan Management, LLC",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1308675.3063251998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1192224.6223487998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1273758.0996923998,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 81533.47734360001,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.0683876811594203
                          }, {
                            "type": "percent",
                            "value": 0.00132202948498848
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "KKR 2006 Fund LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 823100,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 823100,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 823100,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Paulson Credit Opportunities",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 368500,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 368500,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 368500,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 0,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0
                          }, {
                            "type": "percent",
                            "value": 0
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Plains All American Pipeline, L.P.",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 1284629.6297324002,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1221666.6667644,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 1201111.1112072,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": -1943.9791572000831,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": -0.0016142062729210425
                          }, {
                            "type": "percent",
                            "value": -0.00003152076726951102
                          }
                        ]
                      }, {
                        "group_name": "Security",
                        "group_value": "Trading Places, LP",
                        "level": 5,
                        "values": [
                          {
                            "type": "money",
                            "value": 2016544,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 2188826,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 2213180,
                            "currency": "USD"
                          }, {
                            "type": "money",
                            "value": 24354,
                            "currency": "USD"
                          }, {
                            "type": "percent",
                            "value": 0.011126512568838271
                          }, {
                            "type": "percent",
                            "value": 0.00039488940158562645
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "grouping_factors": [
    {
      "display_name": "Owner (Down)",
      "is_time_series": false,
      "template_id": "down_factor"
    }, {
      "display_name": "Holding Status",
      "is_time_series": false,
      "template_id": "holding_period_factor"
    }, {
      "display_name": "Asset Class",
      "is_time_series": false,
      "template_id": "asset_class_factor"
    }, {
      "display_name": "Security",
      "is_time_series": false,
      "template_id": "security_factor"
    }
  ],
  "value_factors": [
    {
      "display_name": "Current Value (Native Currency)",
      "is_time_series": false,
      "template_id": "personal_value_factor"
    }, {
      "display_name": "Sector",
      "is_time_series": false,
      "template_id": "personal_value_factor"
    }, {
      "display_name": "Adjusted Value 11/30/2011 (USD)",
      "is_time_series": false,
      "template_id": "personal_value_factor"
    }, {
      "display_name": "Adjusted Total Return Nov. 2011 (USD)",
      "is_time_series": false,
      "template_id": "absolute_gain_factor"
    }, {
      "display_name": "Adjusted Total Return (%) Nov. 2011 (USD)",
      "is_time_series": false,
      "template_id": "percent_gain_factor"
    }, {
      "display_name": "Adjusted Performance Attribution Nov. 2011 (USD) ",
      "is_time_series": false,
      "template_id": "contribution_to_portfolio_factor"
    }
  ]
};


})();

(function() {


App.data.asset_values = [
  {
    label: "Cash & Cash Equivalent",
    value: 5403418.115000006,
    type: "money"
  }, {
    label: "Fixed Income",
    value: 8231078.16438347,
    type: "money"
  }, {
    label: "Equity",
    value: 12935781.176999997,
    type: "money"
  }, {
    label: "Hedge Fund",
    value: 1621341.246006786,
    type: "money"
  }, {
    label: "Private Equity",
    value: 1574677.59,
    type: "money"
  }, {
    label: "Real Assets",
    value: 10475849.276172025,
    type: "money"
  }
];


})();

(function() {


App.data.many_values = [
  {
    label: "Label 1",
    value: 20
  }, {
    label: "Label 2",
    value: 22
  }, {
    label: "Label 3",
    value: 18
  }, {
    label: "Label 4",
    value: 2
  }, {
    label: "Label 5",
    value: 6
  }, {
    label: "Label 6",
    value: 26
  }, {
    label: "Label 7",
    value: 18
  }, {
    label: "Label 8",
    value: 150
  }, {
    label: "Label 9",
    value: 160
  }, {
    label: "Label 10",
    value: 200
  }, {
    label: "Label 11",
    value: 14
  }, {
    label: "Label 12",
    value: 31
  }, {
    label: "Label 13",
    value: 44
  }, {
    label: "Label 14",
    value: 30
  }, {
    label: "Label 15",
    value: 62
  }, {
    label: "Label 16",
    value: 75
  }, {
    label: "Label 17",
    value: 114
  }, {
    label: "Label 18",
    value: 19
  }, {
    label: "Label 19",
    value: 129
  }, {
    label: "Label 20",
    value: 52
  }, {
    label: "Label 21",
    value: 200
  }, {
    label: "Label 22",
    value: 14
  }, {
    label: "Label 23",
    value: 31
  }, {
    label: "Label 24",
    value: 44
  }, {
    label: "Label 25",
    value: 30
  }, {
    label: "Label 26",
    value: 62
  }
];


})();

(function() {


App.data.high_net_worth_duration = [
  {
    label: "Not Applicable (Modified Duration)",
    value: 369353.20417884,
    type: "money"
  }, {
    label: "2.0 to 4.0",
    value: 39913.94838165567,
    type: "money"
  }, {
    label: "4.0 to 6.0",
    value: 747144.6821651033,
    type: "money"
  }, {
    label: "6.0 to 8.0",
    value: 1107289.153444018,
    type: "money"
  }, {
    label: "8.0 to 10.0",
    value: 784442.9734556648,
    type: "money"
  }, {
    label: "10.0 to 12.0",
    value: 314798.6861845985,
    type: "money"
  }, {
    label: "12.0 to 14.0",
    value: 132820.13222065035,
    type: "money"
  }, {
    label: "14.0 to 16.0",
    value: 180545.78853177986,
    type: "money"
  }
];


})();

(function() {


App.data.single_sector_return = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Aeronautic & astronautic industry",
    group: "Aeronautic & astronautic industry",
    value: 9956.953507739403,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Banks & other credit institutions",
    group: "Banks & other credit institutions",
    value: 18978.05581062734,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Chemicals",
    group: "Chemicals",
    value: 77669.117850293,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Computer hardware & networking",
    group: "Computer hardware & networking",
    value: 6960.703363481491,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Electronics",
    group: "Electronics",
    value: 12529.900459007,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Electronics & semiconductors",
    group: "Electronics & semiconductors",
    value: 2905.426879575807,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Financial, investment & other diversified comp.",
    group: "Financial, investment & other diversified comp.",
    value: 18401.63651741106,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Food & soft drinks",
    group: "Food & soft drinks",
    value: 13733.845828757425,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Health Care",
    group: "Health Care",
    value: 150909.153209184,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Health care & social services",
    group: "Health care & social services",
    value: 8248.064314638228,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Insurance companies",
    group: "Insurance companies",
    value: 7013.878172742705,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Internet, software & IT services",
    group: "Internet, software & IT services",
    value: 59271.18598570356,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Investment Fund",
    group: "Investment Fund",
    value: 15401.9456583827,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Investment trusts/funds + pension funds",
    group: "Investment trusts/funds + pension funds",
    value: 14197.05830132496,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Leisure",
    group: "Leisure",
    value: 1050.24013310,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Lodging & catering ind., leisure facilities",
    group: "Lodging & catering ind., leisure facilities",
    value: 13202.78000233154,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Long Term",
    group: "Long Term",
    value: 4019.481379089517,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Mechanical engineering & industrial equip.",
    group: "Mechanical engineering & industrial equip.",
    value: 4647.603703145614,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Miscellaneous consumer goods",
    group: "Miscellaneous consumer goods",
    value: 3189.180308185896,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Petroleum",
    group: "Petroleum",
    value: 63937.970281974645,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Pharmaceuticals cosmetics & med. products",
    group: "Pharmaceuticals cosmetics & med. products",
    value: 10874.807224610915,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Retail",
    group: "Retail",
    value: 27447.831733878324,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Retail trade & department stores",
    group: "Retail trade & department stores",
    value: 31035.627782905445,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Short Term",
    group: "Short Term",
    value: 8707.749774914644,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Software & Programming",
    group: "Software & Programming",
    value: 73266.4348387686,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Telecommunication",
    group: "Telecommunication",
    value: 9515.74704319803,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Financial analytics software",
    group: "Financial analytics software",
    value: 99310.60662117682,
    type: "money"
  }
];


})();

(function() {


App.data.one_value = [
  {
    label: "Label 1",
    value: 20
  }
];


})();

(function() {


App.data.two_values = [
  {
    label: "Label 1",
    value: 20
  }, {
    label: "Label 2",
    value: -1
  }
];


})();

(function() {


App.data.zero = [
  {
    label: "Label 1",
    value: 0,
    type: "percent"
  }
];


})();

(function() {


App.data.zeroes = [
  {
    label: "Label 1",
    value: 0,
    type: "percent"
  }, {
    label: "Label 2",
    value: 0,
    type: "percent"
  }, {
    label: "Label 3",
    value: 0,
    type: "percent"
  }, {
    label: "Label 4",
    value: 0,
    type: "percent"
  }, {
    label: "Label 5",
    value: 0,
    type: "percent"
  }, {
    label: "Label 6",
    value: 0,
    type: "percent"
  }
];


})();

(function() {


App.data.sum_to_zero = [
  {
    label: "Label 1",
    value: 0,
    type: "percent"
  }, {
    label: "Label 2",
    value: 2,
    type: "percent"
  }, {
    label: "Label 3",
    value: 3,
    type: "percent"
  }, {
    label: "Label 4",
    value: -5,
    type: "percent"
  }, {
    label: "Label 5",
    value: 0,
    type: "percent"
  }, {
    label: "Label 6",
    value: 0,
    type: "percent"
  }
];


})();

(function() {


App.data.bad_range = [
  {
    label: "Label 1",
    value: 200
  }, {
    label: "Label 2",
    value: 220
  }, {
    label: "Label 3",
    value: 0.1
  }, {
    label: "Label 4",
    value: 1
  }, {
    label: "Label 5",
    value: 1
  }, {
    label: "Label 6",
    value: -18
  }, {
    label: "Label 7",
    value: -18
  }, {
    label: "Label 8",
    value: 18
  }
];


})();

(function() {


App.data.two_ranges = [
  {
    label: "Cash & Cash Equivalent",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 5403418.115000006,
    type: "money"
  }, {
    label: "Fixed Income",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 8231078.16438347,
    type: "money"
  }, {
    label: "Equity",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 12935781.176999997,
    type: "money"
  }, {
    label: "Hedge Fund",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 1621341.246006786,
    type: "money"
  }, {
    label: "Private Equity",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 1574677.59,
    type: "money"
  }, {
    label: "Real Assets",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 10475849.276172025,
    type: "money"
  }, {
    label: "Other",
    group: "Bank of America Merrill Lynch Global High Yield Index",
    value: 10475849.276172025,
    type: "money"
  }, {
    label: "Cash & Cash Equivalent",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 1933418.115000006,
    type: "money"
  }, {
    label: "Fixed Income",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 1031078.16438347,
    type: "money"
  }, {
    label: "Equity",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 14235781.176999997,
    type: "money"
  }, {
    label: "Hedge Fund",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 3981341.246006786,
    type: "money"
  }, {
    label: "Private Equity",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 6644677.59,
    type: "money"
  }, {
    label: "Real Assets",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 17513849.276172025,
    type: "money"
  }, {
    label: "Other",
    group: "S&P Goldman Sachs Commodity Total Return Index",
    value: 4758493.276172025,
    type: "money"
  }
];


})();

(function() {


App.data.three_ranges = [
  {
    label: "Label 1",
    group: "Group One",
    value: 20
  }, {
    label: "Label 1",
    group: "Group Two",
    value: 32
  }, {
    label: "Label 1",
    group: "Group Three",
    value: 4
  }, {
    label: "Label 2",
    group: "Group One",
    value: 16
  }, {
    label: "Label 2",
    group: "Group Two",
    value: 17
  }, {
    label: "Label 2",
    group: "Group Three",
    value: -18
  }, {
    label: "Label 3",
    group: "Group One",
    value: -18
  }, {
    label: "Label 3",
    group: "Group Two",
    value: 18
  }, {
    label: "Label 3",
    group: "Group Three",
    value: -19
  }
];


})();

(function() {


App.data.five_ranges = [
  {
    label: "Label 1",
    group: "Group One",
    value: 20
  }, {
    label: "Label 2",
    group: "Group One",
    value: 22
  }, {
    label: "Label 3",
    group: "Group One",
    value: 18
  }, {
    label: "Label 4",
    group: "Group One",
    value: 2
  }, {
    label: "Label 5",
    group: "Group One",
    value: 6
  }, {
    label: "Label 1",
    group: "Group Two",
    value: 26
  }, {
    label: "Label 2",
    group: "Group Two",
    value: 18
  }, {
    label: "Label 3",
    group: "Group Two",
    value: 150
  }, {
    label: "Label 4",
    group: "Group Two",
    value: 160
  }, {
    label: "Label 5",
    group: "Group Two",
    value: 200
  }, {
    label: "Label 1",
    group: "Group Three",
    value: 14
  }, {
    label: "Label 2",
    group: "Group Three",
    value: 31
  }, {
    label: "Label 3",
    group: "Group Three",
    value: 44
  }, {
    label: "Label 4",
    group: "Group Three",
    value: 30
  }, {
    label: "Label 5",
    group: "Group Three",
    value: 62
  }, {
    label: "Label 1",
    group: "Group Four",
    value: 75
  }, {
    label: "Label 2",
    group: "Group Four",
    value: 114
  }, {
    label: "Label 3",
    group: "Group Four",
    value: 19
  }, {
    label: "Label 4",
    group: "Group Four",
    value: 129
  }, {
    label: "Label 5",
    group: "Group Four",
    value: 52
  }, {
    label: "Label 1",
    group: "Group Five",
    value: 200
  }, {
    label: "Label 2",
    group: "Group Five",
    value: 14
  }, {
    label: "Label 3",
    group: "Group Five",
    value: 31
  }, {
    label: "Label 4",
    group: "Group Five",
    value: 44
  }, {
    label: "Label 5",
    group: "Group Five",
    value: 30
  }
];


})();

(function() {


App.data.sector_compare_return = [
  {
    group: "Merrill Lynch",
    label: "Mechanical engineering & industrial equip.",
    value: 4647.603703145614,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Miscellaneous consumer goods",
    value: 3189.180308185896,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Petroleum",
    value: 3937.970281974645,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Pharmaceuticals cosmetics & med. products",
    value: 10874.807224610915,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Retail",
    value: 27447.831733878324,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Retail trade & department stores",
    value: 31035.627782905445,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Short Term",
    value: 8707.749774914644,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Software & Programming",
    value: 117326.4348387686,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Telecommunication",
    value: 9515.74704319803,
    type: "money"
  }, {
    group: "Merrill Lynch",
    label: "Financial analytics software",
    value: 99310.60662117682,
    type: "money"
  }, {
    group: "Barclays",
    label: "Mechanical engineering & industrial equip.",
    value: 6476.03703145614,
    type: "money"
  }, {
    group: "Barclays",
    label: "Miscellaneous consumer goods",
    value: 1891.80308185896,
    type: "money"
  }, {
    group: "Barclays",
    label: "Petroleum",
    value: 39379.70281974645,
    type: "money"
  }, {
    group: "Barclays",
    label: "Pharmaceuticals cosmetics & med. products",
    value: 8748.07224610915,
    type: "money"
  }, {
    group: "Barclays",
    label: "Retail",
    value: 74478.31733878324,
    type: "money"
  }, {
    group: "Barclays",
    label: "Retail trade & department stores",
    value: 10356.27782905445,
    type: "money"
  }, {
    group: "Barclays",
    label: "Short Term",
    value: 7077.49774914644,
    type: "money"
  }, {
    group: "Barclays",
    label: "Software & Programming",
    value: 173264.348387686,
    type: "money"
  }, {
    group: "Barclays",
    label: "Telecommunication",
    value: 5157.4704319803,
    type: "money"
  }, {
    group: "Barclays",
    label: "Financial analytics software",
    value: 93106.0662117682,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Mechanical engineering & industrial equip.",
    value: 4760.3703145614,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Miscellaneous consumer goods",
    value: 8918.0308185896,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Petroleum",
    value: 93797.0281974645,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Pharmaceuticals cosmetics & med. products",
    value: 87480.7224610915,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Retail",
    value: 44783.1733878324,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Retail trade & department stores",
    value: 3562.7782905445,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Short Term",
    value: 774.9774914644,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Software & Programming",
    value: 73264.48387686,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Telecommunication",
    value: 1574.704319803,
    type: "money"
  }, {
    group: "BlackRock",
    label: "Financial analytics software",
    value: 31060.662117682,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Mechanical engineering & industrial equip.",
    value: 7603.703145614,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Miscellaneous consumer goods",
    value: 9180.308185896,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Petroleum",
    value: 37970.281974645,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Pharmaceuticals cosmetics & med. products",
    value: 74807.224610915,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Retail",
    value: 47831.733878324,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Retail trade & department stores",
    value: 35627.782905445,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Short Term",
    value: 7749.774914644,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Software & Programming",
    value: 326434.8387686,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Telecommunication",
    value: 5747.04319803,
    type: "money"
  }, {
    group: "Vanguard",
    label: "Financial analytics software",
    value: 10606.62117682,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Mechanical engineering & industrial equip.",
    value: 6037.03145614,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Miscellaneous consumer goods",
    value: 1803.08185896,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Petroleum",
    value: 79702.81974645,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Pharmaceuticals cosmetics & med. products",
    value: 48072.24610915,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Retail",
    value: 78317.33878324,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Retail trade & department stores",
    value: 56277.82905445,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Short Term",
    value: 7497.74914644,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Software & Programming",
    value: 264348.387686,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Telecommunication",
    value: 7470.4319803,
    type: "money"
  }, {
    group: "Benchmark",
    label: "Financial analytics software",
    value: 6066.2117682,
    type: "money"
  }
];


})();

(function() {


App.data.sepals = [
  {
    sepalLength: 5.1,
    sepalWidth: 3.5,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.9,
    sepalWidth: 3.0,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.7,
    sepalWidth: 3.2,
    petalLength: 1.3,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.6,
    sepalWidth: 3.1,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.6,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.4,
    sepalWidth: 3.9,
    petalLength: 1.7,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 4.6,
    sepalWidth: 3.4,
    petalLength: 1.4,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.4,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.4,
    sepalWidth: 2.9,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.9,
    sepalWidth: 3.1,
    petalLength: 1.5,
    petalWidth: 0.1,
    group: 'setosa'
  }, {
    sepalLength: 5.4,
    sepalWidth: 3.7,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.8,
    sepalWidth: 3.4,
    petalLength: 1.6,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.8,
    sepalWidth: 3.0,
    petalLength: 1.4,
    petalWidth: 0.1,
    group: 'setosa'
  }, {
    sepalLength: 4.3,
    sepalWidth: 3.0,
    petalLength: 1.1,
    petalWidth: 0.1,
    group: 'setosa'
  }, {
    sepalLength: 5.8,
    sepalWidth: 4.0,
    petalLength: 1.2,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.7,
    sepalWidth: 4.4,
    petalLength: 1.5,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 5.4,
    sepalWidth: 3.9,
    petalLength: 1.3,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.5,
    petalLength: 1.4,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 5.7,
    sepalWidth: 3.8,
    petalLength: 1.7,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.8,
    petalLength: 1.5,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 5.4,
    sepalWidth: 3.4,
    petalLength: 1.7,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.7,
    petalLength: 1.5,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 4.6,
    sepalWidth: 3.6,
    petalLength: 1.0,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.3,
    petalLength: 1.7,
    petalWidth: 0.5,
    group: 'setosa'
  }, {
    sepalLength: 4.8,
    sepalWidth: 3.4,
    petalLength: 1.9,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.0,
    petalLength: 1.6,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.4,
    petalLength: 1.6,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 5.2,
    sepalWidth: 3.5,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.2,
    sepalWidth: 3.4,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.7,
    sepalWidth: 3.2,
    petalLength: 1.6,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.8,
    sepalWidth: 3.1,
    petalLength: 1.6,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.4,
    sepalWidth: 3.4,
    petalLength: 1.5,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 5.2,
    sepalWidth: 4.1,
    petalLength: 1.5,
    petalWidth: 0.1,
    group: 'setosa'
  }, {
    sepalLength: 5.5,
    sepalWidth: 4.2,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.9,
    sepalWidth: 3.1,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.2,
    petalLength: 1.2,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.5,
    sepalWidth: 3.5,
    petalLength: 1.3,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.9,
    sepalWidth: 3.6,
    petalLength: 1.4,
    petalWidth: 0.1,
    group: 'setosa'
  }, {
    sepalLength: 4.4,
    sepalWidth: 3.0,
    petalLength: 1.3,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.4,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.5,
    petalLength: 1.3,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 4.5,
    sepalWidth: 2.3,
    petalLength: 1.3,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 4.4,
    sepalWidth: 3.2,
    petalLength: 1.3,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.5,
    petalLength: 1.6,
    petalWidth: 0.6,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.8,
    petalLength: 1.9,
    petalWidth: 0.4,
    group: 'setosa'
  }, {
    sepalLength: 4.8,
    sepalWidth: 3.0,
    petalLength: 1.4,
    petalWidth: 0.3,
    group: 'setosa'
  }, {
    sepalLength: 5.1,
    sepalWidth: 3.8,
    petalLength: 1.6,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 4.6,
    sepalWidth: 3.2,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.3,
    sepalWidth: 3.7,
    petalLength: 1.5,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 5.0,
    sepalWidth: 3.3,
    petalLength: 1.4,
    petalWidth: 0.2,
    group: 'setosa'
  }, {
    sepalLength: 7.0,
    sepalWidth: 3.2,
    petalLength: 4.7,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 6.4,
    sepalWidth: 3.2,
    petalLength: 4.5,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 6.9,
    sepalWidth: 3.1,
    petalLength: 4.9,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 5.5,
    sepalWidth: 2.3,
    petalLength: 4.0,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.5,
    sepalWidth: 2.8,
    petalLength: 4.6,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 5.7,
    sepalWidth: 2.8,
    petalLength: 4.5,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.3,
    sepalWidth: 3.3,
    petalLength: 4.7,
    petalWidth: 1.6,
    group: 'versicolor'
  }, {
    sepalLength: 4.9,
    sepalWidth: 2.4,
    petalLength: 3.3,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 6.6,
    sepalWidth: 2.9,
    petalLength: 4.6,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 5.2,
    sepalWidth: 2.7,
    petalLength: 3.9,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 5.0,
    sepalWidth: 2.0,
    petalLength: 3.5,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 5.9,
    sepalWidth: 3.0,
    petalLength: 4.2,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 6.0,
    sepalWidth: 2.2,
    petalLength: 4.0,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 6.1,
    sepalWidth: 2.9,
    petalLength: 4.7,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 5.6,
    sepalWidth: 2.9,
    petalLength: 3.6,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.1,
    petalLength: 4.4,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 5.6,
    sepalWidth: 3.0,
    petalLength: 4.5,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 5.8,
    sepalWidth: 2.7,
    petalLength: 4.1,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 6.2,
    sepalWidth: 2.2,
    petalLength: 4.5,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 5.6,
    sepalWidth: 2.5,
    petalLength: 3.9,
    petalWidth: 1.1,
    group: 'versicolor'
  }, {
    sepalLength: 5.9,
    sepalWidth: 3.2,
    petalLength: 4.8,
    petalWidth: 1.8,
    group: 'versicolor'
  }, {
    sepalLength: 6.1,
    sepalWidth: 2.8,
    petalLength: 4.0,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.3,
    sepalWidth: 2.5,
    petalLength: 4.9,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 6.1,
    sepalWidth: 2.8,
    petalLength: 4.7,
    petalWidth: 1.2,
    group: 'versicolor'
  }, {
    sepalLength: 6.4,
    sepalWidth: 2.9,
    petalLength: 4.3,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.6,
    sepalWidth: 3.0,
    petalLength: 4.4,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 6.8,
    sepalWidth: 2.8,
    petalLength: 4.8,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.0,
    petalLength: 5.0,
    petalWidth: 1.7,
    group: 'versicolor'
  }, {
    sepalLength: 6.0,
    sepalWidth: 2.9,
    petalLength: 4.5,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 5.7,
    sepalWidth: 2.6,
    petalLength: 3.5,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 5.5,
    sepalWidth: 2.4,
    petalLength: 3.8,
    petalWidth: 1.1,
    group: 'versicolor'
  }, {
    sepalLength: 5.5,
    sepalWidth: 2.4,
    petalLength: 3.7,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 5.8,
    sepalWidth: 2.7,
    petalLength: 3.9,
    petalWidth: 1.2,
    group: 'versicolor'
  }, {
    sepalLength: 6.0,
    sepalWidth: 2.7,
    petalLength: 5.1,
    petalWidth: 1.6,
    group: 'versicolor'
  }, {
    sepalLength: 5.4,
    sepalWidth: 3.0,
    petalLength: 4.5,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 6.0,
    sepalWidth: 3.4,
    petalLength: 4.5,
    petalWidth: 1.6,
    group: 'versicolor'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.1,
    petalLength: 4.7,
    petalWidth: 1.5,
    group: 'versicolor'
  }, {
    sepalLength: 6.3,
    sepalWidth: 2.3,
    petalLength: 4.4,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 5.6,
    sepalWidth: 3.0,
    petalLength: 4.1,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 5.5,
    sepalWidth: 2.5,
    petalLength: 4.0,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 5.5,
    sepalWidth: 2.6,
    petalLength: 4.4,
    petalWidth: 1.2,
    group: 'versicolor'
  }, {
    sepalLength: 6.1,
    sepalWidth: 3.0,
    petalLength: 4.6,
    petalWidth: 1.4,
    group: 'versicolor'
  }, {
    sepalLength: 5.8,
    sepalWidth: 2.6,
    petalLength: 4.0,
    petalWidth: 1.2,
    group: 'versicolor'
  }, {
    sepalLength: 5.0,
    sepalWidth: 2.3,
    petalLength: 3.3,
    petalWidth: 1.0,
    group: 'versicolor'
  }, {
    sepalLength: 5.6,
    sepalWidth: 2.7,
    petalLength: 4.2,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 5.7,
    sepalWidth: 3.0,
    petalLength: 4.2,
    petalWidth: 1.2,
    group: 'versicolor'
  }, {
    sepalLength: 5.7,
    sepalWidth: 2.9,
    petalLength: 4.2,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.2,
    sepalWidth: 2.9,
    petalLength: 4.3,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 5.1,
    sepalWidth: 2.5,
    petalLength: 3.0,
    petalWidth: 1.1,
    group: 'versicolor'
  }, {
    sepalLength: 5.7,
    sepalWidth: 2.8,
    petalLength: 4.1,
    petalWidth: 1.3,
    group: 'versicolor'
  }, {
    sepalLength: 6.3,
    sepalWidth: 3.3,
    petalLength: 6.0,
    petalWidth: 2.5,
    group: 'virginica'
  }, {
    sepalLength: 5.8,
    sepalWidth: 2.7,
    petalLength: 5.1,
    petalWidth: 1.9,
    group: 'virginica'
  }, {
    sepalLength: 7.1,
    sepalWidth: 3.0,
    petalLength: 5.9,
    petalWidth: 2.1,
    group: 'virginica'
  }, {
    sepalLength: 6.3,
    sepalWidth: 2.9,
    petalLength: 5.6,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.5,
    sepalWidth: 3.0,
    petalLength: 5.8,
    petalWidth: 2.2,
    group: 'virginica'
  }, {
    sepalLength: 7.6,
    sepalWidth: 3.0,
    petalLength: 6.6,
    petalWidth: 2.1,
    group: 'virginica'
  }, {
    sepalLength: 4.9,
    sepalWidth: 2.5,
    petalLength: 4.5,
    petalWidth: 1.7,
    group: 'virginica'
  }, {
    sepalLength: 7.3,
    sepalWidth: 2.9,
    petalLength: 6.3,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.7,
    sepalWidth: 2.5,
    petalLength: 5.8,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 7.2,
    sepalWidth: 3.6,
    petalLength: 6.1,
    petalWidth: 2.5,
    group: 'virginica'
  }, {
    sepalLength: 6.5,
    sepalWidth: 3.2,
    petalLength: 5.1,
    petalWidth: 2.0,
    group: 'virginica'
  }, {
    sepalLength: 6.4,
    sepalWidth: 2.7,
    petalLength: 5.3,
    petalWidth: 1.9,
    group: 'virginica'
  }, {
    sepalLength: 6.8,
    sepalWidth: 3.0,
    petalLength: 5.5,
    petalWidth: 2.1,
    group: 'virginica'
  }, {
    sepalLength: 5.7,
    sepalWidth: 2.5,
    petalLength: 5.0,
    petalWidth: 2.0,
    group: 'virginica'
  }, {
    sepalLength: 5.8,
    sepalWidth: 2.8,
    petalLength: 5.1,
    petalWidth: 2.4,
    group: 'virginica'
  }, {
    sepalLength: 6.4,
    sepalWidth: 3.2,
    petalLength: 5.3,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 6.5,
    sepalWidth: 3.0,
    petalLength: 5.5,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 7.7,
    sepalWidth: 3.8,
    petalLength: 6.7,
    petalWidth: 2.2,
    group: 'virginica'
  }, {
    sepalLength: 7.7,
    sepalWidth: 2.6,
    petalLength: 6.9,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 6.0,
    sepalWidth: 2.2,
    petalLength: 5.0,
    petalWidth: 1.5,
    group: 'virginica'
  }, {
    sepalLength: 6.9,
    sepalWidth: 3.2,
    petalLength: 5.7,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 5.6,
    sepalWidth: 2.8,
    petalLength: 4.9,
    petalWidth: 2.0,
    group: 'virginica'
  }, {
    sepalLength: 7.7,
    sepalWidth: 2.8,
    petalLength: 6.7,
    petalWidth: 2.0,
    group: 'virginica'
  }, {
    sepalLength: 6.3,
    sepalWidth: 2.7,
    petalLength: 4.9,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.3,
    petalLength: 5.7,
    petalWidth: 2.1,
    group: 'virginica'
  }, {
    sepalLength: 7.2,
    sepalWidth: 3.2,
    petalLength: 6.0,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.2,
    sepalWidth: 2.8,
    petalLength: 4.8,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.1,
    sepalWidth: 3.0,
    petalLength: 4.9,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.4,
    sepalWidth: 2.8,
    petalLength: 5.6,
    petalWidth: 2.1,
    group: 'virginica'
  }, {
    sepalLength: 7.2,
    sepalWidth: 3.0,
    petalLength: 5.8,
    petalWidth: 1.6,
    group: 'virginica'
  }, {
    sepalLength: 7.4,
    sepalWidth: 2.8,
    petalLength: 6.1,
    petalWidth: 1.9,
    group: 'virginica'
  }, {
    sepalLength: 7.9,
    sepalWidth: 3.8,
    petalLength: 6.4,
    petalWidth: 2.0,
    group: 'virginica'
  }, {
    sepalLength: 6.4,
    sepalWidth: 2.8,
    petalLength: 5.6,
    petalWidth: 2.2,
    group: 'virginica'
  }, {
    sepalLength: 6.3,
    sepalWidth: 2.8,
    petalLength: 5.1,
    petalWidth: 1.5,
    group: 'virginica'
  }, {
    sepalLength: 6.1,
    sepalWidth: 2.6,
    petalLength: 5.6,
    petalWidth: 1.4,
    group: 'virginica'
  }, {
    sepalLength: 7.7,
    sepalWidth: 3.0,
    petalLength: 6.1,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 6.3,
    sepalWidth: 3.4,
    petalLength: 5.6,
    petalWidth: 2.4,
    group: 'virginica'
  }, {
    sepalLength: 6.4,
    sepalWidth: 3.1,
    petalLength: 5.5,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.0,
    sepalWidth: 3.0,
    petalLength: 4.8,
    petalWidth: 1.8,
    group: 'virginica'
  }, {
    sepalLength: 6.9,
    sepalWidth: 3.1,
    petalLength: 5.4,
    petalWidth: 2.1,
    group: 'virginica'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.1,
    petalLength: 5.6,
    petalWidth: 2.4,
    group: 'virginica'
  }, {
    sepalLength: 6.9,
    sepalWidth: 3.1,
    petalLength: 5.1,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 5.8,
    sepalWidth: 2.7,
    petalLength: 5.1,
    petalWidth: 1.9,
    group: 'virginica'
  }, {
    sepalLength: 6.8,
    sepalWidth: 3.2,
    petalLength: 5.9,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.3,
    petalLength: 5.7,
    petalWidth: 2.5,
    group: 'virginica'
  }, {
    sepalLength: 6.7,
    sepalWidth: 3.0,
    petalLength: 5.2,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 6.3,
    sepalWidth: 2.5,
    petalLength: 5.0,
    petalWidth: 1.9,
    group: 'virginica'
  }, {
    sepalLength: 6.5,
    sepalWidth: 3.0,
    petalLength: 5.2,
    petalWidth: 2.0,
    group: 'virginica'
  }, {
    sepalLength: 6.2,
    sepalWidth: 3.4,
    petalLength: 5.4,
    petalWidth: 2.3,
    group: 'virginica'
  }, {
    sepalLength: 5.9,
    sepalWidth: 3.0,
    petalLength: 5.1,
    petalWidth: 1.8,
    group: 'virginica'
  }
];


})();

(function() {


App.data.groupedMoney = [
  {
    group: "Cash",
    xValue: 0.0915981001931350,
    yValue: 0.0804410390131541
  }, {
    group: "Investment Grade",
    xValue: -0.012867651474625,
    yValue: 0.0512250395861894
  }, {
    group: "High Yield",
    xValue: 0.1146312318222022,
    yValue: 0.2163129187250687
  }, {
    group: "Value",
    xValue: 0.6374091269925063,
    yValue: 0.10074171943564902
  }, {
    group: "Growth",
    xValue: -0.2947777704540345,
    yValue: 0.24950077509252144
  }, {
    group: "Directional",
    xValue: 0.02987519458727168,
    yValue: 0.029635401795167875
  }, {
    group: "Relative Value",
    xValue: -0.09569219640756767,
    yValue: 0.009220157989642461
  }, {
    group: "Tactical",
    xValue: 0.10008114769529128,
    yValue: 0.05765241751521731
  }, {
    group: "Agriculture",
    xValue: -0.37607356395333114,
    yValue: 0.034742737850069066
  }, {
    group: "Art",
    xValue: 3.3197211825930815,
    yValue: 0.13789386518401808
  }, {
    group: "Buyout",
    xValue: 0.019197687785704524,
    yValue: 0.29156199641011393
  }, {
    group: "Energy",
    xValue: 0.026160853602207837,
    yValue: 0.04422240117969545
  }, {
    group: "Industrial Metals",
    xValue: -0.4336241324616037,
    yValue: -0.1212570493221228
  }, {
    group: "Municipal Bonds",
    xValue: 0.21108601344106037,
    yValue: 0.060125232218492954
  }, {
    group: "Precious Metals",
    xValue: -0.40681455559410074,
    yValue: -0.1684063268162467
  }, {
    group: "Real Estate",
    xValue: -0.25926052510725767,
    yValue: -0.07375676387763123
  }, {
    group: "Venture",
    xValue: -0.09699806589049279,
    yValue: -0.049638457268871825
  }
];


})();

(function() {


App.data.groupedPercent = [
  {
    group: "Energy",
    xValue: 0.017,
    yValue: 0.03
  }, {
    group: "Energy",
    xValue: 0.044,
    yValue: 0.048
  }, {
    group: "Energy",
    xValue: 0.005,
    yValue: 0.01,
    group: "Industrial Metals",
    xValue: -0.28,
    yValue: -0.08
  }, {
    group: "Industrial Metals",
    xValue: -0.90,
    yValue: -0.08
  }, {
    group: "Industrial Metals",
    xValue: -0.44,
    yValue: -0.16
  }, {
    group: "Municipal Bonds",
    xValue: 0.14,
    yValue: 0.04
  }, {
    group: "Municipal Bonds",
    xValue: 0.24,
    yValue: 0.83
  }, {
    group: "Municipal Bonds",
    xValue: 0.39,
    yValue: 0.48
  }, {
    group: "Precious Metals",
    xValue: -0.12,
    yValue: -0.22
  }, {
    group: "Precious Metals",
    xValue: -0.09,
    yValue: -0.70
  }, {
    group: "Precious Metals",
    xValue: -0.70,
    yValue: -0.88
  }, {
    group: "Real Estate",
    xValue: -0.28,
    yValue: -0.91
  }, {
    group: "Real Estate",
    xValue: -0.40,
    yValue: -0.71
  }, {
    group: "Real Estate",
    xValue: -0.35,
    yValue: -0.17
  }, {
    group: "Venture",
    xValue: -0.46,
    yValue: -0.30
  }, {
    group: "Venture",
    xValue: -0.65,
    yValue: -0.92
  }, {
    group: "Venture",
    xValue: -0.37,
    yValue: -0.30
  }
];


})();

(function() {


App.data.ungroupedMoney = [
  {
    xValue: 0.0915981001931350,
    yValue: 0.0804410390131541
  }, {
    xValue: -0.012867651474625,
    yValue: 0.0512250395861894
  }, {
    xValue: 0.1146312318222022,
    yValue: 0.2163129187250687
  }, {
    xValue: 0.6374091269925063,
    yValue: 0.10074171943564902
  }, {
    xValue: -0.2947777704540345,
    yValue: 0.24950077509252144
  }, {
    xValue: 0.02987519458727168,
    yValue: 0.029635401795167875
  }, {
    xValue: -0.09569219640756767,
    yValue: 0.009220157989642461
  }, {
    xValue: 0.10008114769529128,
    yValue: 0.05765241751521731
  }, {
    xValue: -0.37607356395333114,
    yValue: 0.034742737850069066
  }, {
    xValue: 3.3197211825930815,
    yValue: 0.13789386518401808
  }, {
    xValue: 0.019197687785704524,
    yValue: 0.29156199641011393
  }, {
    xValue: 0.026160853602207837,
    yValue: 0.04422240117969545
  }, {
    xValue: -0.4336241324616037,
    yValue: -0.1212570493221228
  }, {
    xValue: 0.21108601344106037,
    yValue: 0.060125232218492954
  }, {
    xValue: -0.40681455559410074,
    yValue: -0.1684063268162467
  }, {
    xValue: -0.25926052510725767,
    yValue: -0.07375676387763123
  }, {
    xValue: -0.09699806589049279,
    yValue: -0.049638457268871825
  }
];


})();

(function() {


App.data.ungroupedPercent = [
  {
    xValue: 0.017440569068138557,
    yValue: 0.029481600786463634
  }, {
    xValue: -0.28908275497440244,
    yValue: -0.08083803288141521
  }, {
    xValue: 0.14072400896070691,
    yValue: 0.04008348814566197
  }, {
    xValue: -0.2712097037294005,
    yValue: -0.11227088454416446
  }, {
    xValue: -0.1728403500715051,
    yValue: -0.04917117591842082
  }, {
    xValue: -0.06466537726032852,
    yValue: -0.03309230484591455
  }
];


})();

(function() {


App.data.groupedZero = [
  {
    group: "Cash",
    xValue: 0,
    yValue: 0
  }
];


})();

(function() {


App.data.groupedZeroes = [
  {
    group: "Energy",
    xValue: 0,
    yValue: 0
  }, {
    group: "Industrial Metals",
    xValue: 0,
    yValue: 0
  }, {
    group: "Municipal Bonds",
    xValue: 0,
    yValue: 0
  }, {
    group: "Precious Metals",
    xValue: 0,
    yValue: 0
  }, {
    group: "Real Estate",
    xValue: 0,
    yValue: 0
  }, {
    group: "Venture",
    xValue: 0,
    yValue: 0
  }
];


})();

(function() {


App.data.ungroupedZero = [
  {
    xValue: 0,
    yValue: 0
  }
];


})();

(function() {


App.data.ungroupedZeroes = [
  {
    xValue: 0,
    yValue: 0
  }, {
    xValue: 0,
    yValue: 0
  }, {
    xValue: 0,
    yValue: 0
  }, {
    xValue: 0,
    yValue: 0
  }, {
    xValue: 0,
    yValue: 0
  }, {
    xValue: 0,
    yValue: 0
  }
];


})();

(function() {


App.data.daily_curr_value = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 43642.83058384
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 43682.88915361
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 44073.26541992
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 43960.89079724
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 43830.11730889
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 43836.09425964
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 43836.98702062
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 43810.160309985
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 43845.01459874
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 43834.58089744
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 43946.88897166
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 44008.05339702
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 44002.03240921
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 44002.92517018
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 43883.751494944
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 43787.478592515
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 43800.91393495
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 43847.45659791
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 43806.06566759
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 43761.361287594
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 43760.77428893
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 43753.75257796
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 43797.0534512
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 43903.166108675
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 43528.911187135
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 43528.5087995
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 43536.43765646
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 43535.151219256
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 43593.26305722
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 43605.73629416
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 43467.68957965
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 42771.6341555
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 42952.52450345
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 42949.3252776
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 42965.12680685
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 42788.365361154
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 42999.018564746
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 42984.25380657
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 43092.03838536
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 43239.54054056
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 43251.102895156
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 43266.851351626
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 43198.25866338
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 43127.899708465
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 43092.78262602
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 43059.753658235
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 43031.82903179
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 43039.052389316
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 43028.129793495
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 42949.12505133
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 42969.85994651
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 41166.50141647
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 40973.68578022
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 41144.59044995
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 41103.62357324
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 41089.28626931
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 40810.757803045
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 40960.365781054
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 40990.341687664
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 41038.33765783
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 41123.78119157
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 41122.26395758
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 41111.862666905
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 41105.36785514
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 41338.68798077
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 41318.38568769
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 41288.000519715
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 41394.8935722
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 41327.87259761
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 41389.726178005
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 41304.35617159
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 41339.87327992
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 41494.74761456
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 41560.61293533
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 41503.2480122
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 41530.226376854
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 41497.11765335
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 41446.59964011
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 41502.52936411
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 41524.3780276
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 41671.35545982
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 41669.92976583
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 41720.179477125
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 41628.44929372
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 41587.2875385
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 41523.13958358
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 41581.906624086
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 41559.74815625
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 41587.646175556
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 41603.58765722
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 41396.90719793
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 41383.563815154
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 41192.78391157
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 41253.35731214
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 41317.76603217
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 41323.089508615
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 41243.78152139
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 41291.290488206
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 41339.92400218
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 41546.78601642
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 41603.411002316
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 41559.51486835
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 41482.91847159
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 41480.73691452
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 41139.44190527
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 41322.227731675
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 41058.799596176
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 39228.076058425
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 39323.23871247
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 39268.47259191
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 39253.67428885
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 39350.86202348
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 39497.54428209
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 39529.82300201
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 39695.87041424
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 39856.110916235
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 39904.348645695
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 39911.55678164
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 40117.15288461
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 40302.42957168
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 40154.01754071
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 40334.40355735
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 40417.538894475
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 40378.92107112
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 40323.981287375
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 40406.30461705
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 40468.537492536
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 40571.28189174
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 40486.976005994
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 40497.55562255
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 40470.31212439
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 40452.748340756
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 40407.250740774
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 40384.5789883
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 40339.10700085
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 40344.09590606
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 40393.32096114
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 40398.06808723
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 40375.67488961
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 40511.88696648
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 40458.99458108
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 40252.87627769
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 40265.55702015
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 40224.564452775
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 40257.45817048
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 40232.16724148
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 40212.897360876
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 40206.02274663
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 40134.19722524
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 40249.289020866
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 40165.45544968
  }
];


})();

(function() {


App.data.daily_diff_value = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 18906.16756396448
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: -81.88174493145198
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 7668.285394726423
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 15691.573969392295
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: -1243.3329588975612
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 150.9883430309419
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 150.98834303101467
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 3689.3975359826
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 10854.617944980855
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 4221.853159514663
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: -1382.8924349151202
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 5151.497854198984
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 150.98834303101467
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 150.9883430309419
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 5120.705077310005
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 80.42882321364596
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: -6983.5249100778165
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 5546.2193753881875
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 688.5232226108928
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 150.9883430310001
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 150.98834303098556
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 150.98834303101467
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 4771.750015606653
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 2638.7290240126313
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: -252.40349297580542
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: -5975.353242993122
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 150.98834303098556
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 150.98834303101467
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: -224.51826106346562
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: -3561.299739448281
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: -39114.1846980103
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: -3004.8070567730756
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 28985.222029993594
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 36067.782601640836
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 7155.540864258626
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 3057.082481897334
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 9664.343976292163
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 11024.042183886828
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: -797.6062488996395
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 4467.015623335843
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: -8102.584347467637
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 6475.629164514845
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: -21996.487195635695
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 13746.431262874983
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: -11544.579075738497
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 674.0534342490428
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 8459.229323447551
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 385.55776789825177
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: -5088.592449003729
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: -23980.954232565433
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 1372.8150626712304
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 6108.621223123395
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 16456.03568351795
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 8366.808915380025
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 10756.771081393024
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: -5709.3196025346115
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 10562.990618457698
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 24530.336438635946
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: -27543.33353726998
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: -1099.3193060211197
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 17097.428197102134
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 18351.182142015394
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: -5438.5816175941145
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: -9558.039562293416
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 15512.563818356211
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 8103.972861559683
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: -8492.926687262589
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 16032.787471600474
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: -8636.367249113493
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: -3923.3282271965727
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 27558.901286512417
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: -8705.786753859968
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 32941.58219245359
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: -22106.61887991907
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: -26592.962443980345
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 22832.930084342064
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: -9824.212130601038
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 957.148549634454
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: -9332.370146249305
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 23931.53615016558
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: -15369.811860782225
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: -9955.107717556384
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 22876.97326221357
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: -8532.068986779967
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: -26959.255535770062
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: -1244.3926144636644
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 10428.230410374264
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: -22909.64924169406
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 12361.617305379717
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 104.8117882328952
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: -12502.644985674444
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: -930.2052741374646
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 5911.677521090285
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 20545.486079551818
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 15608.459637649365
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: -17964.441301195344
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: -35712.85293745024
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: -8607.209423272929
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 18938.579405832585
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: -5055.500731702035
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 18373.76768190589
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: -6790.677214091236
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: -25256.280052292146
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: -677.7283875108551
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 13545.795997831388
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: -12843.324625216599
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 16790.31713535499
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: -7952.210730611085
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 16784.313202745332
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: -7085.6005088222155
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: -6789.8251549821725
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 2867.3024208504503
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 2803.8109605529608
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: -2940.638707620252
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 5737.473281129394
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 18063.757233058226
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 17440.711890732295
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 3338.13229386523
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 3595.0493101803877
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 25645.52165084405
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: -9263.596851021866
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 20140.807651176103
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: -19444.1026413145
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: -25864.47356295507
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: -27130.587600514264
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 2290.1152453525283
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 11163.488250262504
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 14024.090751272808
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: -2739.41582625256
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 22899.75389957903
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 1056.0803715038783
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: -8035.210168191756
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: -6662.088046967197
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: -7823.643528741202
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 24079.296314467385
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: -5079.715034555891
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: -1003.3710055832489
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 19244.788471372587
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: -10607.682577451182
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 14625.514709651085
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: -8085.676308046008
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: -20605.36478831657
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 24204.288403731953
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: -21038.928193213796
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 9453.792172169735
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: -11270.94202436485
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: -7654.1761879601545
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: -8174.0433713275415
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: -9504.156427265232
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: -9769.160472144315
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 11718.60614444795
  }
];


})();

(function() {


App.data.daily_two_series = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 63642.83058384
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 63682.88915361
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 64073.26541992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 63960.89079724
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 63830.11730889
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 63836.09425964
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 63836.98702062
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 63810.160309985
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 63845.01459874
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 63834.58089744
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 63946.88897166
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 64008.05339702
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 64002.03240921
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 64002.92517018
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 63883.751494944
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 63787.478592515
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 63800.91393495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 63847.45659791
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 63806.06566759
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 63761.361287594
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 63760.77428893
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 63753.75257796
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 63797.0534512
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 63903.166108675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 63528.911187135
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 63528.5087995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 63536.43765646
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 63535.151219256
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 63593.26305722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 63605.73629416
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 63467.68957965
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 62771.6341555
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 62952.52450345
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 62949.3252776
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 62965.12680685
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 62788.365361154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 62999.018564746
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 62984.25380657
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 63092.03838536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 63239.54054056
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 63251.102895156
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 63266.851351626
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 63198.25866338
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 63127.899708465
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 63092.78262602
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 63059.753658235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 63031.82903179
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 63039.052389316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 63028.129793495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 62949.12505133
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 62969.85994651
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 61166.50141647
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 60973.68578022
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 61144.59044995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 61103.62357324
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 61089.28626931
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 60810.757803045
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 60960.365781054
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 60990.341687664
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 61038.33765783
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 61123.78119157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 61122.26395758
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 61111.862666905
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 61105.36785514
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 61338.68798077
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 61318.38568769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 61288.000519715
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 61394.8935722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 61327.87259761
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 61389.726178005
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 61304.35617159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 61339.87327992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 61494.74761456
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 61560.61293533
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 61503.2480122
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 61530.226376854
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 61497.11765335
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 61446.59964011
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 61502.52936411
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 61524.3780276
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 61671.35545982
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 61669.92976583
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 61720.179477125
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 61628.44929372
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 61587.2875385
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 61523.13958358
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 61581.906624086
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 61559.74815625
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 61587.646175556
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 61603.58765722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 61396.90719793
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 61383.563815154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 61192.78391157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 61253.35731214
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 61317.76603217
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 61323.089508615
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 61243.78152139
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 61291.290488206
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 61339.92400218
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 61546.78601642
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 61603.411002316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 61559.51486835
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 61482.91847159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 61480.73691452
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 61139.44190527
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 61322.227731675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 61058.799596176
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 59228.076058425
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 59323.23871247
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 59268.47259191
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 59253.67428885
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 59350.86202348
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 59497.54428209
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 59529.82300201
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 59695.87041424
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 59856.110916235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 59904.348645695
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 59911.55678164
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 60117.15288461
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 60302.42957168
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 60154.01754071
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 60334.40355735
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 60417.538894475
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 60378.92107112
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 60323.981287375
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 60406.30461705
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 60468.537492536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 60571.28189174
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 60486.976005994
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 60497.55562255
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 60470.31212439
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 60452.748340756
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 60407.250740774
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 60384.5789883
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 60339.10700085
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 60344.09590606
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 60393.32096114
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 60398.06808723
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 60375.67488961
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 60511.88696648
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 60458.99458108
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 60252.87627769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 60265.55702015
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 60224.564452775
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 60257.45817048
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 60232.16724148
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 60212.897360876
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 60206.02274663
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 60134.19722524
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 60249.289020866
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 60165.45544968
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 73642.83058384
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 73682.88915361
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 74073.26541992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 73960.89079724
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 73830.11730889
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 73836.09425964
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 73836.98702062
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 73810.160309985
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 73845.01459874
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 73834.58089744
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 73946.88897166
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 74008.05339702
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 74002.03240921
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 74002.92517018
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 73883.751494944
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 73787.478592515
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 73800.91393495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 73847.45659791
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 73806.06566759
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 73761.361287594
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 73760.77428893
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 73753.75257796
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 73797.0534512
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 73903.166108675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 73528.911187135
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 73528.5087995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 73536.43765646
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 73535.151219256
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 73593.26305722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 73605.73629416
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 73467.68957965
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 72771.6341555
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 72952.52450345
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 72949.3252776
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 72965.12680685
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 72788.365361154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 72999.018564746
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 72984.25380657
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 73092.03838536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 73239.54054056
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 73251.102895156
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 73266.851351626
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 73198.25866338
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 73127.899708465
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 73092.78262602
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 73059.753658235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 73031.82903179
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 73039.052389316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 73028.129793495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 72949.12505133
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 72969.85994651
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 71166.50141647
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 70973.68578022
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 71144.59044995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 71103.62357324
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 71089.28626931
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 70810.757803045
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 70960.365781054
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 70990.341687664
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 71038.33765783
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 71123.78119157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 71122.26395758
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 71111.862666905
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 71105.36785514
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 71338.68798077
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 71318.38568769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 71288.000519715
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 71394.8935722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 71327.87259761
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 71389.726178005
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 71304.35617159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 71339.87327992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 71494.74761456
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 71560.61293533
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 71503.2480122
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 71530.226376854
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 71497.11765335
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 71446.59964011
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 71502.52936411
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 71524.3780276
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 71671.35545982
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 71669.92976583
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 71720.179477125
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 71628.44929372
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 71587.2875385
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 71523.13958358
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 71581.906624086
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 71559.74815625
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 71587.646175556
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 71603.58765722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 71396.90719793
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 71383.563815154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 71192.78391157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 71253.35731214
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 71317.76603217
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 71323.089508615
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 71243.78152139
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 71291.290488206
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 71339.92400218
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 71546.78601642
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 71603.411002316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 71559.51486835
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 71482.91847159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 71480.73691452
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 71139.44190527
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 71322.227731675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 71058.799596176
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 69228.076058425
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 69323.23871247
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 69268.47259191
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 69253.67428885
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 69350.86202348
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 69497.54428209
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 69529.82300201
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 69695.87041424
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 69856.110916235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 69904.348645695
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 69911.55678164
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 70117.15288461
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 70302.42957168
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 70154.01754071
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 70334.40355735
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 70417.538894475
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 70378.92107112
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 70323.981287375
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 70406.30461705
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 70468.537492536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 70571.28189174
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 70486.976005994
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 70497.55562255
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 70470.31212439
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 70452.748340756
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 70407.250740774
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 70384.5789883
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 70339.10700085
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 70344.09590606
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 70393.32096114
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 70398.06808723
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 70375.67488961
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 70511.88696648
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 70458.99458108
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 70252.87627769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 70265.55702015
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 70224.564452775
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 70257.45817048
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 70232.16724148
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 70212.897360876
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 70206.02274663
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 70134.19722524
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 70249.289020866
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 70165.45544968
  }
];


})();

(function() {


App.data.daily_three_series = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 43642.83058384
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 43682.88915361
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 44073.26541992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 43960.89079724
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 43830.11730889
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 43836.09425964
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 43836.98702062
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 43810.160309985
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 43845.01459874
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 43834.58089744
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 43946.88897166
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 44008.05339702
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 44002.03240921
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 44002.92517018
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 43883.751494944
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 43787.478592515
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 43800.91393495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 43847.45659791
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 43806.06566759
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 43761.361287594
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 43760.77428893
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 43753.75257796
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 43797.0534512
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 43903.166108675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 43528.911187135
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 43528.5087995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 43536.43765646
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 43535.151219256
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 43593.26305722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 43605.73629416
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 43467.68957965
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 42771.6341555
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 42952.52450345
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 42949.3252776
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 42965.12680685
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 42788.365361154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 42999.018564746
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 42984.25380657
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 43092.03838536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 43239.54054056
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 43251.102895156
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 43266.851351626
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 43198.25866338
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 43127.899708465
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 43092.78262602
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 43059.753658235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 43031.82903179
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 43039.052389316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 43028.129793495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 42949.12505133
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 42969.85994651
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 41166.50141647
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 40973.68578022
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 41144.59044995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 41103.62357324
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 41089.28626931
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 40810.757803045
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 40960.365781054
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 40990.341687664
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 41038.33765783
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 41123.78119157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 41122.26395758
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 41111.862666905
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 41105.36785514
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 41338.68798077
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 41318.38568769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 41288.000519715
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 41394.8935722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 41327.87259761
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 41389.726178005
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 41304.35617159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 41339.87327992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 41494.74761456
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 41560.61293533
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 41503.2480122
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 41530.226376854
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 41497.11765335
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 41446.59964011
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 41502.52936411
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 41524.3780276
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 41671.35545982
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 41669.92976583
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 41720.179477125
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 41628.44929372
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 41587.2875385
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 41523.13958358
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 41581.906624086
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 41559.74815625
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 41587.646175556
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 41603.58765722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 41396.90719793
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 41383.563815154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 41192.78391157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 41253.35731214
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 41317.76603217
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 41323.089508615
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 41243.78152139
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 41291.290488206
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 41339.92400218
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 41546.78601642
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 41603.411002316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 41559.51486835
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 41482.91847159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 41480.73691452
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 41139.44190527
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 41322.227731675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 41058.799596176
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 39228.076058425
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 39323.23871247
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 39268.47259191
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 39253.67428885
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 39350.86202348
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 39497.54428209
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 39529.82300201
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 39695.87041424
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 39856.110916235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 39904.348645695
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 39911.55678164
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 40117.15288461
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 40302.42957168
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 40154.01754071
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 40334.40355735
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 40417.538894475
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 40378.92107112
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 40323.981287375
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 40406.30461705
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 40468.537492536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 40571.28189174
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 40486.976005994
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 40497.55562255
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 40470.31212439
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 40452.748340756
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 40407.250740774
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 40384.5789883
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 40339.10700085
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 40344.09590606
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 40393.32096114
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 40398.06808723
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 40375.67488961
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 40511.88696648
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 40458.99458108
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 40252.87627769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 40265.55702015
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 40224.564452775
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 40257.45817048
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 40232.16724148
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 40212.897360876
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 40206.02274663
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 40134.19722524
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 40249.289020866
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 40165.45544968
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 53642.83058384
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 53682.88915361
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 54073.26541992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 53960.89079724
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 53830.11730889
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 53836.09425964
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 53836.98702062
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 53810.160309985
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 53845.01459874
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 53834.58089744
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 53946.88897166
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 54008.05339702
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 54002.03240921
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 54002.92517018
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 53883.751494944
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 53787.478592515
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 53800.91393495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 53847.45659791
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 53806.06566759
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 53761.361287594
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 53760.77428893
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 53753.75257796
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 53797.0534512
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 53903.166108675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 53528.911187135
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 53528.5087995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 53536.43765646
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 53535.151219256
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 53593.26305722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 53605.73629416
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 53467.68957965
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 52771.6341555
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 52952.52450345
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 52949.3252776
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 52965.12680685
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 52788.365361154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 52999.018564746
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 52984.25380657
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 53092.03838536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 53239.54054056
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 53251.102895156
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 53266.851351626
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 53198.25866338
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 53127.899708465
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 53092.78262602
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 53059.753658235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 53031.82903179
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 53039.052389316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 53028.129793495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 52949.12505133
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 52969.85994651
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 51166.50141647
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 50973.68578022
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 51144.59044995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 51103.62357324
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 51089.28626931
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 50810.757803045
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 50960.365781054
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 50990.341687664
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 51038.33765783
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 51123.78119157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 51122.26395758
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 51111.862666905
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 51105.36785514
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 51338.68798077
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 51318.38568769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 51288.000519715
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 51394.8935722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 51327.87259761
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 51389.726178005
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 51304.35617159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 51339.87327992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 51494.74761456
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 51560.61293533
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 51503.2480122
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 51530.226376854
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 51497.11765335
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 51446.59964011
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 51502.52936411
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 51524.3780276
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 51671.35545982
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 51669.92976583
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 51720.179477125
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 51628.44929372
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 51587.2875385
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 51523.13958358
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 51581.906624086
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 51559.74815625
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 51587.646175556
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 51603.58765722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 51396.90719793
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 51383.563815154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 51192.78391157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 51253.35731214
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 51317.76603217
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 51323.089508615
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 51243.78152139
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 51291.290488206
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 51339.92400218
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 51546.78601642
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 51603.411002316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 51559.51486835
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 51482.91847159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 51480.73691452
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 51139.44190527
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 51322.227731675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 51058.799596176
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 49228.076058425
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 49323.23871247
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 49268.47259191
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 49253.67428885
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 49350.86202348
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 49497.54428209
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 49529.82300201
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 49695.87041424
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 49856.110916235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 49904.348645695
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 49911.55678164
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 50117.15288461
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 50302.42957168
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 50154.01754071
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 50334.40355735
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 50417.538894475
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 50378.92107112
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 50323.981287375
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 50406.30461705
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 50468.537492536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 50571.28189174
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 50486.976005994
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 50497.55562255
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 50470.31212439
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 50452.748340756
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 50407.250740774
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 50384.5789883
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 50339.10700085
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 50344.09590606
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 50393.32096114
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 50398.06808723
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 50375.67488961
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 50511.88696648
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 50458.99458108
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 50252.87627769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 50265.55702015
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 50224.564452775
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 50257.45817048
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 50232.16724148
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 50212.897360876
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 50206.02274663
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 50134.19722524
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 50249.289020866
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 50165.45544968
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 63642.83058384
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 63682.88915361
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 64073.26541992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 63960.89079724
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 63830.11730889
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 63836.09425964
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 63836.98702062
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 63810.160309985
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 63845.01459874
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 63834.58089744
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 63946.88897166
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 64008.05339702
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 64002.03240921
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 64002.92517018
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 63883.751494944
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 63787.478592515
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 63800.91393495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 63847.45659791
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 63806.06566759
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 63761.361287594
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 63760.77428893
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 63753.75257796
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 63797.0534512
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 63903.166108675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 63528.911187135
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 63528.5087995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 63536.43765646
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 63535.151219256
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 63593.26305722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 63605.73629416
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 63467.68957965
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 62771.6341555
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 62952.52450345
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 62949.3252776
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 62965.12680685
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 62788.365361154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 62999.018564746
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 62984.25380657
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 63092.03838536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 63239.54054056
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 63251.102895156
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 63266.851351626
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 63198.25866338
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 63127.899708465
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 63092.78262602
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 63059.753658235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 63031.82903179
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 63039.052389316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 63028.129793495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 62949.12505133
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 62969.85994651
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 61166.50141647
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 60973.68578022
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 61144.59044995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 61103.62357324
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 61089.28626931
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 60810.757803045
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 60960.365781054
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 60990.341687664
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 61038.33765783
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 61123.78119157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 61122.26395758
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 61111.862666905
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 61105.36785514
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 61338.68798077
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 61318.38568769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 61288.000519715
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 61394.8935722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 61327.87259761
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 61389.726178005
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 61304.35617159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 61339.87327992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 61494.74761456
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 61560.61293533
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 61503.2480122
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 61530.226376854
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 61497.11765335
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 61446.59964011
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 61502.52936411
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 61524.3780276
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 61671.35545982
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 61669.92976583
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 61720.179477125
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 61628.44929372
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 61587.2875385
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 61523.13958358
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 61581.906624086
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 61559.74815625
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 61587.646175556
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 61603.58765722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 61396.90719793
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 61383.563815154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 61192.78391157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 61253.35731214
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 61317.76603217
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 61323.089508615
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 61243.78152139
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 61291.290488206
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 61339.92400218
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 61546.78601642
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 61603.411002316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 61559.51486835
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 61482.91847159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 61480.73691452
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 61139.44190527
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 61322.227731675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 61058.799596176
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 59228.076058425
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 59323.23871247
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 59268.47259191
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 59253.67428885
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 59350.86202348
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 59497.54428209
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 59529.82300201
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 59695.87041424
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 59856.110916235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 59904.348645695
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 59911.55678164
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 60117.15288461
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 60302.42957168
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 60154.01754071
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 60334.40355735
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 60417.538894475
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 60378.92107112
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 60323.981287375
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 60406.30461705
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 60468.537492536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 60571.28189174
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 60486.976005994
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 60497.55562255
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 60470.31212439
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 60452.748340756
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 60407.250740774
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 60384.5789883
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 60339.10700085
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 60344.09590606
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 60393.32096114
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 60398.06808723
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 60375.67488961
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 60511.88696648
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 60458.99458108
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 60252.87627769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 60265.55702015
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 60224.564452775
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 60257.45817048
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 60232.16724148
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 60212.897360876
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 60206.02274663
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 60134.19722524
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 60249.289020866
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 60165.45544968
  }
];


})();

(function() {


App.data.daily_four_series = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 43642.83058384
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 43682.88915361
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 44073.26541992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 43960.89079724
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 43830.11730889
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 43836.09425964
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 43836.98702062
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 43810.160309985
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 43845.01459874
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 43834.58089744
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 43946.88897166
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 44008.05339702
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 44002.03240921
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 44002.92517018
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 43883.751494944
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 43787.478592515
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 43800.91393495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 43847.45659791
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 43806.06566759
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 43761.361287594
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 43760.77428893
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 43753.75257796
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 43797.0534512
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 43903.166108675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 43528.911187135
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 43528.5087995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 43536.43765646
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 43535.151219256
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 43593.26305722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 43605.73629416
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 43467.68957965
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 42771.6341555
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 42952.52450345
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 42949.3252776
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 42965.12680685
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 42788.365361154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 42999.018564746
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 42984.25380657
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 43092.03838536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 43239.54054056
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 43251.102895156
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 43266.851351626
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 43198.25866338
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 43127.899708465
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 43092.78262602
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 43059.753658235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 43031.82903179
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 43039.052389316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 43028.129793495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 42949.12505133
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 42969.85994651
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 41166.50141647
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 40973.68578022
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 41144.59044995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 41103.62357324
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 41089.28626931
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 40810.757803045
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 40960.365781054
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 40990.341687664
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 41038.33765783
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 41123.78119157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 41122.26395758
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 41111.862666905
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 41105.36785514
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 41338.68798077
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 41318.38568769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 41288.000519715
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 41394.8935722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 41327.87259761
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 41389.726178005
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 41304.35617159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 41339.87327992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 41494.74761456
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 41560.61293533
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 41503.2480122
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 41530.226376854
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 41497.11765335
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 41446.59964011
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 41502.52936411
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 41524.3780276
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 41671.35545982
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 41669.92976583
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 41720.179477125
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 41628.44929372
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 41587.2875385
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 41523.13958358
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 41581.906624086
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 41559.74815625
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 41587.646175556
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 41603.58765722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 41396.90719793
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 41383.563815154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 41192.78391157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 41253.35731214
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 41317.76603217
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 41323.089508615
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 41243.78152139
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 41291.290488206
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 41339.92400218
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 41546.78601642
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 41603.411002316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 41559.51486835
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 41482.91847159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 41480.73691452
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 41139.44190527
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 41322.227731675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 41058.799596176
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 39228.076058425
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 39323.23871247
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 39268.47259191
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 39253.67428885
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 39350.86202348
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 39497.54428209
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 39529.82300201
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 39695.87041424
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 39856.110916235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 39904.348645695
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 39911.55678164
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 40117.15288461
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 40302.42957168
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 40154.01754071
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 40334.40355735
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 40417.538894475
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 40378.92107112
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 40323.981287375
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 40406.30461705
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 40468.537492536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 40571.28189174
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 40486.976005994
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 40497.55562255
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 40470.31212439
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 40452.748340756
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 40407.250740774
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 40384.5789883
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 40339.10700085
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 40344.09590606
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 40393.32096114
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 40398.06808723
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 40375.67488961
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 40511.88696648
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 40458.99458108
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 40252.87627769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 40265.55702015
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 40224.564452775
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 40257.45817048
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 40232.16724148
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 40212.897360876
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 40206.02274663
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 40134.19722524
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 40249.289020866
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 40165.45544968
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 53642.83058384
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 53682.88915361
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 54073.26541992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 53960.89079724
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 53830.11730889
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 53836.09425964
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 53836.98702062
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 53810.160309985
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 53845.01459874
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 53834.58089744
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 53946.88897166
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 54008.05339702
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 54002.03240921
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 54002.92517018
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 53883.751494944
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 53787.478592515
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 53800.91393495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 53847.45659791
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 53806.06566759
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 53761.361287594
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 53760.77428893
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 53753.75257796
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 53797.0534512
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 53903.166108675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 53528.911187135
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 53528.5087995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 53536.43765646
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 53535.151219256
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 53593.26305722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 53605.73629416
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 53467.68957965
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 52771.6341555
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 52952.52450345
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 52949.3252776
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 52965.12680685
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 52788.365361154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 52999.018564746
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 52984.25380657
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 53092.03838536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 53239.54054056
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 53251.102895156
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 53266.851351626
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 53198.25866338
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 53127.899708465
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 53092.78262602
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 53059.753658235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 53031.82903179
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 53039.052389316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 53028.129793495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 52949.12505133
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 52969.85994651
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 51166.50141647
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 50973.68578022
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 51144.59044995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 51103.62357324
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 51089.28626931
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 50810.757803045
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 50960.365781054
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 50990.341687664
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 51038.33765783
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 51123.78119157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 51122.26395758
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 51111.862666905
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 51105.36785514
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 51338.68798077
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 51318.38568769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 51288.000519715
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 51394.8935722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 51327.87259761
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 51389.726178005
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 51304.35617159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 51339.87327992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 51494.74761456
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 51560.61293533
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 51503.2480122
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 51530.226376854
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 51497.11765335
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 51446.59964011
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 51502.52936411
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 51524.3780276
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 51671.35545982
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 51669.92976583
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 51720.179477125
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 51628.44929372
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 51587.2875385
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 51523.13958358
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 51581.906624086
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 51559.74815625
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 51587.646175556
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 51603.58765722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 51396.90719793
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 51383.563815154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 51192.78391157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 51253.35731214
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 51317.76603217
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 51323.089508615
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 51243.78152139
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 51291.290488206
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 51339.92400218
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 51546.78601642
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 51603.411002316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 51559.51486835
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 51482.91847159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 51480.73691452
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 51139.44190527
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 51322.227731675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 51058.799596176
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 49228.076058425
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 49323.23871247
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 49268.47259191
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 49253.67428885
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 49350.86202348
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 49497.54428209
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 49529.82300201
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 49695.87041424
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 49856.110916235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 49904.348645695
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 49911.55678164
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 50117.15288461
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 50302.42957168
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 50154.01754071
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 50334.40355735
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 50417.538894475
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 50378.92107112
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 50323.981287375
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 50406.30461705
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 50468.537492536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 50571.28189174
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 50486.976005994
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 50497.55562255
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 50470.31212439
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 50452.748340756
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 50407.250740774
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 50384.5789883
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 50339.10700085
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 50344.09590606
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 50393.32096114
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 50398.06808723
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 50375.67488961
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 50511.88696648
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 50458.99458108
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 50252.87627769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 50265.55702015
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 50224.564452775
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 50257.45817048
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 50232.16724148
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 50212.897360876
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 50206.02274663
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 50134.19722524
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 50249.289020866
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 50165.45544968
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 63642.83058384
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 63682.88915361
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 64073.26541992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 63960.89079724
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 63830.11730889
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 63836.09425964
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 63836.98702062
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 63810.160309985
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 63845.01459874
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 63834.58089744
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 63946.88897166
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 64008.05339702
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 64002.03240921
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 64002.92517018
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 63883.751494944
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 63787.478592515
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 63800.91393495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 63847.45659791
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 63806.06566759
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 63761.361287594
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 63760.77428893
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 63753.75257796
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 63797.0534512
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 63903.166108675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 63528.911187135
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 63528.5087995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 63536.43765646
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 63535.151219256
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 63593.26305722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 63605.73629416
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 63467.68957965
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 62771.6341555
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 62952.52450345
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 62949.3252776
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 62965.12680685
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 62788.365361154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 62999.018564746
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 62984.25380657
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 63092.03838536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 63239.54054056
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 63251.102895156
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 63266.851351626
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 63198.25866338
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 63127.899708465
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 63092.78262602
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 63059.753658235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 63031.82903179
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 63039.052389316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 63028.129793495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 62949.12505133
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 62969.85994651
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 61166.50141647
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 60973.68578022
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 61144.59044995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 61103.62357324
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 61089.28626931
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 60810.757803045
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 60960.365781054
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 60990.341687664
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 61038.33765783
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 61123.78119157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 61122.26395758
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 61111.862666905
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 61105.36785514
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 61338.68798077
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 61318.38568769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 61288.000519715
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 61394.8935722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 61327.87259761
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 61389.726178005
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 61304.35617159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 61339.87327992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 61494.74761456
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 61560.61293533
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 61503.2480122
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 61530.226376854
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 61497.11765335
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 61446.59964011
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 61502.52936411
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 61524.3780276
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 61671.35545982
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 61669.92976583
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 61720.179477125
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 61628.44929372
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 61587.2875385
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 61523.13958358
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 61581.906624086
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 61559.74815625
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 61587.646175556
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 61603.58765722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 61396.90719793
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 61383.563815154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 61192.78391157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 61253.35731214
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 61317.76603217
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 61323.089508615
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 61243.78152139
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 61291.290488206
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 61339.92400218
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 61546.78601642
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 61603.411002316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 61559.51486835
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 61482.91847159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 61480.73691452
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 61139.44190527
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 61322.227731675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 61058.799596176
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 59228.076058425
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 59323.23871247
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 59268.47259191
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 59253.67428885
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 59350.86202348
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 59497.54428209
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 59529.82300201
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 59695.87041424
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 59856.110916235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 59904.348645695
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 59911.55678164
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 60117.15288461
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 60302.42957168
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 60154.01754071
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 60334.40355735
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 60417.538894475
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 60378.92107112
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 60323.981287375
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 60406.30461705
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 60468.537492536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 60571.28189174
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 60486.976005994
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 60497.55562255
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 60470.31212439
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 60452.748340756
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 60407.250740774
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 60384.5789883
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 60339.10700085
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 60344.09590606
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 60393.32096114
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 60398.06808723
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 60375.67488961
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 60511.88696648
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 60458.99458108
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 60252.87627769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 60265.55702015
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 60224.564452775
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 60257.45817048
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 60232.16724148
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 60212.897360876
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 60206.02274663
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 60134.19722524
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 60249.289020866
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 60165.45544968
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 73642.83058384
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 73682.88915361
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 74073.26541992
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 73960.89079724
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 73830.11730889
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 73836.09425964
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 73836.98702062
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 73810.160309985
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 73845.01459874
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 73834.58089744
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 73946.88897166
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 74008.05339702
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 74002.03240921
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 74002.92517018
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 73883.751494944
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 73787.478592515
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 73800.91393495
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 73847.45659791
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 73806.06566759
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 73761.361287594
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 73760.77428893
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 73753.75257796
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 73797.0534512
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 73903.166108675
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 73528.911187135
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 73528.5087995
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 73536.43765646
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 73535.151219256
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 73593.26305722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 73605.73629416
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 73467.68957965
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 72771.6341555
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 72952.52450345
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 72949.3252776
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 72965.12680685
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 72788.365361154
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 72999.018564746
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 72984.25380657
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 73092.03838536
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 73239.54054056
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 73251.102895156
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 73266.851351626
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 73198.25866338
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 73127.899708465
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 73092.78262602
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 73059.753658235
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 73031.82903179
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 73039.052389316
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 73028.129793495
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 72949.12505133
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 72969.85994651
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 71166.50141647
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 70973.68578022
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 71144.59044995
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 71103.62357324
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 71089.28626931
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 70810.757803045
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 70960.365781054
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 70990.341687664
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 71038.33765783
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 71123.78119157
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 71122.26395758
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 71111.862666905
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 71105.36785514
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 71338.68798077
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 71318.38568769
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 71288.000519715
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 71394.8935722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 71327.87259761
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 71389.726178005
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 71304.35617159
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 71339.87327992
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 71494.74761456
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 71560.61293533
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 71503.2480122
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 71530.226376854
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 71497.11765335
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 71446.59964011
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 71502.52936411
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 71524.3780276
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 71671.35545982
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 71669.92976583
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 71720.179477125
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 71628.44929372
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 71587.2875385
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 71523.13958358
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 71581.906624086
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 71559.74815625
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 71587.646175556
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 71603.58765722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 71396.90719793
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 71383.563815154
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 71192.78391157
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 71253.35731214
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 71317.76603217
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 71323.089508615
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 71243.78152139
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 71291.290488206
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 71339.92400218
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 71546.78601642
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 71603.411002316
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 71559.51486835
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 71482.91847159
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 71480.73691452
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 71139.44190527
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 71322.227731675
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 71058.799596176
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 69228.076058425
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 69323.23871247
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 69268.47259191
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 69253.67428885
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 69350.86202348
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 69497.54428209
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 69529.82300201
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 69695.87041424
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 69856.110916235
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 69904.348645695
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 69911.55678164
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 70117.15288461
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 70302.42957168
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 70154.01754071
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 70334.40355735
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 70417.538894475
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 70378.92107112
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 70323.981287375
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 70406.30461705
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 70468.537492536
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 70571.28189174
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 70486.976005994
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 70497.55562255
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 70470.31212439
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 70452.748340756
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 70407.250740774
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 70384.5789883
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 70339.10700085
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 70344.09590606
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 70393.32096114
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 70398.06808723
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 70375.67488961
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 70511.88696648
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 70458.99458108
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 70252.87627769
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 70265.55702015
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 70224.564452775
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 70257.45817048
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 70232.16724148
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 70212.897360876
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 70206.02274663
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 70134.19722524
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 70249.289020866
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 70165.45544968
  }
];


})();

(function() {


App.data.daily_five_series = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 43642.83058384
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 43682.88915361
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 44073.26541992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 43960.89079724
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 43830.11730889
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 43836.09425964
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 43836.98702062
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 43810.160309985
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 43845.01459874
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 43834.58089744
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 43946.88897166
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 44008.05339702
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 44002.03240921
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 44002.92517018
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 43883.751494944
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 43787.478592515
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 43800.91393495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 43847.45659791
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 43806.06566759
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 43761.361287594
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 43760.77428893
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 43753.75257796
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 43797.0534512
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 43903.166108675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 43528.911187135
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 43528.5087995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 43536.43765646
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 43535.151219256
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 43593.26305722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 43605.73629416
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 43467.68957965
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 42771.6341555
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 42952.52450345
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 42949.3252776
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 42965.12680685
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 42788.365361154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 42999.018564746
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 42984.25380657
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 43092.03838536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 43239.54054056
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 43251.102895156
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 43266.851351626
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 43198.25866338
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 43127.899708465
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 43092.78262602
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 43059.753658235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 43031.82903179
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 43039.052389316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 43028.129793495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 42949.12505133
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 42969.85994651
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 41166.50141647
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 40973.68578022
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 41144.59044995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 41103.62357324
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 41089.28626931
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 40810.757803045
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 40960.365781054
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 40990.341687664
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 41038.33765783
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 41123.78119157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 41122.26395758
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 41111.862666905
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 41105.36785514
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 41338.68798077
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 41318.38568769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 41288.000519715
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 41394.8935722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 41327.87259761
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 41389.726178005
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 41304.35617159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 41339.87327992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 41494.74761456
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 41560.61293533
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 41503.2480122
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 41530.226376854
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 41497.11765335
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 41446.59964011
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 41502.52936411
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 41524.3780276
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 41671.35545982
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 41669.92976583
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 41720.179477125
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 41628.44929372
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 41587.2875385
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 41523.13958358
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 41581.906624086
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 41559.74815625
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 41587.646175556
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 41603.58765722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 41396.90719793
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 41383.563815154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 41192.78391157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 41253.35731214
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 41317.76603217
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 41323.089508615
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 41243.78152139
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 41291.290488206
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 41339.92400218
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 41546.78601642
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 41603.411002316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 41559.51486835
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 41482.91847159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 41480.73691452
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 41139.44190527
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 41322.227731675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 41058.799596176
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 39228.076058425
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 39323.23871247
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 39268.47259191
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 39253.67428885
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 39350.86202348
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 39497.54428209
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 39529.82300201
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 39695.87041424
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 39856.110916235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 39904.348645695
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 39911.55678164
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 40117.15288461
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 40302.42957168
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 40154.01754071
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 40334.40355735
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 40417.538894475
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 40378.92107112
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 40323.981287375
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 40406.30461705
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 40468.537492536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 40571.28189174
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 40486.976005994
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 40497.55562255
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 40470.31212439
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 40452.748340756
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 40407.250740774
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 40384.5789883
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 40339.10700085
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 40344.09590606
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 40393.32096114
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 40398.06808723
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 40375.67488961
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 40511.88696648
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 40458.99458108
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 40252.87627769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 40265.55702015
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 40224.564452775
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 40257.45817048
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 40232.16724148
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 40212.897360876
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 40206.02274663
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 40134.19722524
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 40249.289020866
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 40165.45544968
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 53642.83058384
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 53682.88915361
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 54073.26541992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 53960.89079724
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 53830.11730889
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 53836.09425964
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 53836.98702062
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 53810.160309985
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 53845.01459874
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 53834.58089744
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 53946.88897166
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 54008.05339702
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 54002.03240921
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 54002.92517018
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 53883.751494944
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 53787.478592515
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 53800.91393495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 53847.45659791
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 53806.06566759
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 53761.361287594
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 53760.77428893
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 53753.75257796
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 53797.0534512
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 53903.166108675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 53528.911187135
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 53528.5087995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 53536.43765646
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 53535.151219256
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 53593.26305722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 53605.73629416
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 53467.68957965
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 52771.6341555
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 52952.52450345
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 52949.3252776
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 52965.12680685
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 52788.365361154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 52999.018564746
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 52984.25380657
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 53092.03838536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 53239.54054056
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 53251.102895156
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 53266.851351626
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 53198.25866338
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 53127.899708465
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 53092.78262602
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 53059.753658235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 53031.82903179
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 53039.052389316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 53028.129793495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 52949.12505133
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 52969.85994651
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 51166.50141647
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 50973.68578022
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 51144.59044995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 51103.62357324
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 51089.28626931
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 50810.757803045
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 50960.365781054
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 50990.341687664
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 51038.33765783
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 51123.78119157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 51122.26395758
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 51111.862666905
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 51105.36785514
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 51338.68798077
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 51318.38568769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 51288.000519715
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 51394.8935722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 51327.87259761
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 51389.726178005
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 51304.35617159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 51339.87327992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 51494.74761456
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 51560.61293533
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 51503.2480122
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 51530.226376854
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 51497.11765335
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 51446.59964011
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 51502.52936411
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 51524.3780276
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 51671.35545982
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 51669.92976583
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 51720.179477125
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 51628.44929372
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 51587.2875385
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 51523.13958358
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 51581.906624086
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 51559.74815625
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 51587.646175556
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 51603.58765722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 51396.90719793
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 51383.563815154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 51192.78391157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 51253.35731214
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 51317.76603217
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 51323.089508615
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 51243.78152139
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 51291.290488206
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 51339.92400218
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 51546.78601642
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 51603.411002316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 51559.51486835
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 51482.91847159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 51480.73691452
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 51139.44190527
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 51322.227731675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 51058.799596176
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 49228.076058425
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 49323.23871247
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 49268.47259191
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 49253.67428885
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 49350.86202348
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 49497.54428209
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 49529.82300201
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 49695.87041424
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 49856.110916235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 49904.348645695
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 49911.55678164
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 50117.15288461
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 50302.42957168
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 50154.01754071
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 50334.40355735
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 50417.538894475
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 50378.92107112
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 50323.981287375
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 50406.30461705
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 50468.537492536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 50571.28189174
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 50486.976005994
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 50497.55562255
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 50470.31212439
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 50452.748340756
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 50407.250740774
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 50384.5789883
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 50339.10700085
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 50344.09590606
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 50393.32096114
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 50398.06808723
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 50375.67488961
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 50511.88696648
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 50458.99458108
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 50252.87627769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 50265.55702015
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 50224.564452775
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 50257.45817048
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 50232.16724148
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 50212.897360876
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 50206.02274663
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 50134.19722524
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 50249.289020866
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 50165.45544968
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 63642.83058384
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 63682.88915361
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 64073.26541992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 63960.89079724
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 63830.11730889
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 63836.09425964
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 63836.98702062
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 63810.160309985
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 63845.01459874
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 63834.58089744
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 63946.88897166
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 64008.05339702
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 64002.03240921
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 64002.92517018
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 63883.751494944
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 63787.478592515
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 63800.91393495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 63847.45659791
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 63806.06566759
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 63761.361287594
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 63760.77428893
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 63753.75257796
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 63797.0534512
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 63903.166108675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 63528.911187135
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 63528.5087995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 63536.43765646
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 63535.151219256
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 63593.26305722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 63605.73629416
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 63467.68957965
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 62771.6341555
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 62952.52450345
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 62949.3252776
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 62965.12680685
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 62788.365361154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 62999.018564746
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 62984.25380657
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 63092.03838536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 63239.54054056
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 63251.102895156
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 63266.851351626
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 63198.25866338
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 63127.899708465
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 63092.78262602
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 63059.753658235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 63031.82903179
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 63039.052389316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 63028.129793495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 62949.12505133
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 62969.85994651
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 61166.50141647
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 60973.68578022
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 61144.59044995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 61103.62357324
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 61089.28626931
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 60810.757803045
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 60960.365781054
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 60990.341687664
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 61038.33765783
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 61123.78119157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 61122.26395758
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 61111.862666905
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 61105.36785514
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 61338.68798077
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 61318.38568769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 61288.000519715
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 61394.8935722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 61327.87259761
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 61389.726178005
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 61304.35617159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 61339.87327992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 61494.74761456
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 61560.61293533
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 61503.2480122
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 61530.226376854
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 61497.11765335
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 61446.59964011
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 61502.52936411
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 61524.3780276
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 61671.35545982
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 61669.92976583
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 61720.179477125
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 61628.44929372
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 61587.2875385
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 61523.13958358
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 61581.906624086
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 61559.74815625
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 61587.646175556
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 61603.58765722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 61396.90719793
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 61383.563815154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 61192.78391157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 61253.35731214
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 61317.76603217
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 61323.089508615
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 61243.78152139
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 61291.290488206
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 61339.92400218
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 61546.78601642
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 61603.411002316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 61559.51486835
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 61482.91847159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 61480.73691452
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 61139.44190527
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 61322.227731675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 61058.799596176
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 59228.076058425
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 59323.23871247
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 59268.47259191
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 59253.67428885
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 59350.86202348
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 59497.54428209
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 59529.82300201
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 59695.87041424
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 59856.110916235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 59904.348645695
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 59911.55678164
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 60117.15288461
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 60302.42957168
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 60154.01754071
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 60334.40355735
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 60417.538894475
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 60378.92107112
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 60323.981287375
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 60406.30461705
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 60468.537492536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 60571.28189174
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 60486.976005994
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 60497.55562255
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 60470.31212439
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 60452.748340756
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 60407.250740774
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 60384.5789883
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 60339.10700085
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 60344.09590606
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 60393.32096114
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 60398.06808723
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 60375.67488961
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 60511.88696648
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 60458.99458108
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 60252.87627769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 60265.55702015
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 60224.564452775
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 60257.45817048
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 60232.16724148
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 60212.897360876
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 60206.02274663
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 60134.19722524
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 60249.289020866
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 60165.45544968
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 73642.83058384
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 73682.88915361
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 74073.26541992
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 73960.89079724
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 73830.11730889
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 73836.09425964
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 73836.98702062
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 73810.160309985
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 73845.01459874
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 73834.58089744
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 73946.88897166
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 74008.05339702
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 74002.03240921
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 74002.92517018
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 73883.751494944
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 73787.478592515
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 73800.91393495
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 73847.45659791
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 73806.06566759
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 73761.361287594
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 73760.77428893
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 73753.75257796
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 73797.0534512
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 73903.166108675
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 73528.911187135
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 73528.5087995
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 73536.43765646
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 73535.151219256
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 73593.26305722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 73605.73629416
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 73467.68957965
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 72771.6341555
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 72952.52450345
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 72949.3252776
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 72965.12680685
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 72788.365361154
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 72999.018564746
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 72984.25380657
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 73092.03838536
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 73239.54054056
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 73251.102895156
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 73266.851351626
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 73198.25866338
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 73127.899708465
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 73092.78262602
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 73059.753658235
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 73031.82903179
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 73039.052389316
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 73028.129793495
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 72949.12505133
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 72969.85994651
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 71166.50141647
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 70973.68578022
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 71144.59044995
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 71103.62357324
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 71089.28626931
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 70810.757803045
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 70960.365781054
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 70990.341687664
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 71038.33765783
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 71123.78119157
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 71122.26395758
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 71111.862666905
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 71105.36785514
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 71338.68798077
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 71318.38568769
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 71288.000519715
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 71394.8935722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 71327.87259761
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 71389.726178005
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 71304.35617159
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 71339.87327992
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 71494.74761456
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 71560.61293533
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 71503.2480122
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 71530.226376854
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 71497.11765335
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 71446.59964011
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 71502.52936411
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 71524.3780276
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 71671.35545982
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 71669.92976583
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 71720.179477125
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 71628.44929372
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 71587.2875385
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 71523.13958358
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 71581.906624086
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 71559.74815625
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 71587.646175556
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 71603.58765722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 71396.90719793
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 71383.563815154
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 71192.78391157
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 71253.35731214
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 71317.76603217
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 71323.089508615
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 71243.78152139
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 71291.290488206
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 71339.92400218
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 71546.78601642
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 71603.411002316
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 71559.51486835
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 71482.91847159
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 71480.73691452
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 71139.44190527
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 71322.227731675
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 71058.799596176
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 69228.076058425
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 69323.23871247
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 69268.47259191
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 69253.67428885
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 69350.86202348
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 69497.54428209
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 69529.82300201
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 69695.87041424
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 69856.110916235
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 69904.348645695
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 69911.55678164
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 70117.15288461
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 70302.42957168
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 70154.01754071
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 70334.40355735
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 70417.538894475
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 70378.92107112
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 70323.981287375
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 70406.30461705
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 70468.537492536
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 70571.28189174
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 70486.976005994
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 70497.55562255
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 70470.31212439
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 70452.748340756
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 70407.250740774
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 70384.5789883
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 70339.10700085
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 70344.09590606
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 70393.32096114
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 70398.06808723
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 70375.67488961
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 70511.88696648
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 70458.99458108
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 70252.87627769
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 70265.55702015
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 70224.564452775
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 70257.45817048
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 70232.16724148
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 70212.897360876
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 70206.02274663
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 70134.19722524
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 70249.289020866
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 70165.45544968
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 83642.83058384
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 83682.88915361
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 84073.26541992
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 83960.89079724
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 83830.11730889
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 83836.09425964
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 83836.98702062
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 83810.160309985
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 83845.01459874
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 83834.58089744
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 83946.88897166
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 84008.05339702
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 84002.03240921
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 84002.92517018
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 83883.751494944
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 83787.478592515
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 83800.91393495
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 83847.45659791
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 83806.06566759
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 83761.361287594
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 83760.77428893
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 83753.75257796
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 83797.0534512
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 83903.166108675
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 83528.911187135
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 83528.5087995
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 83536.43765646
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 83535.151219256
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 83593.26305722
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 83605.73629416
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 83467.68957965
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 82771.6341555
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 82952.52450345
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 82949.3252776
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 82965.12680685
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 82788.365361154
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 82999.018564746
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 82984.25380657
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 83092.03838536
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 83239.54054056
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 83251.102895156
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 83266.851351626
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 83198.25866338
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 83127.899708465
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 83092.78262602
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 83059.753658235
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 83031.82903179
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 83039.052389316
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 83028.129793495
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 82949.12505133
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 82969.85994651
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 81166.50141647
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 80973.68578022
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 81144.59044995
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 81103.62357324
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 81089.28626931
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 80810.757803045
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 80960.365781054
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 80990.341687664
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 81038.33765783
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 81123.78119157
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 81122.26395758
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 81111.862666905
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 81105.36785514
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 81338.68798077
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 81318.38568769
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 81288.000519715
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 81394.8935722
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 81327.87259761
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 81389.726178005
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 81304.35617159
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 81339.87327992
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 81494.74761456
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 81560.61293533
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 81503.2480122
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 81530.226376854
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 81497.11765335
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 81446.59964011
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 81502.52936411
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 81524.3780276
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 81671.35545982
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 81669.92976583
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 81720.179477125
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 81628.44929372
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 81587.2875385
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 81523.13958358
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 81581.906624086
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 81559.74815625
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 81587.646175556
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 81603.58765722
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 81396.90719793
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 81383.563815154
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 81192.78391157
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 81253.35731214
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 81317.76603217
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 81323.089508615
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 81243.78152139
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 81291.290488206
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 81339.92400218
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 81546.78601642
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 81603.411002316
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 81559.51486835
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 81482.91847159
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 81480.73691452
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 81139.44190527
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 81322.227731675
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 81058.799596176
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 79228.076058425
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 79323.23871247
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 79268.47259191
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 79253.67428885
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 79350.86202348
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 79497.54428209
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 79529.82300201
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 79695.87041424
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 79856.110916235
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 79904.348645695
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 79911.55678164
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 80117.15288461
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 80302.42957168
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 80154.01754071
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 80334.40355735
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 80417.538894475
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 80378.92107112
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 80323.981287375
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 80406.30461705
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 80468.537492536
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 80571.28189174
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 80486.976005994
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 80497.55562255
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 80470.31212439
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 80452.748340756
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 80407.250740774
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 80384.5789883
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 80339.10700085
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 80344.09590606
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 80393.32096114
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 80398.06808723
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 80375.67488961
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 80511.88696648
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 80458.99458108
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 80252.87627769
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 80265.55702015
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 80224.564452775
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 80257.45817048
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 80232.16724148
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 80212.897360876
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 80206.02274663
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 80134.19722524
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 80249.289020866
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 80165.45544968
  }
];


})();

(function() {


App.data.daily_six_series = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 43642.83058384
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 43682.88915361
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 44073.26541992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 43960.89079724
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 43830.11730889
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 43836.09425964
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 43836.98702062
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 43810.160309985
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 43845.01459874
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 43834.58089744
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 43946.88897166
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 44008.05339702
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 44002.03240921
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 44002.92517018
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 43883.751494944
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 43787.478592515
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 43800.91393495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 43847.45659791
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 43806.06566759
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 43761.361287594
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 43760.77428893
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 43753.75257796
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 43797.0534512
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 43903.166108675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 43528.911187135
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 43528.5087995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 43536.43765646
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 43535.151219256
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 43593.26305722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 43605.73629416
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 43467.68957965
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 42771.6341555
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 42952.52450345
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 42949.3252776
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 42965.12680685
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 42788.365361154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 42999.018564746
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 42984.25380657
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 43092.03838536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 43239.54054056
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 43251.102895156
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 43266.851351626
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 43198.25866338
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 43127.899708465
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 43092.78262602
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 43059.753658235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 43031.82903179
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 43039.052389316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 43028.129793495
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 42949.12505133
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 42969.85994651
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 41166.50141647
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 40973.68578022
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 41144.59044995
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 41103.62357324
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 41089.28626931
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 40810.757803045
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 40960.365781054
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 40990.341687664
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 41038.33765783
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 41123.78119157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 41122.26395758
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 41111.862666905
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 41105.36785514
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 41338.68798077
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 41318.38568769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 41288.000519715
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 41394.8935722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 41327.87259761
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 41389.726178005
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 41304.35617159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 41339.87327992
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 41494.74761456
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 41560.61293533
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 41503.2480122
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 41530.226376854
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 41497.11765335
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 41446.59964011
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 41502.52936411
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 41524.3780276
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 41671.35545982
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 41669.92976583
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 41720.179477125
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 41628.44929372
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 41587.2875385
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 41523.13958358
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 41581.906624086
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 41559.74815625
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 41587.646175556
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 41603.58765722
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 41396.90719793
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 41383.563815154
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 41192.78391157
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 41253.35731214
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 41317.76603217
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 41323.089508615
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 41243.78152139
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 41291.290488206
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 41339.92400218
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 41546.78601642
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 41603.411002316
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 41559.51486835
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 41482.91847159
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 41480.73691452
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 41139.44190527
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 41322.227731675
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 41058.799596176
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 39228.076058425
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 39323.23871247
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 39268.47259191
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 39253.67428885
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 39350.86202348
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 39497.54428209
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 39529.82300201
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 39695.87041424
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 39856.110916235
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 39904.348645695
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 39911.55678164
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 40117.15288461
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 40302.42957168
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 40154.01754071
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 40334.40355735
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 40417.538894475
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 40378.92107112
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 40323.981287375
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 40406.30461705
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 40468.537492536
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 40571.28189174
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 40486.976005994
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 40497.55562255
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 40470.31212439
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 40452.748340756
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 40407.250740774
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 40384.5789883
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 40339.10700085
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 40344.09590606
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 40393.32096114
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 40398.06808723
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 40375.67488961
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 40511.88696648
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 40458.99458108
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 40252.87627769
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 40265.55702015
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 40224.564452775
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 40257.45817048
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 40232.16724148
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 40212.897360876
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 40206.02274663
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 40134.19722524
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 40249.289020866
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 40165.45544968
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 53642.83058384
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 53682.88915361
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 54073.26541992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 53960.89079724
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 53830.11730889
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 53836.09425964
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 53836.98702062
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 53810.160309985
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 53845.01459874
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 53834.58089744
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 53946.88897166
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 54008.05339702
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 54002.03240921
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 54002.92517018
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 53883.751494944
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 53787.478592515
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 53800.91393495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 53847.45659791
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 53806.06566759
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 53761.361287594
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 53760.77428893
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 53753.75257796
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 53797.0534512
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 53903.166108675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 53528.911187135
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 53528.5087995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 53536.43765646
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 53535.151219256
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 53593.26305722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 53605.73629416
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 53467.68957965
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 52771.6341555
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 52952.52450345
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 52949.3252776
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 52965.12680685
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 52788.365361154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 52999.018564746
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 52984.25380657
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 53092.03838536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 53239.54054056
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 53251.102895156
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 53266.851351626
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 53198.25866338
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 53127.899708465
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 53092.78262602
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 53059.753658235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 53031.82903179
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 53039.052389316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 53028.129793495
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 52949.12505133
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 52969.85994651
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 51166.50141647
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 50973.68578022
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 51144.59044995
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 51103.62357324
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 51089.28626931
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 50810.757803045
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 50960.365781054
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 50990.341687664
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 51038.33765783
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 51123.78119157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 51122.26395758
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 51111.862666905
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 51105.36785514
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 51338.68798077
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 51318.38568769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 51288.000519715
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 51394.8935722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 51327.87259761
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 51389.726178005
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 51304.35617159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 51339.87327992
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 51494.74761456
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 51560.61293533
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 51503.2480122
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 51530.226376854
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 51497.11765335
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 51446.59964011
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 51502.52936411
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 51524.3780276
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 51671.35545982
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 51669.92976583
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 51720.179477125
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 51628.44929372
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 51587.2875385
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 51523.13958358
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 51581.906624086
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 51559.74815625
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 51587.646175556
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 51603.58765722
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 51396.90719793
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 51383.563815154
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 51192.78391157
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 51253.35731214
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 51317.76603217
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 51323.089508615
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 51243.78152139
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 51291.290488206
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 51339.92400218
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 51546.78601642
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 51603.411002316
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 51559.51486835
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 51482.91847159
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 51480.73691452
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 51139.44190527
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 51322.227731675
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 51058.799596176
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 49228.076058425
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 49323.23871247
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 49268.47259191
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 49253.67428885
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 49350.86202348
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 49497.54428209
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 49529.82300201
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 49695.87041424
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 49856.110916235
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 49904.348645695
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 49911.55678164
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 50117.15288461
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 50302.42957168
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 50154.01754071
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 50334.40355735
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 50417.538894475
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 50378.92107112
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 50323.981287375
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 50406.30461705
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 50468.537492536
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 50571.28189174
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 50486.976005994
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 50497.55562255
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 50470.31212439
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 50452.748340756
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 50407.250740774
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 50384.5789883
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 50339.10700085
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 50344.09590606
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 50393.32096114
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 50398.06808723
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 50375.67488961
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 50511.88696648
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 50458.99458108
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 50252.87627769
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 50265.55702015
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 50224.564452775
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 50257.45817048
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 50232.16724148
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 50212.897360876
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 50206.02274663
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 50134.19722524
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 50249.289020866
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 50165.45544968
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 63642.83058384
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 63682.88915361
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 64073.26541992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 63960.89079724
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 63830.11730889
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 63836.09425964
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 63836.98702062
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 63810.160309985
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 63845.01459874
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 63834.58089744
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 63946.88897166
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 64008.05339702
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 64002.03240921
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 64002.92517018
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 63883.751494944
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 63787.478592515
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 63800.91393495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 63847.45659791
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 63806.06566759
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 63761.361287594
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 63760.77428893
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 63753.75257796
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 63797.0534512
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 63903.166108675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 63528.911187135
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 63528.5087995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 63536.43765646
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 63535.151219256
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 63593.26305722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 63605.73629416
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 63467.68957965
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 62771.6341555
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 62952.52450345
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 62949.3252776
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 62965.12680685
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 62788.365361154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 62999.018564746
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 62984.25380657
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 63092.03838536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 63239.54054056
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 63251.102895156
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 63266.851351626
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 63198.25866338
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 63127.899708465
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 63092.78262602
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 63059.753658235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 63031.82903179
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 63039.052389316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 63028.129793495
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 62949.12505133
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 62969.85994651
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 61166.50141647
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 60973.68578022
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 61144.59044995
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 61103.62357324
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 61089.28626931
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 60810.757803045
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 60960.365781054
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 60990.341687664
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 61038.33765783
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 61123.78119157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 61122.26395758
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 61111.862666905
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 61105.36785514
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 61338.68798077
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 61318.38568769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 61288.000519715
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 61394.8935722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 61327.87259761
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 61389.726178005
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 61304.35617159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 61339.87327992
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 61494.74761456
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 61560.61293533
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 61503.2480122
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 61530.226376854
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 61497.11765335
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 61446.59964011
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 61502.52936411
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 61524.3780276
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 61671.35545982
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 61669.92976583
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 61720.179477125
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 61628.44929372
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 61587.2875385
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 61523.13958358
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 61581.906624086
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 61559.74815625
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 61587.646175556
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 61603.58765722
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 61396.90719793
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 61383.563815154
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 61192.78391157
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 61253.35731214
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 61317.76603217
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 61323.089508615
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 61243.78152139
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 61291.290488206
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 61339.92400218
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 61546.78601642
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 61603.411002316
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 61559.51486835
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 61482.91847159
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 61480.73691452
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 61139.44190527
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 61322.227731675
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 61058.799596176
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 59228.076058425
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 59323.23871247
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 59268.47259191
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 59253.67428885
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 59350.86202348
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 59497.54428209
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 59529.82300201
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 59695.87041424
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 59856.110916235
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 59904.348645695
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 59911.55678164
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 60117.15288461
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 60302.42957168
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 60154.01754071
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 60334.40355735
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 60417.538894475
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 60378.92107112
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 60323.981287375
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 60406.30461705
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 60468.537492536
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 60571.28189174
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 60486.976005994
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 60497.55562255
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 60470.31212439
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 60452.748340756
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 60407.250740774
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 60384.5789883
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 60339.10700085
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 60344.09590606
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 60393.32096114
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 60398.06808723
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 60375.67488961
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 60511.88696648
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 60458.99458108
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 60252.87627769
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 60265.55702015
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 60224.564452775
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 60257.45817048
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 60232.16724148
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 60212.897360876
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 60206.02274663
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 60134.19722524
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 60249.289020866
  }, {
    label: 'Group Three',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 60165.45544968
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 73642.83058384
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 73682.88915361
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 74073.26541992
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 73960.89079724
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 73830.11730889
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 73836.09425964
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 73836.98702062
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 73810.160309985
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 73845.01459874
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 73834.58089744
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 73946.88897166
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 74008.05339702
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 74002.03240921
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 74002.92517018
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 73883.751494944
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 73787.478592515
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 73800.91393495
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 73847.45659791
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 73806.06566759
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 73761.361287594
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 73760.77428893
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 73753.75257796
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 73797.0534512
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 73903.166108675
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 73528.911187135
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 73528.5087995
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 73536.43765646
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 73535.151219256
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 73593.26305722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 73605.73629416
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 73467.68957965
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 72771.6341555
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 72952.52450345
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 72949.3252776
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 72965.12680685
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 72788.365361154
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 72999.018564746
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 72984.25380657
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 73092.03838536
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 73239.54054056
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 73251.102895156
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 73266.851351626
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 73198.25866338
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 73127.899708465
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 73092.78262602
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 73059.753658235
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 73031.82903179
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 73039.052389316
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 73028.129793495
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 72949.12505133
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 72969.85994651
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 71166.50141647
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 70973.68578022
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 71144.59044995
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 71103.62357324
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 71089.28626931
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 70810.757803045
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 70960.365781054
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 70990.341687664
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 71038.33765783
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 71123.78119157
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 71122.26395758
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 71111.862666905
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 71105.36785514
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 71338.68798077
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 71318.38568769
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 71288.000519715
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 71394.8935722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 71327.87259761
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 71389.726178005
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 71304.35617159
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 71339.87327992
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 71494.74761456
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 71560.61293533
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 71503.2480122
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 71530.226376854
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 71497.11765335
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 71446.59964011
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 71502.52936411
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 71524.3780276
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 71671.35545982
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 71669.92976583
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 71720.179477125
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 71628.44929372
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 71587.2875385
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 71523.13958358
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 71581.906624086
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 71559.74815625
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 71587.646175556
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 71603.58765722
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 71396.90719793
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 71383.563815154
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 71192.78391157
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 71253.35731214
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 71317.76603217
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 71323.089508615
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 71243.78152139
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 71291.290488206
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 71339.92400218
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 71546.78601642
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 71603.411002316
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 71559.51486835
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 71482.91847159
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 71480.73691452
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 71139.44190527
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 71322.227731675
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 71058.799596176
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 69228.076058425
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 69323.23871247
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 69268.47259191
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 69253.67428885
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 69350.86202348
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 69497.54428209
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 69529.82300201
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 69695.87041424
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 69856.110916235
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 69904.348645695
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 69911.55678164
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 70117.15288461
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 70302.42957168
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 70154.01754071
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 70334.40355735
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 70417.538894475
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 70378.92107112
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 70323.981287375
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 70406.30461705
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 70468.537492536
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 70571.28189174
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 70486.976005994
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 70497.55562255
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 70470.31212439
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 70452.748340756
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 70407.250740774
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 70384.5789883
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 70339.10700085
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 70344.09590606
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 70393.32096114
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 70398.06808723
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 70375.67488961
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 70511.88696648
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 70458.99458108
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 70252.87627769
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 70265.55702015
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 70224.564452775
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 70257.45817048
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 70232.16724148
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 70212.897360876
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 70206.02274663
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 70134.19722524
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 70249.289020866
  }, {
    label: 'Group Four',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 70165.45544968
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 83642.83058384
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 83682.88915361
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 84073.26541992
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 83960.89079724
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 83830.11730889
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 83836.09425964
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 83836.98702062
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 83810.160309985
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 83845.01459874
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 83834.58089744
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 83946.88897166
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 84008.05339702
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 84002.03240921
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 84002.92517018
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 83883.751494944
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 83787.478592515
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 83800.91393495
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 83847.45659791
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 83806.06566759
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 83761.361287594
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 83760.77428893
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 83753.75257796
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 83797.0534512
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 83903.166108675
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 83528.911187135
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 83528.5087995
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 83536.43765646
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 83535.151219256
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 83593.26305722
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 83605.73629416
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 83467.68957965
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 82771.6341555
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 82952.52450345
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 82949.3252776
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 82965.12680685
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 82788.365361154
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 82999.018564746
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 82984.25380657
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 83092.03838536
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 83239.54054056
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 83251.102895156
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 83266.851351626
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 83198.25866338
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 83127.899708465
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 83092.78262602
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 83059.753658235
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 83031.82903179
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 83039.052389316
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 83028.129793495
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 82949.12505133
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 82969.85994651
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 81166.50141647
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 80973.68578022
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 81144.59044995
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 81103.62357324
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 81089.28626931
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 80810.757803045
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 80960.365781054
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 80990.341687664
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 81038.33765783
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 81123.78119157
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 81122.26395758
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 81111.862666905
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 81105.36785514
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 81338.68798077
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 81318.38568769
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 81288.000519715
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 81394.8935722
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 81327.87259761
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 81389.726178005
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 81304.35617159
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 81339.87327992
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 81494.74761456
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 81560.61293533
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 81503.2480122
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 81530.226376854
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 81497.11765335
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 81446.59964011
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 81502.52936411
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 81524.3780276
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 81671.35545982
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 81669.92976583
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 81720.179477125
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 81628.44929372
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 81587.2875385
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 81523.13958358
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 81581.906624086
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 81559.74815625
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 81587.646175556
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 81603.58765722
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 81396.90719793
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 81383.563815154
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 81192.78391157
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 81253.35731214
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 81317.76603217
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 81323.089508615
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 81243.78152139
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 81291.290488206
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 81339.92400218
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 81546.78601642
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 81603.411002316
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 81559.51486835
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 81482.91847159
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 81480.73691452
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 81139.44190527
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 81322.227731675
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 81058.799596176
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 79228.076058425
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 79323.23871247
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 79268.47259191
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 79253.67428885
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 79350.86202348
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 79497.54428209
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 79529.82300201
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 79695.87041424
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 79856.110916235
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 79904.348645695
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 79911.55678164
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 80117.15288461
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 80302.42957168
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 80154.01754071
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 80334.40355735
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 80417.538894475
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 80378.92107112
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 80323.981287375
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 80406.30461705
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 80468.537492536
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 80571.28189174
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 80486.976005994
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 80497.55562255
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 80470.31212439
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 80452.748340756
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 80407.250740774
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 80384.5789883
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 80339.10700085
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 80344.09590606
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 80393.32096114
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 80398.06808723
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 80375.67488961
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 80511.88696648
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 80458.99458108
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 80252.87627769
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 80265.55702015
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 80224.564452775
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 80257.45817048
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 80232.16724148
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 80212.897360876
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 80206.02274663
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 80134.19722524
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 80249.289020866
  }, {
    label: 'Group Five',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 80165.45544968
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 93642.83058384
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 93682.88915361
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 94073.26541992
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 93960.89079724
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 93830.11730889
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 93836.09425964
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 93836.98702062
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 93810.160309985
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 93845.01459874
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 93834.58089744
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 93946.88897166
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 94008.05339702
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 94002.03240921
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 94002.92517018
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 93883.751494944
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 93787.478592515
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 93800.91393495
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 93847.45659791
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 93806.06566759
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 93761.361287594
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 93760.77428893
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 93753.75257796
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 93797.0534512
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 93903.166108675
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 93528.911187135
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 93528.5087995
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 93536.43765646
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 93535.151219256
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 93593.26305722
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 93605.73629416
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 93467.68957965
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 92771.6341555
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 92952.52450345
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 92949.3252776
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 92965.12680685
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 92788.365361154
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 92999.018564746
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 92984.25380657
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 93092.03838536
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 93239.54054056
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 93251.102895156
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 93266.851351626
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 93198.25866338
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 93127.899708465
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 93092.78262602
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 93059.753658235
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 93031.82903179
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 93039.052389316
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 93028.129793495
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 92949.12505133
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 92969.85994651
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 91166.50141647
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 90973.68578022
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 91144.59044995
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 91103.62357324
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 91089.28626931
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 90810.757803045
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 90960.365781054
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 90990.341687664
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 91038.33765783
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 91123.78119157
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 91122.26395758
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 91111.862666905
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 91105.36785514
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 91338.68798077
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 91318.38568769
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 91288.000519715
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 91394.8935722
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 91327.87259761
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 91389.726178005
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 91304.35617159
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 91339.87327992
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 91494.74761456
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 91560.61293533
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 91503.2480122
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 91530.226376854
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 91497.11765335
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 91446.59964011
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 91502.52936411
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 91524.3780276
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 91671.35545982
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 91669.92976583
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 91720.179477125
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 91628.44929372
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 91587.2875385
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 91523.13958358
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 91581.906624086
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 91559.74815625
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 91587.646175556
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 91603.58765722
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 91396.90719793
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 91383.563815154
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 91192.78391157
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 91253.35731214
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 91317.76603217
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 91323.089508615
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 91243.78152139
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 91291.290488206
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 91339.92400218
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 91546.78601642
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 91603.411002316
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 91559.51486835
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 91482.91847159
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 91480.73691452
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 91139.44190527
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 91322.227731675
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 91058.799596176
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 89228.076058425
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 89323.23871247
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 89268.47259191
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 89253.67428885
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 89350.86202348
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 89497.54428209
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 89529.82300201
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 89695.87041424
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 89856.110916235
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 89904.348645695
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 89911.55678164
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 90117.15288461
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 90302.42957168
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 90154.01754071
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 90334.40355735
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 90417.538894475
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 90378.92107112
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 90323.981287375
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 90406.30461705
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 90468.537492536
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 90571.28189174
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 90486.976005994
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 90497.55562255
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 90470.31212439
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 90452.748340756
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 90407.250740774
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 90384.5789883
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 90339.10700085
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 90344.09590606
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 90393.32096114
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 90398.06808723
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 90375.67488961
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 90511.88696648
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 90458.99458108
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 90252.87627769
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 90265.55702015
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 90224.564452775
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 90257.45817048
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 90232.16724148
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 90212.897360876
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 90206.02274663
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 90134.19722524
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 90249.289020866
  }, {
    label: 'Group Six',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 90165.45544968
  }
];


})();

(function() {


App.data.value_p1d_p1y = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-27"),
    value: 142096015.71742177
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-28"),
    value: 142101731.98060158
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-29"),
    value: 142107448.24378154
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-30"),
    value: 141934424.30498388
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-01"),
    value: 142164128.00176576
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-02"),
    value: 142399545.51807317
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-03"),
    value: 142333243.372453
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-04"),
    value: 142242949.3474151
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-05"),
    value: 142248710.38820672
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-06"),
    value: 142254471.4289986
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-07"),
    value: 142369470.69650733
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-08"),
    value: 142796257.17154828
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-09"),
    value: 143041069.35484105
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-10"),
    value: 142265066.3796099
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-11"),
    value: 142879047.3289037
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-12"),
    value: 142884808.3696955
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-13"),
    value: 142890569.4104874
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-14"),
    value: 143330251.62908864
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-15"),
    value: 142849806.14452362
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-16"),
    value: 142584441.0700523
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-17"),
    value: 142201848.4194405
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-18"),
    value: 141562047.31745562
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-19"),
    value: 141567808.35824758
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-20"),
    value: 141573569.39903933
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-21"),
    value: 141575141.9863657
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-22"),
    value: 141307984.36341855
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-23"),
    value: 141574769.70322043
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-24"),
    value: 141778773.78889713
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-25"),
    value: 141650388.39602995
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-26"),
    value: 141656149.4368218
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-27"),
    value: 141661910.47761345
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-28"),
    value: 141667671.51840538
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-29"),
    value: 141460688.28122446
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-30"),
    value: 141386030.68732467
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-31"),
    value: 141334150.16491863
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-01"),
    value: 141726021.2603996
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-02"),
    value: 141700013.41747674
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-03"),
    value: 141705729.6806564
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-04"),
    value: 141639947.46346816
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-05"),
    value: 141387636.60343754
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-06"),
    value: 141319592.2971479
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-07"),
    value: 141451563.31990656
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-08"),
    value: 141777621.6139829
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-09"),
    value: 141783337.8771628
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-10"),
    value: 141789054.14034262
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-11"),
    value: 141744003.26667234
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-12"),
    value: 141412418.4106732
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-13"),
    value: 141680142.21963316
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-14"),
    value: 141643658.33469334
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-15"),
    value: 141541110.47410873
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-16"),
    value: 141546826.7372886
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-17"),
    value: 141552543.00046855
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-18"),
    value: 141197389.52984217
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-19"),
    value: 141479530.46594027
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-20"),
    value: 141735098.09225327
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-21"),
    value: 141861498.47284174
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-22"),
    value: 142048227.09659773
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-23"),
    value: 142053943.3597776
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-24"),
    value: 142059659.62295732
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-25"),
    value: 142230864.74222308
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-26"),
    value: 142278544.18234038
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-27"),
    value: 142587026.35406846
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-28"),
    value: 142785729.80885726
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-29"),
    value: 142689919.52744088
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-30"),
    value: 142390818.84883082
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-01"),
    value: 142382896.00285745
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-02"),
    value: 142935612.90941834
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-03"),
    value: 143313570.37249357
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-04"),
    value: 143319331.41328546
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-05"),
    value: 143521698.18444896
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-06"),
    value: 143614882.80853003
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-07"),
    value: 143620643.84932184
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-08"),
    value: 143626404.8901137
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-09"),
    value: 143674349.59120998
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-10"),
    value: 143766459.13994867
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-11"),
    value: 143953510.59397495
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-12"),
    value: 144164682.80921182
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-13"),
    value: 144178940.09335265
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-14"),
    value: 144184701.13414466
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-15"),
    value: 144190462.17493647
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-16"),
    value: 144379485.6176544
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-17"),
    value: 144251611.78305557
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-18"),
    value: 144082658.34621763
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-19"),
    value: 144204925.86291742
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-20"),
    value: 144314375.18902957
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-21"),
    value: 144320136.22982156
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-22"),
    value: 144325897.27061337
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-23"),
    value: 144412847.37787747
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-24"),
    value: 144228749.68287605
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-25"),
    value: 144352595.72472787
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-26"),
    value: 144324122.76267883
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-27"),
    value: 144467260.77330536
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-28"),
    value: 144473021.81409726
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-29"),
    value: 144478782.8548891
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-30"),
    value: 144527709.78000897
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-31"),
    value: 144258124.4700519
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-01"),
    value: 144290324.65936056
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-02"),
    value: 144470659.68672088
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-03"),
    value: 144142982.636332
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-04"),
    value: 144148698.89951187
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-05"),
    value: 144154415.16269165
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-06"),
    value: 144684282.98438033
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-07"),
    value: 144480208.6649626
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-08"),
    value: 144613253.22264302
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-09"),
    value: 144443558.86821103
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-10"),
    value: 144888183.15118462
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-11"),
    value: 144893899.4143645
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-12"),
    value: 144899615.67754415
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-13"),
    value: 145075464.87055805
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-14"),
    value: 145009550.97259128
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-15"),
    value: 144978450.52537724
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-16"),
    value: 144949508.23146257
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-17"),
    value: 145256197.3551461
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-18"),
    value: 145261913.61832595
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-19"),
    value: 145267629.8815059
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-20"),
    value: 145378961.40536928
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-21"),
    value: 145401351.31701243
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-22"),
    value: 145150668.82252297
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-23"),
    value: 144775345.6848413
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-24"),
    value: 145059555.52564475
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-25"),
    value: 145065271.7888244
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-26"),
    value: 145070988.05200437
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-27"),
    value: 145354292.44655746
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-28"),
    value: 145247133.03485537
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-29"),
    value: 145274807.8624902
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-30"),
    value: 145099940.62294272
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-31"),
    value: 145158308.1597919
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-01"),
    value: 145148826.93644437
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-02"),
    value: 145122819.09352133
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-03"),
    value: 145128535.3567012
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-04"),
    value: 145249306.35682496
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-05"),
    value: 145168418.2192961
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-06"),
    value: 145462213.15430757
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-07"),
    value: 145245154.5392507
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-08"),
    value: 145250870.80243057
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-09"),
    value: 145256587.0656103
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-10"),
    value: 145131856.28455886
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-11"),
    value: 145170599.01215407
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-12"),
    value: 145541353.8448038
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-13"),
    value: 145421138.2443991
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-14"),
    value: 145578217.4800052
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-15"),
    value: 145583933.74318525
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-16"),
    value: 145589650.00636506
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-17"),
    value: 145725589.20584416
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-18"),
    value: 146000028.3930375
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-19"),
    value: 146295167.11541703
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-20"),
    value: 146307055.27565256
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-21"),
    value: 146358657.2430451
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-22"),
    value: 146364373.506225
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-23"),
    value: 146370089.76940486
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-24"),
    value: 146240899.33731923
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-25"),
    value: 146393946.58684662
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-26"),
    value: 146161165.55283794
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-27"),
    value: 146273773.9806129
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-28"),
    value: 146549688.0470901
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-29"),
    value: 146555404.31027007
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-30"),
    value: 146371507.69002426
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-01"),
    value: 146655587.87257335
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-02"),
    value: 146587774.99325505
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-03"),
    value: 146397897.56676126
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-04"),
    value: 146332123.36160114
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-05"),
    value: 146317589.64947435
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-06"),
    value: 146323350.6902661
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-07"),
    value: 146329111.73105785
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-08"),
    value: 146318860.97546452
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-09"),
    value: 146435625.9166368
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-10"),
    value: 146366811.948874
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-11"),
    value: 146619731.8553632
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-12"),
    value: 146794713.78165394
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-13"),
    value: 146800474.82244584
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-14"),
    value: 146806235.86323762
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-15"),
    value: 146799615.96494347
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-16"),
    value: 146082988.8970866
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-17"),
    value: 146197633.19972345
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-18"),
    value: 146048027.71414778
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-19"),
    value: 145711301.96381962
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-20"),
    value: 145717063.00461143
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-21"),
    value: 145722824.04540324
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-22"),
    value: 145302318.62889832
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-23"),
    value: 145178253.0672455
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-24"),
    value: 145162321.61266172
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-25"),
    value: 145091855.65093735
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-26"),
    value: 144545594.89433584
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-27"),
    value: 144551355.93512776
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-28"),
    value: 144557116.9759197
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-29"),
    value: 144562878.01671144
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-30"),
    value: 144568639.05750325
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-31"),
    value: 144247780.62687343
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-01"),
    value: 144650983.4746692
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-02"),
    value: 144763166.47246882
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-03"),
    value: 144768882.73564863
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-04"),
    value: 144768882.73564863
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-05"),
    value: 144774598.99882853
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-06"),
    value: 145218772.3566291
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-07"),
    value: 144927454.09482896
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-08"),
    value: 144990801.1805222
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-09"),
    value: 145397273.7258744
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-10"),
    value: 145536951.68848625
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-11"),
    value: 145542667.9516662
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-12"),
    value: 145548384.21484601
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-13"),
    value: 145528459.85097384
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-14"),
    value: 145636201.8171889
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-15"),
    value: 144803265.64124915
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-16"),
    value: 143496041.2412383
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-17"),
    value: 143142154.40766943
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-18"),
    value: 143147870.67084917
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-19"),
    value: 143153586.9340291
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-20"),
    value: 144341718.38912696
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-21"),
    value: 144813541.4563326
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-22"),
    value: 144941767.59848338
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-23"),
    value: 144947483.86166334
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-24"),
    value: 145065770.37556776
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-25"),
    value: 145071486.63874763
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-26"),
    value: 145077202.9019276
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-27"),
    value: 145170536.11095315
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-28"),
    value: 145245161.8864964
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-29"),
    value: 145065620.6309899
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-30"),
    value: 145375245.05366015
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-01"),
    value: 145357736.65051827
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-02"),
    value: 145349813.80454504
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-03"),
    value: 145323850.739234
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-04"),
    value: 144855706.94809622
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-05"),
    value: 144995661.76745
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-06"),
    value: 145556842.08239365
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-07"),
    value: 145314777.00337687
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-08"),
    value: 144916548.86553055
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-09"),
    value: 144922309.9063224
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-10"),
    value: 144928070.94711417
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-11"),
    value: 144638458.5482586
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-12"),
    value: 144662972.24540296
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-13"),
    value: 144564726.14892486
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-14"),
    value: 144364021.59871978
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-15"),
    value: 144419626.66023448
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-16"),
    value: 144425387.7010263
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-17"),
    value: 144431148.74181813
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-18"),
    value: 143846645.25269663
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-19"),
    value: 143109904.21081686
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-20"),
    value: 143225592.03841266
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-21"),
    value: 143507885.00080588
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-22"),
    value: 143406407.25186712
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-23"),
    value: 143412168.29265913
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-24"),
    value: 143417929.333451
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-25"),
    value: 143751637.49805647
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-26"),
    value: 143757398.53884834
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-27"),
    value: 143341749.72067398
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-28"),
    value: 143212134.40898585
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-29"),
    value: 143181267.094594
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-30"),
    value: 143187028.1353858
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-31"),
    value: 143192789.17617756
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-01"),
    value: 142848511.7203191
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-02"),
    value: 142844382.34188128
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-03"),
    value: 143163765.9665751
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-04"),
    value: 143674599.81268877
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-05"),
    value: 143585185.00277412
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-06"),
    value: 143590901.265954
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-07"),
    value: 143596617.52913383
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-08"),
    value: 143760848.85183105
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-09"),
    value: 144216242.0872758
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-10"),
    value: 144356614.17128718
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-11"),
    value: 144298736.0857794
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-12"),
    value: 144486012.32494497
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-13"),
    value: 144491728.58812493
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-14"),
    value: 144497444.85130477
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-15"),
    value: 144662644.55798736
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-16"),
    value: 144740122.45877156
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-17"),
    value: 144474802.5515387
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-18"),
    value: 144680522.05457175
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-19"),
    value: 144710122.4604526
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-20"),
    value: 144715838.72363234
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-21"),
    value: 144721554.98681223
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-22"),
    value: 144727271.2499922
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-23"),
    value: 144907710.31820783
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-24"),
    value: 145040292.09856614
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-25"),
    value: 145018171.12013006
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-26"),
    value: 144727118.05241415
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-27"),
    value: 144732834.31559402
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-28"),
    value: 144738550.57877392
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-29"),
    value: 144782032.50082573
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-30"),
    value: 144685531.29331335
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-31"),
    value: 143453709.46490288
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-01"),
    value: 143346691.24930963
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-02"),
    value: 144478860.30366674
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-03"),
    value: 145774581.3162137
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-04"),
    value: 146048029.2132698
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-05"),
    value: 146135787.35759842
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-06"),
    value: 146500787.46945703
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-07"),
    value: 146909670.96847022
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-08"),
    value: 146855773.12444082
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-09"),
    value: 147025155.09693822
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-10"),
    value: 146689484.31881845
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-11"),
    value: 146867807.31375703
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-12"),
    value: 146054634.67071912
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-13"),
    value: 146542411.26989183
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-14"),
    value: 146173696.02017698
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-15"),
    value: 146212942.8741943
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-16"),
    value: 146508649.98134857
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-17"),
    value: 146509578.46083483
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-18"),
    value: 146308366.6524725
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-19"),
    value: 145359513.73498684
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-20"),
    value: 145432087.81133142
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-21"),
    value: 145641460.90323827
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-22"),
    value: 146256322.35111865
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-23"),
    value: 146533551.6286887
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-24"),
    value: 146904585.61921552
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-25"),
    value: 146696134.3664204
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-26"),
    value: 147060436.93349323
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-27"),
    value: 147988751.24782673
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-28"),
    value: 146962540.42196655
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-01"),
    value: 146944855.44129556
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-02"),
    value: 147526684.61012366
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-03"),
    value: 148209332.43828136
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-04"),
    value: 148041884.67249596
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-05"),
    value: 147611724.99014184
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-06"),
    value: 148182441.35844976
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-07"),
    value: 148511067.28565904
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-08"),
    value: 148195989.3563945
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-09"),
    value: 148730649.0797347
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-10"),
    value: 148427032.40095812
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-11"),
    value: 148311525.48608804
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-12"),
    value: 149238694.22886828
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-13"),
    value: 148899393.14549184
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-14"),
    value: 150078401.265228
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-15"),
    value: 149250145.30683494
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-16"),
    value: 148291038.56586236
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-17"),
    value: 149088492.20989147
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-18"),
    value: 148822078.763821
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-19"),
    value: 148864809.02329272
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-20"),
    value: 148537750.89909476
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-21"),
    value: 149437074.94077173
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-22"),
    value: 148904572.89707902
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-23"),
    value: 148504965.18426135
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-24"),
    value: 149360223.16222665
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-25"),
    value: 149037859.25414282
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-26"),
    value: 148083168.65110293
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-27"),
    value: 148002430.4473727
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-28"),
    value: 148341741.85250112
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-29"),
    value: 147478306.48313504
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-30"),
    value: 147922639.62026376
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-31"),
    value: 147916537.88936695
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-01"),
    value: 147494841.87075722
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-02"),
    value: 147474295.90045506
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-03"),
    value: 147713451.59621766
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-04"),
    value: 148453980.09985596
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-05"),
    value: 149049155.63437647
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-06"),
    value: 148376210.95018998
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-07"),
    value: 147063353.09115225
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-08"),
    value: 146730570.15469867
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-09"),
    value: 147417597.51534927
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-10"),
    value: 147278396.33282617
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-11"),
    value: 147964631.3955386
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-12"),
    value: 147762429.32750416
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-13"),
    value: 146838390.3578969
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-14"),
    value: 146813102.16000575
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-15"),
    value: 147347466.96970087
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-16"),
    value: 146849521.86814964
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-17"),
    value: 147477726.14491424
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-18"),
    value: 147180304.26644248
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-19"),
    value: 147736913.16995412
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-20"),
    value: 147510138.89495215
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-21"),
    value: 147273886.66620904
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-22"),
    value: 147355357.99112844
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-23"),
    value: 147498246.0319939
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-24"),
    value: 147378122.73411158
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-25"),
    value: 147600608.71973702
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-26"),
    value: 148227955.17983976
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-27"),
    value: 148943078.73780593
  }
];


})();

(function() {


App.data.value_p1m_p1y = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-16"),
    value: 142096015.71742177
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-16"),
    value: 141661910.47761345
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-16"),
    value: 142587026.35406846
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-16"),
    value: 144467260.77330536
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-16"),
    value: 145354292.44655746
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-16"),
    value: 146273773.9806129
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-16"),
    value: 144551355.93512776
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-16"),
    value: 145245161.8864964
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-16"),
    value: 143212134.40898585
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-16"),
    value: 144738550.57877392
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-16"),
    value: 146962540.42196655
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-16"),
    value: 148002430.4473727
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-16"),
    value: 148943078.73780593
  }
];


})();

(function() {


App.data.value_p1m_p2y = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2011-04-16"),
    value: 3190223.5507746544
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-05-16"),
    value: 3245301.9554325156
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-06-16"),
    value: 3230163.670210492
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-07-16"),
    value: 3325536.918547862
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-08-16"),
    value: 3251300.4703723807
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-09-16"),
    value: 3284028.560462011
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-16"),
    value: 3264438.0366201736
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-16"),
    value: 3266342.571401255
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-16"),
    value: 3284136.8877116633
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-16"),
    value: 3337992.495441494
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-16"),
    value: 3375928.5946786683
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-16"),
    value: 3356169.374819465
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-16"),
    value: 3360868.9981094506
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-16"),
    value: 3350601.4981023436
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-16"),
    value: 3372482.4301829385
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-16"),
    value: 3416953.9203713667
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-16"),
    value: 3437934.081116352
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-16"),
    value: 3459681.7491740314
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-16"),
    value: 3418942.947444594
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-16"),
    value: 3435352.914331321
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-16"),
    value: 3387267.547637732
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-16"),
    value: 3423370.4936447185
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-16"),
    value: 3475972.5210721497
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-16"),
    value: 3500568.1026596064
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-16"),
    value: 3522816.408929701
  }
];


})();

(function() {


App.data.value_p1m_p5y = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2008-04-16"),
    value: 3311114.0604923926
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-05-16"),
    value: 3331592.4548048945
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-06-16"),
    value: 3246793.985437408
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-07-16"),
    value: 3216418.5391796334
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-08-16"),
    value: 3213553.9005523846
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-09-16"),
    value: 3092714.786551858
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-10-16"),
    value: 2930946.512741252
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-11-16"),
    value: 2854250.2167194113
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2008-12-16"),
    value: 2913485.840780823
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-01-16"),
    value: 3016610.6814747374
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-02-16"),
    value: 2948083.104997659
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-03-16"),
    value: 2961709.574275372
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-04-16"),
    value: 3041706.6486371714
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-05-16"),
    value: 3062544.7850477956
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-06-16"),
    value: 3058043.930939135
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-07-16"),
    value: 3113738.301647409
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-08-16"),
    value: 3172425.4556713286
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-09-16"),
    value: 3258151.4626948545
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-10-16"),
    value: 3248688.4725350183
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-11-16"),
    value: 3253399.2784757484
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2009-12-16"),
    value: 3240427.727753935
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-01-16"),
    value: 3238904.6738555077
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-02-16"),
    value: 3243852.49958457
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-03-16"),
    value: 3251888.552827119
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-04-16"),
    value: 3254300.6870692233
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-05-16"),
    value: 3242083.2777588125
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-06-16"),
    value: 3266685.7461965503
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-07-16"),
    value: 3306758.4041393576
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-08-16"),
    value: 3356775.4674698
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-09-16"),
    value: 3343915.557226786
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-10-16"),
    value: 3308509.302515077
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-11-16"),
    value: 3288896.0677231885
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2010-12-16"),
    value: 3144436.3479517754
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-01-16"),
    value: 3142095.1739693554
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-02-16"),
    value: 3141382.689501446
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-03-16"),
    value: 3163166.111736495
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-04-16"),
    value: 3190223.5507746544
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-05-16"),
    value: 3245301.9554325156
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-06-16"),
    value: 3230163.670210492
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-07-16"),
    value: 3325536.918547862
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-08-16"),
    value: 3251300.4703723807
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-09-16"),
    value: 3284028.560462011
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-16"),
    value: 3264438.0366201736
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-16"),
    value: 3266342.571401255
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-16"),
    value: 3284136.8877116633
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-16"),
    value: 3337992.495441494
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-16"),
    value: 3375928.5946786683
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-16"),
    value: 3356169.374819465
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-16"),
    value: 3360868.9981094506
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-16"),
    value: 3350601.4981023436
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-16"),
    value: 3372482.4301829385
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-16"),
    value: 3416953.9203713667
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-16"),
    value: 3437934.081116352
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-16"),
    value: 3459681.7491740314
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-16"),
    value: 3418942.947444594
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-16"),
    value: 3435352.914331321
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-16"),
    value: 3387267.547637732
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-16"),
    value: 3423370.4936447185
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-16"),
    value: 3475972.5210721497
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-16"),
    value: 3500568.1026596064
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-16"),
    value: 3522816.408929701
  }
];


})();

(function() {


App.data.value_p1w_p1y = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-27"),
    value: 142096015.71742177
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-04"),
    value: 142242949.3474151
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-11"),
    value: 142879047.3289037
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-18"),
    value: 141562047.31745562
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-05-25"),
    value: 141650388.39602995
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-01"),
    value: 141726021.2603996
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-08"),
    value: 141777621.6139829
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-15"),
    value: 141541110.47410873
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-22"),
    value: 142048227.09659773
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-06-29"),
    value: 142689919.52744088
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-06"),
    value: 143614882.80853003
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-13"),
    value: 144178940.09335265
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-20"),
    value: 144314375.18902957
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-07-27"),
    value: 144467260.77330536
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-03"),
    value: 144142982.636332
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-10"),
    value: 144888183.15118462
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-17"),
    value: 145256197.3551461
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-24"),
    value: 145059555.52564475
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-08-31"),
    value: 145158308.1597919
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-07"),
    value: 145245154.5392507
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-14"),
    value: 145578217.4800052
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-21"),
    value: 146358657.2430451
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-09-28"),
    value: 146549688.0470901
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-05"),
    value: 146317589.64947435
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-12"),
    value: 146794713.78165394
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-19"),
    value: 145711301.96381962
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-10-26"),
    value: 144545594.89433584
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-02"),
    value: 144763166.47246882
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-10"),
    value: 145536951.68848625
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-17"),
    value: 143142154.40766943
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-11-24"),
    value: 145065770.37556776
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-01"),
    value: 145357736.65051827
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-08"),
    value: 144916548.86553055
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-15"),
    value: 144419626.66023448
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-22"),
    value: 143406407.25186712
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-12-29"),
    value: 143181267.094594
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-05"),
    value: 143585185.00277412
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-12"),
    value: 144486012.32494497
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-19"),
    value: 144710122.4604526
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-01-26"),
    value: 144727118.05241415
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-02"),
    value: 144478860.30366674
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-09"),
    value: 147025155.09693822
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-16"),
    value: 146508649.98134857
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-02-23"),
    value: 146533551.6286887
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-02"),
    value: 147526684.61012366
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-09"),
    value: 148730649.0797347
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-15"),
    value: 149250145.30683494
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-22"),
    value: 148904572.89707902
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-03-29"),
    value: 147478306.48313504
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-05"),
    value: 149049155.63437647
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-12"),
    value: 147762429.32750416
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-19"),
    value: 147736913.16995412
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-26"),
    value: 148227955.17983976
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-04-27"),
    value: 148943078.73780593
  }
];


})();

(function() {


App.data.zeroes_ungrouped = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 0
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 0
  }
];


})();

(function() {


App.data.same_value_ungrouped = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: -100
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: -100
  }
];


})();

(function() {


App.data.monthly_return_single_series = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Financial analytics software",
    value: 49668,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Financial analytics software",
    value: 68344,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Financial analytics software",
    value: 60654,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Financial analytics software",
    value: 48240,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Financial analytics software",
    value: 62074,
    type: "money"
  }
];


})();

(function() {


App.data.monthly_return_double_series = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Software & Programming",
    value: 17326,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Telecommunication",
    value: 4515,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Software & Programming",
    value: 15326,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Telecommunication",
    value: 1515,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Software & Programming",
    value: 14326,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Telecommunication",
    value: 8518,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Software & Programming",
    value: 42301,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Telecommunication",
    value: 90191,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Software & Programming",
    value: 57326,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Telecommunication",
    value: 39544,
    type: "money"
  }
];


})();

(function() {


App.data.monthly_return_triple_series = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Software & Programming",
    value: 63540,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Telecommunication",
    value: 31005,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Financial analytics software",
    value: 69669,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Software & Programming",
    value: 74860,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Telecommunication",
    value: 14513,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Financial analytics software",
    value: 68344,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Software & Programming",
    value: 65435,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Telecommunication",
    value: 40913,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Financial analytics software",
    value: 60659,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Software & Programming",
    value: 50241,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Telecommunication",
    value: 30441,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Financial analytics software",
    value: 48244,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Software & Programming",
    value: 67326,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Telecommunication",
    value: 17778,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Financial analytics software",
    value: 62079,
    type: "money"
  }
];


})();

(function() {


App.data.monthly_return_single_period = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Insurance companies",
    value: 3.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Internet, software & IT services",
    value: 2.20,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Investment Fund",
    value: 1.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Investment trusts/funds + pension funds",
    value: 1.90,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Software & Programming",
    value: 5.00,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Telecommunication",
    value: 2.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Financial analytics software",
    value: 4.40,
    type: "money"
  }
];


})();

(function() {


App.data.monthly_return_double_period = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Insurance companies",
    value: 4.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Internet, software & IT services",
    value: 6.10,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Investment Fund",
    value: 4.80,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Investment trusts/funds + pension funds",
    value: 5.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Software & Programming",
    value: 4.30,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Telecommunication",
    value: 6.90,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Financial analytics software",
    value: 2.80,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Insurance companies",
    value: 1.70,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Internet, software & IT services",
    value: 2.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Investment Fund",
    value: 4.00,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Investment trusts/funds + pension funds",
    value: 2.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Software & Programming",
    value: 1.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Telecommunication",
    value: 2.10,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Financial analytics software",
    value: 1.30,
    type: "money"
  }
];


})();

(function() {


App.data.monthly_return_negative_period = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Insurance companies",
    value: -1.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Internet, software & IT services",
    value: -3.10,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Investment Fund",
    value: -1.80,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Investment trusts/funds + pension funds",
    value: -2.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Software & Programming",
    value: -1.30,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Telecommunication",
    value: -3.90,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    label: "Financial analytics software",
    value: -1.80,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Insurance companies",
    value: -2.70,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Internet, software & IT services",
    value: -1.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Investment Fund",
    value: -0.30,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Investment trusts/funds + pension funds",
    value: -1.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Software & Programming",
    value: -2.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Telecommunication",
    value: -1.10,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    label: "Financial analytics software",
    value: -2.30,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Insurance companies",
    value: 0.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Internet, software & IT services",
    value: -1.20,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Investment Fund",
    value: -2.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Investment trusts/funds + pension funds",
    value: -2.90,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Software & Programming",
    value: 2.00,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Telecommunication",
    value: -1.50,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    label: "Financial analytics software",
    value: 1.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Insurance companies",
    value: 1.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Internet, software & IT services",
    value: -0.10,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Investment Fund",
    value: -0.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Investment trusts/funds + pension funds",
    value: -0.80,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Software & Programming",
    value: 1.20,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Telecommunication",
    value: -0.80,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    label: "Financial analytics software",
    value: 2.20,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Insurance companies",
    value: 0.60,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Internet, software & IT services",
    value: 0.30,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Investment Fund",
    value: 1.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Investment trusts/funds + pension funds",
    value: 1.60,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Software & Programming",
    value: 2.30,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Telecommunication",
    value: 1.40,
    type: "money"
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    label: "Financial analytics software",
    value: 3.50,
    type: "money"
  }
];


})();

(function() {


App.data.population = [
  {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-01"),
    label: "San Francisco",
    value: 63.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-01"),
    label: "New York",
    value: 62.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-01"),
    label: "Boston",
    value: 72.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-02"),
    label: "San Francisco",
    value: 58
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-02"),
    label: "New York",
    value: 59.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-02"),
    label: "Boston",
    value: 67.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-03"),
    label: "San Francisco",
    value: 53.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-03"),
    label: "New York",
    value: 59.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-03"),
    label: "Boston",
    value: 69.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-04"),
    label: "San Francisco",
    value: 55.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-04"),
    label: "New York",
    value: 58.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-04"),
    label: "Boston",
    value: 68
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-05"),
    label: "San Francisco",
    value: 64.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-05"),
    label: "New York",
    value: 58.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-05"),
    label: "Boston",
    value: 72.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-06"),
    label: "San Francisco",
    value: 58.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-06"),
    label: "New York",
    value: 57
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-06"),
    label: "Boston",
    value: 77
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-07"),
    label: "San Francisco",
    value: 57.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-07"),
    label: "New York",
    value: 56.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-07"),
    label: "Boston",
    value: 82.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-08"),
    label: "San Francisco",
    value: 61.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-08"),
    label: "New York",
    value: 56.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-08"),
    label: "Boston",
    value: 78.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-09"),
    label: "San Francisco",
    value: 69.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-09"),
    label: "New York",
    value: 56.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-09"),
    label: "Boston",
    value: 68.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-10"),
    label: "San Francisco",
    value: 71.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-10"),
    label: "New York",
    value: 60.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-10"),
    label: "Boston",
    value: 68.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-11"),
    label: "San Francisco",
    value: 68.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-11"),
    label: "New York",
    value: 61.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-11"),
    label: "Boston",
    value: 70.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-12"),
    label: "San Francisco",
    value: 61.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-12"),
    label: "New York",
    value: 61.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-12"),
    label: "Boston",
    value: 75.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-13"),
    label: "San Francisco",
    value: 63
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-13"),
    label: "New York",
    value: 64.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-13"),
    label: "Boston",
    value: 76.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-14"),
    label: "San Francisco",
    value: 66.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-14"),
    label: "New York",
    value: 67.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-14"),
    label: "Boston",
    value: 66.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-15"),
    label: "San Francisco",
    value: 61.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-15"),
    label: "New York",
    value: 64.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-15"),
    label: "Boston",
    value: 68
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-16"),
    label: "San Francisco",
    value: 61.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-16"),
    label: "New York",
    value: 61.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-16"),
    label: "Boston",
    value: 70.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-17"),
    label: "San Francisco",
    value: 62.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-17"),
    label: "New York",
    value: 61.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-17"),
    label: "Boston",
    value: 71.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-18"),
    label: "San Francisco",
    value: 60.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-18"),
    label: "New York",
    value: 59.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-18"),
    label: "Boston",
    value: 70
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-19"),
    label: "San Francisco",
    value: 62.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-19"),
    label: "New York",
    value: 58.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-19"),
    label: "Boston",
    value: 61.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-20"),
    label: "San Francisco",
    value: 65.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-20"),
    label: "New York",
    value: 57.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-20"),
    label: "Boston",
    value: 57.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-21"),
    label: "San Francisco",
    value: 55.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-21"),
    label: "New York",
    value: 56.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-21"),
    label: "Boston",
    value: 64.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-22"),
    label: "San Francisco",
    value: 54.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-22"),
    label: "New York",
    value: 60.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-22"),
    label: "Boston",
    value: 72.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-23"),
    label: "San Francisco",
    value: 54.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-23"),
    label: "New York",
    value: 65.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-23"),
    label: "Boston",
    value: 72.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-24"),
    label: "San Francisco",
    value: 54.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-24"),
    label: "New York",
    value: 60.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-24"),
    label: "Boston",
    value: 72.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-25"),
    label: "San Francisco",
    value: 57.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-25"),
    label: "New York",
    value: 56.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-25"),
    label: "Boston",
    value: 72.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-26"),
    label: "San Francisco",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-26"),
    label: "New York",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-26"),
    label: "Boston",
    value: 73.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-27"),
    label: "San Francisco",
    value: 54.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-27"),
    label: "New York",
    value: 56.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-27"),
    label: "Boston",
    value: 70.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-28"),
    label: "San Francisco",
    value: 42.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-28"),
    label: "New York",
    value: 58.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-28"),
    label: "Boston",
    value: 56.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-29"),
    label: "San Francisco",
    value: 40.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-29"),
    label: "New York",
    value: 57.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-29"),
    label: "Boston",
    value: 51
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-30"),
    label: "San Francisco",
    value: 38.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-30"),
    label: "New York",
    value: 57.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-30"),
    label: "Boston",
    value: 54.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-31"),
    label: "San Francisco",
    value: 44.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-31"),
    label: "New York",
    value: 55.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-10-31"),
    label: "Boston",
    value: 58.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-01"),
    label: "San Francisco",
    value: 49.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-01"),
    label: "New York",
    value: 57.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-01"),
    label: "Boston",
    value: 62.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-02"),
    label: "San Francisco",
    value: 47.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-02"),
    label: "New York",
    value: 64.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-02"),
    label: "Boston",
    value: 71
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-03"),
    label: "San Francisco",
    value: 50.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-03"),
    label: "New York",
    value: 56.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-03"),
    label: "Boston",
    value: 58.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-04"),
    label: "San Francisco",
    value: 50.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-04"),
    label: "New York",
    value: 50.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-04"),
    label: "Boston",
    value: 45.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-05"),
    label: "San Francisco",
    value: 43.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-05"),
    label: "New York",
    value: 51.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-05"),
    label: "Boston",
    value: 52.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-06"),
    label: "San Francisco",
    value: 43.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-06"),
    label: "New York",
    value: 52.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-06"),
    label: "Boston",
    value: 73
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-07"),
    label: "San Francisco",
    value: 48.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-07"),
    label: "New York",
    value: 51.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-07"),
    label: "Boston",
    value: 75.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-08"),
    label: "San Francisco",
    value: 55.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-08"),
    label: "New York",
    value: 50.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-08"),
    label: "Boston",
    value: 72.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-09"),
    label: "San Francisco",
    value: 53.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-09"),
    label: "New York",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-09"),
    label: "Boston",
    value: 56.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-10"),
    label: "San Francisco",
    value: 57.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-10"),
    label: "New York",
    value: 55.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-10"),
    label: "Boston",
    value: 55.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-11"),
    label: "San Francisco",
    value: 48.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-11"),
    label: "New York",
    value: 53.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-11"),
    label: "Boston",
    value: 46.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-12"),
    label: "San Francisco",
    value: 46.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-12"),
    label: "New York",
    value: 54
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-12"),
    label: "Boston",
    value: 62
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-13"),
    label: "San Francisco",
    value: 51.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-13"),
    label: "New York",
    value: 53.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-13"),
    label: "Boston",
    value: 71.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-14"),
    label: "San Francisco",
    value: 56.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-14"),
    label: "New York",
    value: 53.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-14"),
    label: "Boston",
    value: 75.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-15"),
    label: "San Francisco",
    value: 59.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-15"),
    label: "New York",
    value: 53.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-15"),
    label: "Boston",
    value: 72.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-16"),
    label: "San Francisco",
    value: 56.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-16"),
    label: "New York",
    value: 52.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-16"),
    label: "Boston",
    value: 65.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-17"),
    label: "San Francisco",
    value: 49.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-17"),
    label: "New York",
    value: 52.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-17"),
    label: "Boston",
    value: 56.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-18"),
    label: "San Francisco",
    value: 41.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-18"),
    label: "New York",
    value: 53.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-18"),
    label: "Boston",
    value: 49.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-19"),
    label: "San Francisco",
    value: 44.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-19"),
    label: "New York",
    value: 49
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-19"),
    label: "Boston",
    value: 71.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-20"),
    label: "San Francisco",
    value: 54
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-20"),
    label: "New York",
    value: 50.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-20"),
    label: "Boston",
    value: 77.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-21"),
    label: "San Francisco",
    value: 54.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-21"),
    label: "New York",
    value: 51.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-21"),
    label: "Boston",
    value: 76.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-22"),
    label: "San Francisco",
    value: 49.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-22"),
    label: "New York",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-22"),
    label: "Boston",
    value: 68.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-23"),
    label: "San Francisco",
    value: 50
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-23"),
    label: "New York",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-23"),
    label: "Boston",
    value: 57
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-24"),
    label: "San Francisco",
    value: 44
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-24"),
    label: "New York",
    value: 55.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-24"),
    label: "Boston",
    value: 55.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-25"),
    label: "San Francisco",
    value: 50.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-25"),
    label: "New York",
    value: 51.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-25"),
    label: "Boston",
    value: 61.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-26"),
    label: "San Francisco",
    value: 52.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-26"),
    label: "New York",
    value: 53.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-26"),
    label: "Boston",
    value: 64.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-27"),
    label: "San Francisco",
    value: 49.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-27"),
    label: "New York",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-27"),
    label: "Boston",
    value: 51.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-28"),
    label: "San Francisco",
    value: 57.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-28"),
    label: "New York",
    value: 51
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-28"),
    label: "Boston",
    value: 43
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-29"),
    label: "San Francisco",
    value: 59.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-29"),
    label: "New York",
    value: 49.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-29"),
    label: "Boston",
    value: 46.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-30"),
    label: "San Francisco",
    value: 50.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-30"),
    label: "New York",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-11-30"),
    label: "Boston",
    value: 48
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-01"),
    label: "San Francisco",
    value: 44.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-01"),
    label: "New York",
    value: 60.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-01"),
    label: "Boston",
    value: 48.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-02"),
    label: "San Francisco",
    value: 43.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-02"),
    label: "New York",
    value: 62.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-02"),
    label: "Boston",
    value: 60.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-03"),
    label: "San Francisco",
    value: 42.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-03"),
    label: "New York",
    value: 58.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-03"),
    label: "Boston",
    value: 62.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-04"),
    label: "San Francisco",
    value: 43.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-04"),
    label: "New York",
    value: 52.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-04"),
    label: "Boston",
    value: 57.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-05"),
    label: "San Francisco",
    value: 50.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-05"),
    label: "New York",
    value: 51.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-05"),
    label: "Boston",
    value: 44.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-06"),
    label: "San Francisco",
    value: 54.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-06"),
    label: "New York",
    value: 49.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-06"),
    label: "Boston",
    value: 37.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-07"),
    label: "San Francisco",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-07"),
    label: "New York",
    value: 48.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-07"),
    label: "Boston",
    value: 35
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-08"),
    label: "San Francisco",
    value: 43.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-08"),
    label: "New York",
    value: 46.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-08"),
    label: "Boston",
    value: 37
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-09"),
    label: "San Francisco",
    value: 42.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-09"),
    label: "New York",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-09"),
    label: "Boston",
    value: 45.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-10"),
    label: "San Francisco",
    value: 45
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-10"),
    label: "New York",
    value: 52.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-10"),
    label: "Boston",
    value: 50.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-11"),
    label: "San Francisco",
    value: 33.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-11"),
    label: "New York",
    value: 48.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-11"),
    label: "Boston",
    value: 48.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-12"),
    label: "San Francisco",
    value: 36.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-12"),
    label: "New York",
    value: 47.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-12"),
    label: "Boston",
    value: 52.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-13"),
    label: "San Francisco",
    value: 38.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-13"),
    label: "New York",
    value: 47.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-13"),
    label: "Boston",
    value: 60.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-14"),
    label: "San Francisco",
    value: 41.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-14"),
    label: "New York",
    value: 46.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-14"),
    label: "Boston",
    value: 70
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-15"),
    label: "San Francisco",
    value: 49.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-15"),
    label: "New York",
    value: 48.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-15"),
    label: "Boston",
    value: 64.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-16"),
    label: "San Francisco",
    value: 50.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-16"),
    label: "New York",
    value: 47.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-16"),
    label: "Boston",
    value: 50.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-17"),
    label: "San Francisco",
    value: 40.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-17"),
    label: "New York",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-17"),
    label: "Boston",
    value: 51.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-18"),
    label: "San Francisco",
    value: 29.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-18"),
    label: "New York",
    value: 49.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-18"),
    label: "Boston",
    value: 55.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-19"),
    label: "San Francisco",
    value: 33.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-19"),
    label: "New York",
    value: 48.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-19"),
    label: "Boston",
    value: 62.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-20"),
    label: "San Francisco",
    value: 45.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-20"),
    label: "New York",
    value: 49.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-20"),
    label: "Boston",
    value: 56.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-21"),
    label: "San Francisco",
    value: 47.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-21"),
    label: "New York",
    value: 48.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-21"),
    label: "Boston",
    value: 47.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-22"),
    label: "San Francisco",
    value: 54.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-22"),
    label: "New York",
    value: 53.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-22"),
    label: "Boston",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-23"),
    label: "San Francisco",
    value: 47.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-23"),
    label: "New York",
    value: 47.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-23"),
    label: "Boston",
    value: 45.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-24"),
    label: "San Francisco",
    value: 34.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-24"),
    label: "New York",
    value: 47.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-24"),
    label: "Boston",
    value: 43.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-25"),
    label: "San Francisco",
    value: 35.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-25"),
    label: "New York",
    value: 48.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-25"),
    label: "Boston",
    value: 42.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-26"),
    label: "San Francisco",
    value: 43.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-26"),
    label: "New York",
    value: 45.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-26"),
    label: "Boston",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-27"),
    label: "San Francisco",
    value: 42.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-27"),
    label: "New York",
    value: 47.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-27"),
    label: "Boston",
    value: 45.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-28"),
    label: "San Francisco",
    value: 46.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-28"),
    label: "New York",
    value: 48.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-28"),
    label: "Boston",
    value: 44.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-29"),
    label: "San Francisco",
    value: 30.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-29"),
    label: "New York",
    value: 50.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-29"),
    label: "Boston",
    value: 50.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-30"),
    label: "San Francisco",
    value: 40.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-30"),
    label: "New York",
    value: 52.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-30"),
    label: "Boston",
    value: 52.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-31"),
    label: "San Francisco",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-31"),
    label: "New York",
    value: 50.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2011-12-31"),
    label: "Boston",
    value: 53.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-01"),
    label: "San Francisco",
    value: 46.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-01"),
    label: "New York",
    value: 53.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-01"),
    label: "Boston",
    value: 55.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-02"),
    label: "San Francisco",
    value: 43.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-02"),
    label: "New York",
    value: 53.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-02"),
    label: "Boston",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-03"),
    label: "San Francisco",
    value: 30.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-03"),
    label: "New York",
    value: 49.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-03"),
    label: "Boston",
    value: 41
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-04"),
    label: "San Francisco",
    value: 19.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-04"),
    label: "New York",
    value: 52.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-04"),
    label: "Boston",
    value: 48.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-05"),
    label: "San Francisco",
    value: 32.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-05"),
    label: "New York",
    value: 52.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-05"),
    label: "Boston",
    value: 54.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-06"),
    label: "San Francisco",
    value: 41.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-06"),
    label: "New York",
    value: 49
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-06"),
    label: "Boston",
    value: 61.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-07"),
    label: "San Francisco",
    value: 47
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-07"),
    label: "New York",
    value: 51
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-07"),
    label: "Boston",
    value: 59.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-08"),
    label: "San Francisco",
    value: 46
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-08"),
    label: "New York",
    value: 56.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-08"),
    label: "Boston",
    value: 52.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-09"),
    label: "San Francisco",
    value: 34.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-09"),
    label: "New York",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-09"),
    label: "Boston",
    value: 54
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-10"),
    label: "San Francisco",
    value: 39.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-10"),
    label: "New York",
    value: 51.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-10"),
    label: "Boston",
    value: 47.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-11"),
    label: "San Francisco",
    value: 40.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-11"),
    label: "New York",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-11"),
    label: "Boston",
    value: 49.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-12"),
    label: "San Francisco",
    value: 45.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-12"),
    label: "New York",
    value: 51.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-12"),
    label: "Boston",
    value: 48.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-13"),
    label: "San Francisco",
    value: 40.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-13"),
    label: "New York",
    value: 53.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-13"),
    label: "Boston",
    value: 40.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-14"),
    label: "San Francisco",
    value: 30.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-14"),
    label: "New York",
    value: 52.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-14"),
    label: "Boston",
    value: 43.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-15"),
    label: "San Francisco",
    value: 23.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-15"),
    label: "New York",
    value: 49.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-15"),
    label: "Boston",
    value: 45.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-16"),
    label: "San Francisco",
    value: 22.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-16"),
    label: "New York",
    value: 45.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-16"),
    label: "Boston",
    value: 65
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-17"),
    label: "San Francisco",
    value: 39.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-17"),
    label: "New York",
    value: 43.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-17"),
    label: "Boston",
    value: 68.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-18"),
    label: "San Francisco",
    value: 43.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-18"),
    label: "New York",
    value: 45
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-18"),
    label: "Boston",
    value: 47.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-19"),
    label: "San Francisco",
    value: 26.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-19"),
    label: "New York",
    value: 47.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-19"),
    label: "Boston",
    value: 57.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-20"),
    label: "San Francisco",
    value: 32.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-20"),
    label: "New York",
    value: 51.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-20"),
    label: "Boston",
    value: 61.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-21"),
    label: "San Francisco",
    value: 27.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-21"),
    label: "New York",
    value: 53.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-21"),
    label: "Boston",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-22"),
    label: "San Francisco",
    value: 25
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-22"),
    label: "New York",
    value: 48.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-22"),
    label: "Boston",
    value: 56.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-23"),
    label: "San Francisco",
    value: 39.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-23"),
    label: "New York",
    value: 52.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-23"),
    label: "Boston",
    value: 54.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-24"),
    label: "San Francisco",
    value: 48.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-24"),
    label: "New York",
    value: 49.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-24"),
    label: "Boston",
    value: 52.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-25"),
    label: "San Francisco",
    value: 43
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-25"),
    label: "New York",
    value: 52.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-25"),
    label: "Boston",
    value: 61.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-26"),
    label: "San Francisco",
    value: 37.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-26"),
    label: "New York",
    value: 53.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-26"),
    label: "Boston",
    value: 55
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-27"),
    label: "San Francisco",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-27"),
    label: "New York",
    value: 50.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-27"),
    label: "Boston",
    value: 50.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-28"),
    label: "San Francisco",
    value: 43.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-28"),
    label: "New York",
    value: 50.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-28"),
    label: "Boston",
    value: 52.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-29"),
    label: "San Francisco",
    value: 40.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-29"),
    label: "New York",
    value: 53.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-29"),
    label: "Boston",
    value: 44.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-30"),
    label: "San Francisco",
    value: 38
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-30"),
    label: "New York",
    value: 51.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-30"),
    label: "Boston",
    value: 49.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-31"),
    label: "San Francisco",
    value: 43.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-31"),
    label: "New York",
    value: 50
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-01-31"),
    label: "Boston",
    value: 62.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-01"),
    label: "San Francisco",
    value: 50.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-01"),
    label: "New York",
    value: 50
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-01"),
    label: "Boston",
    value: 64.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-02"),
    label: "San Francisco",
    value: 45.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-02"),
    label: "New York",
    value: 51.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-02"),
    label: "Boston",
    value: 61.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-03"),
    label: "San Francisco",
    value: 37.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-03"),
    label: "New York",
    value: 51.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-03"),
    label: "Boston",
    value: 70
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-04"),
    label: "San Francisco",
    value: 40.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-04"),
    label: "New York",
    value: 52
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-04"),
    label: "Boston",
    value: 61.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-05"),
    label: "San Francisco",
    value: 36.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-05"),
    label: "New York",
    value: 53.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-05"),
    label: "Boston",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-06"),
    label: "San Francisco",
    value: 39.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-06"),
    label: "New York",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-06"),
    label: "Boston",
    value: 44.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-07"),
    label: "San Francisco",
    value: 43.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-07"),
    label: "New York",
    value: 54.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-07"),
    label: "Boston",
    value: 51.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-08"),
    label: "San Francisco",
    value: 36.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-08"),
    label: "New York",
    value: 51.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-08"),
    label: "Boston",
    value: 49.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-09"),
    label: "San Francisco",
    value: 36.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-09"),
    label: "New York",
    value: 53.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-09"),
    label: "Boston",
    value: 45.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-10"),
    label: "San Francisco",
    value: 38.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-10"),
    label: "New York",
    value: 53.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-10"),
    label: "Boston",
    value: 54.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-11"),
    label: "San Francisco",
    value: 36.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-11"),
    label: "New York",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-11"),
    label: "Boston",
    value: 44.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-12"),
    label: "San Francisco",
    value: 29.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-12"),
    label: "New York",
    value: 50.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-12"),
    label: "Boston",
    value: 36.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-13"),
    label: "San Francisco",
    value: 33.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-13"),
    label: "New York",
    value: 49.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-13"),
    label: "Boston",
    value: 44.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-14"),
    label: "San Francisco",
    value: 39.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-14"),
    label: "New York",
    value: 48.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-14"),
    label: "Boston",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-15"),
    label: "San Francisco",
    value: 42.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-15"),
    label: "New York",
    value: 49.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-15"),
    label: "Boston",
    value: 68
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-16"),
    label: "San Francisco",
    value: 39.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-16"),
    label: "New York",
    value: 52.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-16"),
    label: "Boston",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-17"),
    label: "San Francisco",
    value: 46
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-17"),
    label: "New York",
    value: 49.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-17"),
    label: "Boston",
    value: 53.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-18"),
    label: "San Francisco",
    value: 41.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-18"),
    label: "New York",
    value: 51.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-18"),
    label: "Boston",
    value: 56.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-19"),
    label: "San Francisco",
    value: 39.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-19"),
    label: "New York",
    value: 47.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-19"),
    label: "Boston",
    value: 50.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-20"),
    label: "San Francisco",
    value: 38.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-20"),
    label: "New York",
    value: 48.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-20"),
    label: "Boston",
    value: 53
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-21"),
    label: "San Francisco",
    value: 37.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-21"),
    label: "New York",
    value: 49.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-21"),
    label: "Boston",
    value: 61
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-22"),
    label: "San Francisco",
    value: 45.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-22"),
    label: "New York",
    value: 53.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-22"),
    label: "Boston",
    value: 68.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-23"),
    label: "San Francisco",
    value: 50.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-23"),
    label: "New York",
    value: 54.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-23"),
    label: "Boston",
    value: 69.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-24"),
    label: "San Francisco",
    value: 42.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-24"),
    label: "New York",
    value: 55.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-24"),
    label: "Boston",
    value: 59.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-25"),
    label: "San Francisco",
    value: 42.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-25"),
    label: "New York",
    value: 51.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-25"),
    label: "Boston",
    value: 47.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-26"),
    label: "San Francisco",
    value: 36.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-26"),
    label: "New York",
    value: 47.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-26"),
    label: "Boston",
    value: 47.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-27"),
    label: "San Francisco",
    value: 40.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-27"),
    label: "New York",
    value: 45.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-27"),
    label: "Boston",
    value: 61.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-28"),
    label: "San Francisco",
    value: 45.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-28"),
    label: "New York",
    value: 47
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-28"),
    label: "Boston",
    value: 67.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-29"),
    label: "San Francisco",
    value: 40.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-29"),
    label: "New York",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-02-29"),
    label: "Boston",
    value: 70.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-01"),
    label: "San Francisco",
    value: 41.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-01"),
    label: "New York",
    value: 48.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-01"),
    label: "Boston",
    value: 62.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-02"),
    label: "San Francisco",
    value: 36.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-02"),
    label: "New York",
    value: 48.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-02"),
    label: "Boston",
    value: 72.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-03"),
    label: "San Francisco",
    value: 47.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-03"),
    label: "New York",
    value: 50.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-03"),
    label: "Boston",
    value: 59
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-04"),
    label: "San Francisco",
    value: 44.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-04"),
    label: "New York",
    value: 55
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-04"),
    label: "Boston",
    value: 51.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-05"),
    label: "San Francisco",
    value: 38.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-05"),
    label: "New York",
    value: 48.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-05"),
    label: "Boston",
    value: 55
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-06"),
    label: "San Francisco",
    value: 32.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-06"),
    label: "New York",
    value: 48.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-06"),
    label: "Boston",
    value: 61.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-07"),
    label: "San Francisco",
    value: 43.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-07"),
    label: "New York",
    value: 49.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-07"),
    label: "Boston",
    value: 67.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-08"),
    label: "San Francisco",
    value: 51.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-08"),
    label: "New York",
    value: 49.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-08"),
    label: "Boston",
    value: 72
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-09"),
    label: "San Francisco",
    value: 47.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-09"),
    label: "New York",
    value: 51.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-09"),
    label: "Boston",
    value: 46.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-10"),
    label: "San Francisco",
    value: 37.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-10"),
    label: "New York",
    value: 49.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-10"),
    label: "Boston",
    value: 46.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-11"),
    label: "San Francisco",
    value: 42.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-11"),
    label: "New York",
    value: 50
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-11"),
    label: "Boston",
    value: 56.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-12"),
    label: "San Francisco",
    value: 48.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-12"),
    label: "New York",
    value: 48.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-12"),
    label: "Boston",
    value: 61.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-13"),
    label: "San Francisco",
    value: 52.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-13"),
    label: "New York",
    value: 53.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-13"),
    label: "Boston",
    value: 68.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-14"),
    label: "San Francisco",
    value: 60.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-14"),
    label: "New York",
    value: 55.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-14"),
    label: "Boston",
    value: 71.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-15"),
    label: "San Francisco",
    value: 47.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-15"),
    label: "New York",
    value: 55.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-15"),
    label: "Boston",
    value: 72
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-16"),
    label: "San Francisco",
    value: 44.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-16"),
    label: "New York",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-16"),
    label: "Boston",
    value: 72.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-17"),
    label: "San Francisco",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-17"),
    label: "New York",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-17"),
    label: "Boston",
    value: 71.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-18"),
    label: "San Francisco",
    value: 48.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-18"),
    label: "New York",
    value: 47.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-18"),
    label: "Boston",
    value: 71.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-19"),
    label: "San Francisco",
    value: 53.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-19"),
    label: "New York",
    value: 45.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-19"),
    label: "Boston",
    value: 73
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-20"),
    label: "San Francisco",
    value: 57.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-20"),
    label: "New York",
    value: 49.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-20"),
    label: "Boston",
    value: 63.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-21"),
    label: "San Francisco",
    value: 57.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-21"),
    label: "New York",
    value: 51.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-21"),
    label: "Boston",
    value: 60
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-22"),
    label: "San Francisco",
    value: 57.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-22"),
    label: "New York",
    value: 51.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-22"),
    label: "Boston",
    value: 62.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-23"),
    label: "San Francisco",
    value: 61.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-23"),
    label: "New York",
    value: 48.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-23"),
    label: "Boston",
    value: 61.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-24"),
    label: "San Francisco",
    value: 55.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-24"),
    label: "New York",
    value: 49
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-24"),
    label: "Boston",
    value: 62
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-25"),
    label: "San Francisco",
    value: 48.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-25"),
    label: "New York",
    value: 46.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-25"),
    label: "Boston",
    value: 64.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-26"),
    label: "San Francisco",
    value: 49.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-26"),
    label: "New York",
    value: 49.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-26"),
    label: "Boston",
    value: 66
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-27"),
    label: "San Francisco",
    value: 39.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-27"),
    label: "New York",
    value: 54.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-27"),
    label: "Boston",
    value: 65.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-28"),
    label: "San Francisco",
    value: 49.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-28"),
    label: "New York",
    value: 54.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-28"),
    label: "Boston",
    value: 69.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-29"),
    label: "San Francisco",
    value: 56.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-29"),
    label: "New York",
    value: 52.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-29"),
    label: "Boston",
    value: 69.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-30"),
    label: "San Francisco",
    value: 46.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-30"),
    label: "New York",
    value: 54.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-30"),
    label: "Boston",
    value: 73.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-31"),
    label: "San Francisco",
    value: 42.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-31"),
    label: "New York",
    value: 56.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-03-31"),
    label: "Boston",
    value: 73.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-01"),
    label: "San Francisco",
    value: 45.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-01"),
    label: "New York",
    value: 51.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-01"),
    label: "Boston",
    value: 75.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-02"),
    label: "San Francisco",
    value: 48.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-02"),
    label: "New York",
    value: 50.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-02"),
    label: "Boston",
    value: 75.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-03"),
    label: "San Francisco",
    value: 51.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-03"),
    label: "New York",
    value: 52.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-03"),
    label: "Boston",
    value: 77.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-04"),
    label: "San Francisco",
    value: 61
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-04"),
    label: "New York",
    value: 50.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-04"),
    label: "Boston",
    value: 67
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-05"),
    label: "San Francisco",
    value: 50.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-05"),
    label: "New York",
    value: 47.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-05"),
    label: "Boston",
    value: 71.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-06"),
    label: "San Francisco",
    value: 48
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-06"),
    label: "New York",
    value: 47.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-06"),
    label: "Boston",
    value: 70.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-07"),
    label: "San Francisco",
    value: 51.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-07"),
    label: "New York",
    value: 49.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-07"),
    label: "Boston",
    value: 73.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-08"),
    label: "San Francisco",
    value: 55.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-08"),
    label: "New York",
    value: 50
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-08"),
    label: "Boston",
    value: 71.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-09"),
    label: "San Francisco",
    value: 58.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-09"),
    label: "New York",
    value: 51.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-09"),
    label: "Boston",
    value: 70
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-10"),
    label: "San Francisco",
    value: 55
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-10"),
    label: "New York",
    value: 53.8
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-10"),
    label: "Boston",
    value: 69
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-11"),
    label: "San Francisco",
    value: 49
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-11"),
    label: "New York",
    value: 52.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-11"),
    label: "Boston",
    value: 69.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-12"),
    label: "San Francisco",
    value: 51.7
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-12"),
    label: "New York",
    value: 53.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-12"),
    label: "Boston",
    value: 74.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-13"),
    label: "San Francisco",
    value: 53.1
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-13"),
    label: "New York",
    value: 50.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-13"),
    label: "Boston",
    value: 73.4
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-14"),
    label: "San Francisco",
    value: 55.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-14"),
    label: "New York",
    value: 50.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-14"),
    label: "Boston",
    value: 76
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-15"),
    label: "San Francisco",
    value: 62.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-15"),
    label: "New York",
    value: 51.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-15"),
    label: "Boston",
    value: 74.5
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-16"),
    label: "San Francisco",
    value: 62.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-16"),
    label: "New York",
    value: 51.9
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-16"),
    label: "Boston",
    value: 63.6
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-17"),
    label: "San Francisco",
    value: 69.3
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-17"),
    label: "New York",
    value: 53.2
  }, {
    time: d3.time.format('%Y-%m-%d').parse("2012-04-17"),
    label: "Boston",
    value: 67.3
  }
];


})();

(function() {


App.data.zeroes_grouped = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 0
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 0
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 0
  }
];


})();

(function() {


App.data.same_value_grouped = [
  {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 0.1
  }, {
    label: 'Group One',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-01"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-02"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-03"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-04"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-05"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-06"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-07"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-08"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-09"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-10"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-11"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-12"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-13"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-14"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-15"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-16"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-17"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-18"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-19"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-20"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-21"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-22"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-23"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-24"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-25"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-26"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-27"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-28"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-29"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-30"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-05-31"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-01"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-02"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-03"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-04"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-05"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-06"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-07"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-08"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-09"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-10"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-11"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-12"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-13"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-14"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-15"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-16"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-17"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-18"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-19"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-20"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-21"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-22"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-23"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-24"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-25"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-26"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-27"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-06-28"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-01"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-02"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-03"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-04"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-05"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-06"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-07"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-08"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-09"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-10"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-11"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-12"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-13"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-14"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-15"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-16"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-17"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-18"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-19"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-20"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-21"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-22"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-23"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-24"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-25"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-26"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-27"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-28"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-29"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-30"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-07-31"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-01"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-02"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-03"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-04"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-05"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-06"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-07"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-08"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-09"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-10"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-11"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-12"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-13"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-14"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-15"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-16"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-17"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-18"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-19"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-20"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-21"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-22"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-23"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-24"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-25"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-26"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-27"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-28"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-29"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-08-30"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-01"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-02"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-03"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-04"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-05"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-06"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-07"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-08"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-09"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-10"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-11"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-12"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-13"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-14"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-15"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-16"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-17"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-18"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-19"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-20"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-21"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-22"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-23"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-24"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-25"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-26"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-27"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-28"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-29"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-30"),
    value: 0.1
  }, {
    label: 'Group Two',
    time: d3.time.format('%Y-%m-%d').parse("2013-09-31"),
    value: 0.1
  }
];


})();

(function() {


window.countries = [
  {
    name: 'Afghanistan',
    code: 'AF'
  }, {
    name: 'Aland Islands',
    code: 'AX'
  }, {
    name: 'Albania',
    code: 'AL'
  }, {
    name: 'Algeria',
    code: 'DZ'
  }, {
    name: 'American Samoa',
    code: 'AS'
  }, {
    name: 'Andorra',
    code: 'AD'
  }, {
    name: 'Angola',
    code: 'AO'
  }, {
    name: 'Anguilla',
    code: 'AI'
  }, {
    name: 'Antarctica',
    code: 'AQ'
  }, {
    name: 'Antigua and Barbuda',
    code: 'AG'
  }, {
    name: 'Argentina',
    code: 'AR'
  }, {
    name: 'Armenia',
    code: 'AM'
  }, {
    name: 'Aruba',
    code: 'AW'
  }, {
    name: 'Australia',
    code: 'AU'
  }, {
    name: 'Austria',
    code: 'AT'
  }, {
    name: 'Azerbaijan',
    code: 'AZ'
  }, {
    name: 'Bahamas',
    code: 'BS'
  }, {
    name: 'Bahrain',
    code: 'BH'
  }, {
    name: 'Bangladesh',
    code: 'BD'
  }, {
    name: 'Barbados',
    code: 'BB'
  }, {
    name: 'Belarus',
    code: 'BY'
  }, {
    name: 'Belgium',
    code: 'BE'
  }, {
    name: 'Belize',
    code: 'BZ'
  }, {
    name: 'Benin',
    code: 'BJ'
  }, {
    name: 'Bermuda',
    code: 'BM'
  }, {
    name: 'Bhutan',
    code: 'BT'
  }, {
    name: 'Bolivia',
    code: 'BO'
  }, {
    name: 'Bosnia and Herzegovina',
    code: 'BA'
  }, {
    name: 'Botswana',
    code: 'BW'
  }, {
    name: 'Bouvet Island',
    code: 'BV'
  }, {
    name: 'Brazil',
    code: 'BR'
  }, {
    name: 'British Indian Ocean Territory',
    code: 'IO'
  }, {
    name: 'Brunei Darussalam',
    code: 'BN'
  }, {
    name: 'Bulgaria',
    code: 'BG'
  }, {
    name: 'Burkina Faso',
    code: 'BF'
  }, {
    name: 'Burundi',
    code: 'BI'
  }, {
    name: 'Cambodia',
    code: 'KH'
  }, {
    name: 'Cameroon',
    code: 'CM'
  }, {
    name: 'Canada',
    code: 'CA'
  }, {
    name: 'Cape Verde',
    code: 'CV'
  }, {
    name: 'Cayman Islands',
    code: 'KY'
  }, {
    name: 'Central African Republic',
    code: 'CF'
  }, {
    name: 'Chad',
    code: 'TD'
  }, {
    name: 'Chile',
    code: 'CL'
  }, {
    name: 'China',
    code: 'CN'
  }, {
    name: 'Christmas Island',
    code: 'CX'
  }, {
    name: 'Cocos (Keeling) Islands',
    code: 'CC'
  }, {
    name: 'Colombia',
    code: 'CO'
  }, {
    name: 'Comoros',
    code: 'KM'
  }, {
    name: 'Congo',
    code: 'CG'
  }, {
    name: 'Congo, The Democratic Republic of the',
    code: 'CD'
  }, {
    name: 'Cook Islands',
    code: 'CK'
  }, {
    name: 'Costa Rica',
    code: 'CR'
  }, {
    name: 'Cote D\'Ivoire',
    code: 'CI'
  }, {
    name: 'Croatia',
    code: 'HR'
  }, {
    name: 'Cuba',
    code: 'CU'
  }, {
    name: 'Cyprus',
    code: 'CY'
  }, {
    name: 'Czech Republic',
    code: 'CZ'
  }, {
    name: 'Denmark',
    code: 'DK'
  }, {
    name: 'Djibouti',
    code: 'DJ'
  }, {
    name: 'Dominica',
    code: 'DM'
  }, {
    name: 'Dominican Republic',
    code: 'DO'
  }, {
    name: 'Ecuador',
    code: 'EC'
  }, {
    name: 'Egypt',
    code: 'EG'
  }, {
    name: 'El Salvador',
    code: 'SV'
  }, {
    name: 'Equatorial Guinea',
    code: 'GQ'
  }, {
    name: 'Eritrea',
    code: 'ER'
  }, {
    name: 'Estonia',
    code: 'EE'
  }, {
    name: 'Ethiopia',
    code: 'ET'
  }, {
    name: 'Falkland Islands (Malvinas)',
    code: 'FK'
  }, {
    name: 'Faroe Islands',
    code: 'FO'
  }, {
    name: 'Fiji',
    code: 'FJ'
  }, {
    name: 'Finland',
    code: 'FI'
  }, {
    name: 'France',
    code: 'FR'
  }, {
    name: 'French Guiana',
    code: 'GF'
  }, {
    name: 'French Polynesia',
    code: 'PF'
  }, {
    name: 'French Southern Territories',
    code: 'TF'
  }, {
    name: 'Gabon',
    code: 'GA'
  }, {
    name: 'Gambia',
    code: 'GM'
  }, {
    name: 'Georgia',
    code: 'GE'
  }, {
    name: 'Germany',
    code: 'DE'
  }, {
    name: 'Ghana',
    code: 'GH'
  }, {
    name: 'Gibraltar',
    code: 'GI'
  }, {
    name: 'Greece',
    code: 'GR'
  }, {
    name: 'Greenland',
    code: 'GL'
  }, {
    name: 'Grenada',
    code: 'GD'
  }, {
    name: 'Guadeloupe',
    code: 'GP'
  }, {
    name: 'Guam',
    code: 'GU'
  }, {
    name: 'Guatemala',
    code: 'GT'
  }, {
    name: 'Guernsey',
    code: 'GG'
  }, {
    name: 'Guinea',
    code: 'GN'
  }, {
    name: 'Guinea-Bissau',
    code: 'GW'
  }, {
    name: 'Guyana',
    code: 'GY'
  }, {
    name: 'Haiti',
    code: 'HT'
  }, {
    name: 'Heard Island and Mcdonald Islands',
    code: 'HM'
  }, {
    name: 'Holy See (Vatican City State)',
    code: 'VA'
  }, {
    name: 'Honduras',
    code: 'HN'
  }, {
    name: 'Hong Kong',
    code: 'HK'
  }, {
    name: 'Hungary',
    code: 'HU'
  }, {
    name: 'Iceland',
    code: 'IS'
  }, {
    name: 'India',
    code: 'IN'
  }, {
    name: 'Indonesia',
    code: 'ID'
  }, {
    name: 'Iran, Islamic Republic Of',
    code: 'IR'
  }, {
    name: 'Iraq',
    code: 'IQ'
  }, {
    name: 'Ireland',
    code: 'IE'
  }, {
    name: 'Isle of Man',
    code: 'IM'
  }, {
    name: 'Israel',
    code: 'IL'
  }, {
    name: 'Italy',
    code: 'IT'
  }, {
    name: 'Jamaica',
    code: 'JM'
  }, {
    name: 'Japan',
    code: 'JP'
  }, {
    name: 'Jersey',
    code: 'JE'
  }, {
    name: 'Jordan',
    code: 'JO'
  }, {
    name: 'Kazakhstan',
    code: 'KZ'
  }, {
    name: 'Kenya',
    code: 'KE'
  }, {
    name: 'Kiribati',
    code: 'KI'
  }, {
    name: 'Korea, Democratic People\'S Republic of',
    code: 'KP'
  }, {
    name: 'Korea, Republic of',
    code: 'KR'
  }, {
    name: 'Kuwait',
    code: 'KW'
  }, {
    name: 'Kyrgyzstan',
    code: 'KG'
  }, {
    name: 'Lao People\'S Democratic Republic',
    code: 'LA'
  }, {
    name: 'Latvia',
    code: 'LV'
  }, {
    name: 'Lebanon',
    code: 'LB'
  }, {
    name: 'Lesotho',
    code: 'LS'
  }, {
    name: 'Liberia',
    code: 'LR'
  }, {
    name: 'Libyan Arab Jamahiriya',
    code: 'LY'
  }, {
    name: 'Liechtenstein',
    code: 'LI'
  }, {
    name: 'Lithuania',
    code: 'LT'
  }, {
    name: 'Luxembourg',
    code: 'LU'
  }, {
    name: 'Macao',
    code: 'MO'
  }, {
    name: 'Macedonia, The Former Yugoslav Republic of',
    code: 'MK'
  }, {
    name: 'Madagascar',
    code: 'MG'
  }, {
    name: 'Malawi',
    code: 'MW'
  }, {
    name: 'Malaysia',
    code: 'MY'
  }, {
    name: 'Maldives',
    code: 'MV'
  }, {
    name: 'Mali',
    code: 'ML'
  }, {
    name: 'Malta',
    code: 'MT'
  }, {
    name: 'Marshall Islands',
    code: 'MH'
  }, {
    name: 'Martinique',
    code: 'MQ'
  }, {
    name: 'Mauritania',
    code: 'MR'
  }, {
    name: 'Mauritius',
    code: 'MU'
  }, {
    name: 'Mayotte',
    code: 'YT'
  }, {
    name: 'Mexico',
    code: 'MX'
  }, {
    name: 'Micronesia, Federated States of',
    code: 'FM'
  }, {
    name: 'Moldova, Republic of',
    code: 'MD'
  }, {
    name: 'Monaco',
    code: 'MC'
  }, {
    name: 'Mongolia',
    code: 'MN'
  }, {
    name: 'Montserrat',
    code: 'MS'
  }, {
    name: 'Morocco',
    code: 'MA'
  }, {
    name: 'Mozambique',
    code: 'MZ'
  }, {
    name: 'Myanmar',
    code: 'MM'
  }, {
    name: 'Namibia',
    code: 'NA'
  }, {
    name: 'Nauru',
    code: 'NR'
  }, {
    name: 'Nepal',
    code: 'NP'
  }, {
    name: 'Netherlands',
    code: 'NL'
  }, {
    name: 'Netherlands Antilles',
    code: 'AN'
  }, {
    name: 'New Caledonia',
    code: 'NC'
  }, {
    name: 'New Zealand',
    code: 'NZ'
  }, {
    name: 'Nicaragua',
    code: 'NI'
  }, {
    name: 'Niger',
    code: 'NE'
  }, {
    name: 'Nigeria',
    code: 'NG'
  }, {
    name: 'Niue',
    code: 'NU'
  }, {
    name: 'Norfolk Island',
    code: 'NF'
  }, {
    name: 'Northern Mariana Islands',
    code: 'MP'
  }, {
    name: 'Norway',
    code: 'NO'
  }, {
    name: 'Oman',
    code: 'OM'
  }, {
    name: 'Pakistan',
    code: 'PK'
  }, {
    name: 'Palau',
    code: 'PW'
  }, {
    name: 'Palestinian Territory, Occupied',
    code: 'PS'
  }, {
    name: 'Panama',
    code: 'PA'
  }, {
    name: 'Papua New Guinea',
    code: 'PG'
  }, {
    name: 'Paraguay',
    code: 'PY'
  }, {
    name: 'Peru',
    code: 'PE'
  }, {
    name: 'Philippines',
    code: 'PH'
  }, {
    name: 'Pitcairn',
    code: 'PN'
  }, {
    name: 'Poland',
    code: 'PL'
  }, {
    name: 'Portugal',
    code: 'PT'
  }, {
    name: 'Puerto Rico',
    code: 'PR'
  }, {
    name: 'Qatar',
    code: 'QA'
  }, {
    name: 'Reunion',
    code: 'RE'
  }, {
    name: 'Romania',
    code: 'RO'
  }, {
    name: 'Russian Federation',
    code: 'RU'
  }, {
    name: 'RWANDA',
    code: 'RW'
  }, {
    name: 'Saint Helena',
    code: 'SH'
  }, {
    name: 'Saint Kitts and Nevis',
    code: 'KN'
  }, {
    name: 'Saint Lucia',
    code: 'LC'
  }, {
    name: 'Saint Pierre and Miquelon',
    code: 'PM'
  }, {
    name: 'Saint Vincent and the Grenadines',
    code: 'VC'
  }, {
    name: 'Samoa',
    code: 'WS'
  }, {
    name: 'San Marino',
    code: 'SM'
  }, {
    name: 'Sao Tome and Principe',
    code: 'ST'
  }, {
    name: 'Saudi Arabia',
    code: 'SA'
  }, {
    name: 'Senegal',
    code: 'SN'
  }, {
    name: 'Serbia and Montenegro',
    code: 'CS'
  }, {
    name: 'Seychelles',
    code: 'SC'
  }, {
    name: 'Sierra Leone',
    code: 'SL'
  }, {
    name: 'Singapore',
    code: 'SG'
  }, {
    name: 'Slovakia',
    code: 'SK'
  }, {
    name: 'Slovenia',
    code: 'SI'
  }, {
    name: 'Solomon Islands',
    code: 'SB'
  }, {
    name: 'Somalia',
    code: 'SO'
  }, {
    name: 'South Africa',
    code: 'ZA'
  }, {
    name: 'South Georgia and the South Sandwich Islands',
    code: 'GS'
  }, {
    name: 'Spain',
    code: 'ES'
  }, {
    name: 'Sri Lanka',
    code: 'LK'
  }, {
    name: 'Sudan',
    code: 'SD'
  }, {
    name: 'Suriname',
    code: 'SR'
  }, {
    name: 'Svalbard and Jan Mayen',
    code: 'SJ'
  }, {
    name: 'Swaziland',
    code: 'SZ'
  }, {
    name: 'Sweden',
    code: 'SE'
  }, {
    name: 'Switzerland',
    code: 'CH'
  }, {
    name: 'Syrian Arab Republic',
    code: 'SY'
  }, {
    name: 'Taiwan, Province of China',
    code: 'TW'
  }, {
    name: 'Tajikistan',
    code: 'TJ'
  }, {
    name: 'Tanzania, United Republic of',
    code: 'TZ'
  }, {
    name: 'Thailand',
    code: 'TH'
  }, {
    name: 'Timor-Leste',
    code: 'TL'
  }, {
    name: 'Togo',
    code: 'TG'
  }, {
    name: 'Tokelau',
    code: 'TK'
  }, {
    name: 'Tonga',
    code: 'TO'
  }, {
    name: 'Trinidad and Tobago',
    code: 'TT'
  }, {
    name: 'Tunisia',
    code: 'TN'
  }, {
    name: 'Turkey',
    code: 'TR'
  }, {
    name: 'Turkmenistan',
    code: 'TM'
  }, {
    name: 'Turks and Caicos Islands',
    code: 'TC'
  }, {
    name: 'Tuvalu',
    code: 'TV'
  }, {
    name: 'Uganda',
    code: 'UG'
  }, {
    name: 'Ukraine',
    code: 'UA'
  }, {
    name: 'United Arab Emirates',
    code: 'AE'
  }, {
    name: 'United Kingdom',
    code: 'GB'
  }, {
    name: 'United States',
    code: 'US'
  }, {
    name: 'United States Minor Outlying Islands',
    code: 'UM'
  }, {
    name: 'Uruguay',
    code: 'UY'
  }, {
    name: 'Uzbekistan',
    code: 'UZ'
  }, {
    name: 'Vanuatu',
    code: 'VU'
  }, {
    name: 'Venezuela',
    code: 'VE'
  }, {
    name: 'Viet Nam',
    code: 'VN'
  }, {
    name: 'Virgin Islands, British',
    code: 'VG'
  }, {
    name: 'Virgin Islands, U.S.',
    code: 'VI'
  }, {
    name: 'Wallis and Futuna',
    code: 'WF'
  }, {
    name: 'Western Sahara',
    code: 'EH'
  }, {
    name: 'Yemen',
    code: 'YE'
  }, {
    name: 'Zambia',
    code: 'ZM'
  }, {
    name: 'Zimbabwe',
    code: 'ZW'
  }
];


})();

(function() {


window.mlb = [
  {
    city: 'New York',
    code: 'NYY',
    league: 'American',
    division: 'East',
    nickname: 'Yankees',
    ballpark: 'Yankee Stadium',
    championships: 27,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [95, 97, 95, 103, 89, 94, 97, 95, 101, 101, 103, 95, 87, 98, 114, 96, 92, 79, 70, 88, 76, 71, 67, 74, 85, 89, 90, 97, 87, 91, 79, 59, 103, 89, 100, 100, 97, 83, 89, 80, 79, 82, 93, 80, 83, 72, 70, 77, 99, 104, 96, 109, 97, 79, 92, 98, 97, 96, 103, 99, 95, 98, 98, 97, 94, 97, 87, 81, 83, 98, 103, 101, 88, 106, 99, 102, 102, 89, 94, 91, 107, 94, 86, 88, 101, 110, 91, 69, 89, 98, 94, 98, 95, 80, 60, 71, 80, 69, 70, 57, 50, 76, 88, 74, 51, 70, 90, 71, 92, 72, 50, 68],
    wsyears: [2009, 2000, 1999, 1998, 1996, 1978, 1977, 1962, 1961, 1958, 1956, 1953, 1952, 1951, 1950, 1949, 1947, 1943, 1941, 1939, 1938, 1937, 1936, 1932, 1928, 1927, 1923]
  }, {
    city: 'Baltimore',
    code: 'BAL',
    league: 'American',
    division: 'East',
    nickname: 'Orioles',
    ballpark: 'Oriole Park',
    championships: 2,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [93, 69, 66, 64, 68, 69, 70, 74, 78, 71, 67, 63, 74, 78, 79, 98, 88, 71, 63, 85, 89, 67, 76, 87, 54, 67, 73, 83, 85, 98, 94, 59, 100, 102, 90, 97, 88, 90, 91, 97, 80, 101, 108, 109, 91, 76, 97, 94, 97, 86, 77, 95, 89, 74, 74, 76, 69, 57, 54, 54, 64, 52, 58, 53, 59, 59, 66, 81, 89, 72, 82, 70, 67, 43, 55, 46, 57, 65, 67, 55, 63, 63, 64, 79, 82, 59, 62, 82, 74, 74, 93, 81, 76, 67, 58, 57, 79, 63, 71, 57, 53, 45, 47, 61, 83, 69, 76, 54, 65, 65, 78, 48],
    wsyears: [1983, 1970, 1966]
  }, {
    city: 'Tampa Bay',
    code: 'TB',
    league: 'American',
    division: 'East',
    nickname: 'Rays',
    ballpark: 'Tropicana Field',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998],
    wins: [90, 91, 96, 84, 97, 66, 61, 67, 70, 63, 55, 62, 69, 69, 63],
    wsyears: []
  }, {
    city: 'Toronto',
    code: 'TOR',
    league: 'American',
    division: 'East',
    nickname: 'Blue Jays',
    ballpark: 'Rogers Centre',
    championships: 2,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977],
    wins: [73, 81, 85, 75, 86, 83, 87, 80, 67, 86, 78, 80, 83, 84, 88, 76, 74, 56, 55, 95, 96, 91, 86, 89, 87, 96, 86, 99, 89, 89, 78, 37, 67, 53, 59, 54],
    wsyears: [1993, 1992]
  }, {
    city: 'Boston',
    code: 'BOS',
    league: 'American',
    division: 'East',
    nickname: 'Red Sox',
    ballpark: 'Fenway Park',
    championships: 7,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [69, 90, 89, 95, 95, 96, 86, 95, 98, 95, 93, 82, 85, 94, 92, 78, 85, 86, 54, 80, 73, 84, 88, 83, 89, 78, 95, 81, 86, 78, 89, 59, 83, 91, 99, 97, 83, 95, 84, 89, 85, 85, 87, 87, 86, 92, 72, 62, 72, 76, 76, 76, 65, 75, 79, 82, 84, 84, 69, 84, 76, 87, 94, 96, 96, 83, 104, 71, 77, 68, 93, 84, 82, 89, 88, 80, 74, 78, 76, 63, 43, 62, 52, 58, 57, 51, 46, 47, 67, 61, 61, 75, 72, 66, 75, 90, 91, 101, 91, 79, 105, 78, 81, 88, 75, 59, 49, 78, 95, 91, 77, 79],
    wsyears: [2007, 2004, 1918, 1916, 1915, 1912, 1903]
  }, {
    city: 'Cleveland',
    code: 'CLE',
    league: 'American',
    division: 'Central',
    nickname: 'Indians',
    ballpark: 'Progressive Field',
    championships: 2,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [68, 80, 69, 65, 81, 96, 78, 93, 80, 68, 74, 91, 90, 97, 89, 86, 99, 100, 66, 76, 76, 57, 77, 73, 78, 61, 84, 60, 75, 70, 78, 52, 79, 81, 69, 71, 81, 79, 77, 71, 72, 60, 76, 62, 86, 75, 81, 87, 79, 79, 80, 78, 76, 89, 77, 76, 88, 93, 111, 92, 93, 93, 92, 89, 97, 80, 68, 73, 72, 82, 75, 75, 89, 87, 86, 83, 80, 82, 85, 75, 87, 78, 81, 81, 62, 66, 88, 70, 67, 82, 78, 94, 98, 84, 73, 88, 77, 57, 51, 86, 75, 80, 71, 71, 90, 85, 89, 76, 86, 77, 69, 54],
    wsyears: [1948, 1920]
  }, {
    city: 'Detroit',
    code: 'DET',
    league: 'American',
    division: 'Central',
    nickname: 'Tigers',
    ballpark: 'Comerica Park',
    championships: 4,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [88, 95, 81, 86, 74, 88, 95, 71, 72, 43, 55, 66, 79, 69, 65, 79, 53, 60, 53, 85, 75, 84, 79, 59, 88, 98, 87, 84, 104, 92, 83, 60, 84, 85, 86, 74, 74, 57, 72, 85, 86, 91, 79, 90, 103, 91, 88, 89, 85, 79, 85, 101, 71, 76, 77, 78, 82, 79, 68, 60, 50, 73, 95, 87, 78, 85, 92, 88, 88, 78, 73, 75, 90, 81, 84, 89, 83, 93, 101, 75, 76, 61, 75, 70, 68, 82, 79, 81, 86, 83, 79, 71, 61, 80, 55, 78, 87, 100, 80, 66, 69, 89, 86, 98, 90, 92, 71, 79, 62, 65, 52, 74],
    wsyears: [1984, 1968, 1945, 1935]
  }, {
    city: 'Chicago',
    code: 'CWS',
    league: 'American',
    division: 'Central',
    nickname: 'White Sox',
    ballpark: 'U.S. Cellular Field',
    championships: 3,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969],
    wins: [72, 71, 67, 65, 75, 69, 62, 56, 58, 83, 62, 65, 77, 64, 72, 67, 75, 70, 64, 84, 72, 82, 75, 92, 84, 83, 76, 91, 84, 79, 90, 50, 97, 85, 92, 102, 90, 91, 77, 88, 76, 85, 65, 69],
    wsyears: [1985]
  }, {
    city: 'Kansas City',
    code: 'KC',
    league: 'American',
    division: 'Central',
    nickname: 'Royals',
    ballpark: 'Kauffman Stadium',
    championships: 1,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969],
    wins: [72, 71, 67, 65, 75, 69, 62, 56, 58, 83, 62, 65, 77, 64, 72, 67, 75, 70, 64, 84, 72, 82, 75, 92, 84, 83, 76, 91, 84, 79, 90, 50, 97, 85, 92, 102, 90, 91, 77, 88, 76, 85, 65, 69],
    wsyears: [1985]
  }, {
    city: 'Minnesota',
    code: 'MIN',
    league: 'American',
    division: 'Central',
    nickname: 'Twins',
    ballpark: 'Target Field',
    championships: 3,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [66, 63, 94, 87, 88, 79, 96, 83, 92, 90, 94, 85, 69, 63, 70, 68, 78, 56, 53, 71, 90, 95, 74, 80, 91, 85, 71, 77, 81, 70, 60, 41, 77, 82, 73, 84, 85, 76, 82, 81, 77, 74, 98, 97, 79, 91, 89, 102, 79, 91, 91, 70, 73, 63, 61, 55, 59, 53, 66, 76, 78, 62, 67, 50, 56, 64, 76, 87, 64, 84, 62, 70, 64, 65, 75, 73, 82, 67, 66, 99, 93, 92, 94, 71, 75, 85, 81, 96, 92, 75, 69, 80, 68, 56, 72, 74, 76, 85, 81, 90, 91, 64, 66, 42, 67, 49, 55, 64, 38, 43, 61, 61],
    wsyears: [1991, 1987, 1924]
  }, {
    city: 'Texas',
    code: 'TEX',
    league: 'American',
    division: 'West',
    nickname: 'Rangers',
    ballpark: 'Rangers Ballpark',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961],
    wins: [93, 96, 90, 87, 79, 75, 80, 79, 89, 71, 72, 73, 71, 95, 88, 77, 90, 74, 52, 86, 77, 85, 83, 83, 70, 75, 87, 62, 69, 77, 64, 57, 76, 83, 87, 94, 76, 79, 84, 57, 54, 63, 70, 86, 65, 76, 71, 70, 62, 56, 60, 61],
    wsyears: []
  }, {
    city: 'Los Angeles',
    code: 'LAA',
    league: 'American',
    division: 'West',
    nickname: 'Angels',
    ballpark: 'Angel Stadium',
    championships: 1,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961],
    wins: [89, 86, 80, 97, 100, 94, 89, 95, 92, 77, 99, 75, 82, 70, 85, 84, 70, 78, 47, 71, 72, 81, 80, 91, 75, 75, 92, 90, 81, 70, 93, 51, 65, 88, 87, 74, 76, 72, 68, 79, 75, 76, 86, 71, 67, 84, 80, 75, 82, 70, 86, 70],
    wsyears: [2002]
  }, {
    city: 'Houston',
    code: 'HOU',
    league: 'American',
    division: 'West',
    nickname: 'Astros',
    ballpark: 'Minute Maid Park',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962],
    wins: [55, 56, 76, 74, 86, 73, 82, 89, 92, 87, 84, 93, 72, 97, 102, 84, 82, 76, 66, 85, 81, 65, 75, 86, 82, 76, 96, 83, 80, 85, 77, 61, 93, 89, 74, 81, 80, 64, 81, 82, 84, 79, 79, 81, 72, 69, 72, 65, 66, 66, 64],
    wsyears: []
  }, {
    city: 'Oakland',
    code: 'OAK',
    league: 'American',
    division: 'West',
    nickname: 'Athletics',
    ballpark: 'The Coliseum',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901],
    wins: [94, 74, 81, 75, 75, 76, 93, 88, 91, 96, 103, 102, 91, 87, 74, 65, 78, 67, 51, 68, 96, 84, 103, 99, 104, 81, 76, 77, 77, 74, 68, 64, 83, 54, 69, 63, 87, 98, 90, 94, 93, 101, 89, 88, 82, 62, 74, 59, 57, 73, 72, 61, 58, 66, 73, 59, 52, 63, 51, 59, 79, 70, 52, 81, 84, 78, 49, 52, 72, 49, 55, 64, 54, 55, 53, 54, 53, 58, 68, 79, 94, 107, 102, 104, 98, 91, 83, 88, 71, 69, 65, 53, 48, 36, 52, 55, 36, 43, 99, 96, 90, 101, 102, 95, 68, 88, 78, 92, 81, 75, 83, 74],
    wsyears: [1989, 1974, 1973, 1972, 1930, 1929, 1913, 1911, 1910]
  }, {
    city: 'Seattle',
    code: 'SEA',
    league: 'American',
    division: 'West',
    nickname: 'Mariners',
    ballpark: 'Safeco Field',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977],
    wins: [75, 67, 61, 85, 61, 88, 78, 69, 63, 93, 93, 116, 91, 79, 76, 90, 85, 79, 49, 82, 64, 83, 77, 73, 68, 78, 67, 74, 74, 60, 76, 44, 59, 67, 56, 64],
    wsyears: []
  }, {
    city: 'Atlanta',
    code: 'ATL',
    league: 'National',
    division: 'East',
    nickname: 'Braves',
    ballpark: 'Turner Field',
    championships: 3,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883, 1882, 1881, 1880, 1879, 1878, 1877, 1876],
    wins: [94, 89, 91, 86, 72, 84, 79, 90, 96, 101, 101, 88, 95, 103, 106, 101, 96, 90, 68, 104, 98, 94, 65, 63, 54, 69, 72, 66, 80, 88, 89, 50, 81, 66, 69, 61, 70, 67, 88, 76, 70, 82, 76, 93, 81, 77, 85, 86, 88, 84, 86, 83, 88, 86, 92, 95, 92, 85, 89, 92, 64, 76, 83, 75, 91, 86, 81, 67, 65, 68, 59, 62, 65, 63, 77, 79, 71, 38, 78, 83, 77, 64, 70, 56, 50, 60, 66, 70, 53, 54, 53, 79, 62, 57, 53, 72, 89, 83, 94, 69, 52, 44, 53, 45, 63, 58, 49, 51, 55, 58, 73, 69, 66, 95, 102, 93, 74, 71, 83, 86, 102, 87, 76, 83, 70, 61, 56, 46, 73, 63, 45, 38, 40, 54, 41, 42, 39],
    ws: [1995, 1957, 1914]
  }, {
    city: 'Miami',
    code: 'MIA',
    league: 'National',
    division: 'East',
    nickname: 'Marlins',
    ballpark: 'Marlins Park',
    championships: 3,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993],
    wins: [69, 72, 80, 87, 84, 71, 78, 83, 83, 91, 79, 76, 79, 64, 54, 92, 80, 67, 51, 64],
    wsyears: [2003, 1997]
  }, {
    city: 'Philadelphia',
    code: 'PHI',
    league: 'National',
    division: 'East',
    nickname: 'Phillies',
    ballpark: 'Citizens Bank Park',
    championships: 2,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883],
    wins: [81, 102, 97, 93, 92, 89, 85, 88, 86, 86, 80, 86, 65, 77, 75, 68, 67, 69, 54, 97, 70, 78, 77, 67, 65, 80, 86, 75, 81, 90, 89, 59, 91, 84, 90, 101, 101, 86, 80, 71, 59, 67, 73, 63, 76, 82, 87, 85, 92, 87, 81, 47, 59, 64, 69, 77, 71, 77, 75, 83, 87, 73, 91, 81, 66, 62, 69, 46, 61, 64, 42, 43, 50, 45, 45, 61, 54, 64, 56, 60, 78, 66, 52, 71, 43, 51, 58, 68, 55, 50, 57, 51, 62, 47, 55, 87, 91, 90, 74, 88, 73, 79, 78, 74, 83, 83, 71, 83, 52, 49, 56, 83, 75, 94, 78, 55, 62, 78, 71, 72, 87, 68, 78, 63, 69, 75, 71, 56, 39, 17],
    wsyears: [2008, 1980]
  }, {
    city: 'New York',
    code: 'NYM',
    league: 'National',
    division: 'East',
    nickname: 'Mets',
    ballpark: 'Citi Field',
    championships: 2,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962],
    wins: [74, 77, 79, 70, 89, 88, 97, 83, 71, 66, 75, 82, 94, 97, 88, 88, 71, 69, 55, 59, 72, 77, 91, 87, 100, 92, 108, 98, 90, 68, 65, 41, 67, 63, 66, 64, 86, 82, 71, 82, 83, 83, 83, 100, 73, 61, 66, 50, 53, 51, 40],
    wsyears: [1986, 1969]
  }, {
    city: 'Washington',
    code: 'WAS',
    league: 'National',
    division: 'East',
    nickname: 'Nationals',
    ballpark: 'Nationals Park',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969],
    wins: [98, 80, 69, 59, 59, 73, 71, 81, 67, 83, 83, 68, 67, 68, 65, 78, 88, 66, 74, 94, 87, 71, 85, 81, 81, 91, 78, 84, 78, 82, 86, 60, 90, 95, 76, 75, 55, 75, 79, 79, 70, 71, 73, 52],
    wsyears: []
  }, {
    city: 'Cincinnati',
    code: 'CIN',
    league: 'National',
    division: 'Central',
    nickname: 'Reds',
    ballpark: 'Great American Ballpark',
    championships: 5,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883, 1882],
    wins: [97, 79, 91, 78, 74, 72, 80, 73, 76, 69, 78, 66, 85, 96, 77, 76, 81, 85, 66, 73, 90, 74, 91, 75, 87, 84, 86, 89, 70, 74, 61, 66, 89, 90, 92, 88, 102, 108, 98, 99, 95, 79, 102, 89, 83, 87, 76, 89, 92, 86, 98, 93, 67, 74, 76, 80, 91, 75, 74, 68, 69, 68, 66, 62, 64, 73, 67, 61, 89, 87, 76, 88, 100, 97, 82, 56, 74, 68, 52, 58, 60, 58, 59, 66, 78, 75, 87, 80, 83, 91, 86, 70, 82, 96, 68, 78, 60, 71, 60, 64, 75, 70, 75, 77, 73, 66, 64, 79, 88, 74, 70, 52, 62, 83, 92, 76, 77, 66, 55, 65, 82, 56, 77, 76, 80, 81, 65, 63, 68, 61, 55],
    wsyears: [1990, 1976, 1975, 1940, 1919]
  }, {
    city: 'Pittsburgh',
    code: 'PIT',
    league: 'National',
    division: 'Central',
    nickname: 'Pirates',
    ballpark: 'PNC Park',
    championships: 5,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883, 1882],
    wins: [79, 72, 57, 62, 67, 68, 67, 67, 72, 75, 72, 62, 69, 78, 69, 79, 73, 58, 53, 75, 96, 98, 95, 74, 85, 80, 64, 57, 75, 84, 84, 46, 83, 98, 88, 96, 92, 92, 88, 80, 96, 97, 89, 88, 80, 81, 92, 90, 80, 74, 93, 75, 95, 78, 84, 62, 66, 60, 53, 50, 42, 64, 57, 71, 83, 62, 63, 82, 90, 80, 66, 81, 78, 68, 86, 86, 84, 86, 74, 87, 86, 75, 80, 88, 85, 94, 84, 95, 90, 87, 85, 90, 79, 71, 65, 51, 65, 73, 69, 78, 93, 85, 86, 110, 98, 91, 93, 96, 87, 91, 103, 90, 79, 76, 72, 60, 66, 71, 65, 81, 80, 55, 23, 61, 66, 55, 80, 56, 30, 31, 39],
    wsyears: [1979, 1971, 1960, 1925, 1909]
  }, {
    city: 'St. Louis',
    code: 'STL',
    league: 'National',
    division: 'Central',
    nickname: 'Cardinals',
    ballpark: 'Busch Stadium',
    championships: 11,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883, 1882],
    wins: [88, 90, 86, 91, 86, 78, 83, 100, 105, 85, 97, 93, 95, 75, 83, 73, 88, 62, 53, 87, 83, 84, 70, 86, 76, 95, 79, 101, 84, 79, 92, 59, 74, 86, 69, 83, 72, 82, 86, 81, 75, 90, 76, 87, 97, 101, 83, 80, 93, 93, 84, 80, 86, 71, 72, 87, 76, 68, 72, 83, 88, 81, 78, 96, 85, 89, 98, 95, 105, 105, 106, 97, 84, 92, 71, 81, 87, 96, 95, 82, 72, 101, 92, 78, 95, 92, 89, 77, 65, 79, 85, 87, 75, 54, 51, 82, 60, 72, 81, 51, 63, 75, 63, 54, 49, 52, 52, 58, 75, 43, 56, 76, 65, 84, 39, 29, 40, 39, 56, 57, 56, 85, 77, 90, 92, 95, 93, 79, 67, 65, 37],
    wsyears: [2011, 2006, 1982, 1967, 1964, 1946, 1944, 1942, 1934, 1931, 1926, 1886]
  }, {
    city: 'Chicago',
    code: 'CHC',
    league: 'National',
    division: 'Central',
    nickname: 'Cubs',
    ballpark: 'Wrigley Field',
    championships: 2,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883, 1882, 1881, 1880, 1879, 1878, 1877, 1876],
    wins: [61, 71, 75, 83, 97, 85, 66, 79, 89, 88, 67, 88, 65, 67, 90, 68, 76, 73, 49, 84, 78, 77, 77, 93, 77, 76, 70, 77, 96, 71, 73, 38, 64, 80, 79, 81, 75, 75, 66, 77, 85, 83, 84, 92, 84, 87, 59, 72, 76, 82, 59, 64, 60, 74, 72, 62, 60, 72, 64, 65, 77, 62, 64, 61, 64, 69, 82, 98, 75, 74, 68, 70, 75, 84, 89, 93, 87, 100, 86, 86, 90, 84, 90, 98, 91, 85, 82, 68, 81, 83, 80, 64, 75, 75, 84, 74, 67, 73, 78, 88, 91, 92, 104, 104, 99, 107, 116, 92, 93, 82, 68, 53, 65, 75, 85, 59, 71, 72, 57, 56, 70, 82, 83, 67, 77, 71, 90, 87, 62, 59, 55, 56, 67, 46, 30, 26, 52],
    wsyears: [1908, 1907]
  }, {
    city: 'Milwaukee',
    code: 'MIL',
    league: 'National',
    division: 'Central',
    nickname: 'Brewers',
    ballpark: 'Miller Park',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969],
    wins: [83, 96, 77, 80, 90, 83, 75, 81, 67, 68, 56, 68, 73, 74, 74, 78, 80, 65, 53, 69, 92, 83, 74, 81, 87, 91, 77, 71, 67, 87, 95, 62, 86, 95, 93, 67, 66, 68, 76, 74, 65, 69, 65, 64],
    wsyears: []
  }, {
    city: 'San Francisco',
    code: 'SF',
    league: 'National',
    division: 'West',
    nickname: 'Giants',
    ballpark: 'AT&T Park',
    championships: 7,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884, 1883],
    wins: [94, 86, 92, 88, 72, 71, 76, 75, 91, 100, 95, 90, 97, 86, 89, 90, 68, 67, 55, 103, 72, 75, 85, 92, 83, 90, 83, 62, 66, 79, 87, 56, 75, 71, 89, 75, 74, 80, 72, 88, 69, 90, 86, 90, 88, 91, 93, 95, 90, 88, 103, 85, 79, 83, 80, 69, 67, 80, 97, 70, 92, 98, 86, 73, 78, 81, 61, 78, 67, 55, 85, 74, 72, 77, 83, 95, 92, 91, 93, 91, 72, 87, 87, 84, 93, 92, 74, 86, 93, 95, 93, 94, 86, 87, 71, 98, 86, 69, 84, 101, 103, 99, 91, 92, 98, 82, 96, 105, 106, 84, 48, 52, 60, 60, 77, 83, 64, 66, 88, 68, 71, 71, 63, 83, 84, 68, 75, 85, 62, 46],
    wsyears: [2012, 2010, 1954, 1933, 1922, 1921, 1905, 1889, 1888]
  }, {
    city: 'San Diego',
    code: 'SD',
    league: 'National',
    division: 'West',
    nickname: 'Padres',
    ballpark: 'Petco Park',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969],
    wins: [76, 71, 90, 75, 63, 89, 88, 82, 87, 64, 66, 79, 76, 74, 98, 76, 91, 70, 47, 61, 82, 84, 75, 89, 83, 65, 74, 83, 92, 81, 81, 41, 73, 68, 84, 69, 73, 71, 60, 60, 58, 61, 63, 52],
    wsyears: []
  }, {
    city: 'Colorado',
    code: 'COL',
    league: 'National',
    division: 'West',
    nickname: 'Rockies',
    ballpark: 'Coors Field',
    championships: 0,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993],
    wins: [64, 73, 83, 92, 74, 90, 76, 67, 68, 74, 73, 73, 82, 72, 77, 83, 83, 77, 53, 67],
    wsyears: []
  }, {
    city: 'Arizona',
    code: 'ARI',
    league: 'National',
    division: 'West',
    nickname: 'Diamondbacks',
    ballpark: 'Chase Field',
    championships: 1,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998],
    wins: [81, 94, 65, 70, 82, 90, 76, 77, 51, 84, 98, 92, 85, 100, 65],
    wsyears: [2001]
  }, {
    city: 'Los Angeles',
    code: 'LAD',
    league: 'National',
    division: 'West',
    nickname: 'Dodgers',
    ballpark: 'Dodger Stadium',
    championships: 6,
    years: [2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1904, 1903, 1902, 1901, 1900, 1899, 1898, 1897, 1896, 1895, 1894, 1893, 1892, 1891, 1890, 1889, 1888, 1887, 1886, 1885, 1884],
    wins: [86, 82, 80, 95, 84, 82, 88, 71, 93, 85, 92, 86, 86, 77, 83, 88, 90, 78, 58, 81, 63, 93, 86, 77, 94, 73, 73, 95, 79, 91, 88, 63, 92, 79, 95, 98, 92, 88, 102, 95, 85, 89, 87, 85, 76, 73, 95, 97, 80, 99, 102, 89, 82, 88, 71, 84, 93, 98, 92, 105, 96, 97, 89, 97, 84, 94, 96, 87, 63, 81, 104, 100, 88, 84, 69, 62, 67, 70, 71, 65, 81, 79, 86, 70, 77, 65, 71, 68, 92, 76, 76, 77, 93, 69, 57, 70, 94, 80, 75, 65, 58, 64, 64, 55, 53, 65, 66, 48, 56, 70, 75, 79, 82, 101, 54, 61, 58, 71, 70, 65, 95, 61, 86, 93, 88, 60, 76, 53, 40],
    wsyears: [1988, 1981, 1965, 1963, 1959, 1955]
  }
];


})();

(function() {


App.ResizablePanelComponent = Ember.Component.extend({
  layoutName: 'ember_charts/resizable_panel',
  classNames: ['resizable'],
  minHeight: 10,
  minWidth: 10,
  maxHeight: null,
  maxWidth: null,
  didInsertElement: function() {
    return this._setupDocumentHandlers();
  },
  willDestroyElement: function() {
    return this._removeDocumentHandlers();
  },
  _setupDocumentHandlers: function() {
    var _this = this;
    if (this._mouseupHandler || this._mousedownHandler || this._mousemoveHandler) {
      return;
    }
    this._keyUpHandler = function(event) {
      return _this.keyPress(event);
    };
    this._mouseupHandler = function(event) {
      return _this.endResize(event);
    };
    this._mousedownHandler = function(event) {
      return _this.beginResize(event);
    };
    this._mousemoveHandler = function(event) {
      return _this.resize(event);
    };
    jQuery(window).on('keyup', this._keyUpHandler);
    jQuery(window).on('mousemove', this._mousemoveHandler);
    jQuery(window).on('mouseup', this._mouseupHandler);
    return this.$('.resizable-handle').on('mousedown', this._mousedownHandler);
  },
  _removeDocumentHandlers: function() {
    jQuery(window).off('keyup', this._keyUpHandler);
    jQuery(window).off('mousemove', this._mousemoveHandler);
    jQuery(window).off('mouseup', this._mouseupHandler);
    this.$('.resizable-handle').off('mousedown', this._mousedownHandler);
    this._keyUpHandler = null;
    this._mouseupHandler = null;
    this._mousedownHandler = null;
    return this._mousemoveHandler = null;
  },
  beginResize: function(event) {
    if (typeof event.preventDefault === "function") {
      event.preventDefault();
    }
    this.set('resizing', true);
    this.set('resizeStartX', event.screenX);
    this.set('resizeStartY', event.screenY);
    this.set('resizeStartH', this.$().height());
    return this.set('resizeStartW', this.$().width());
  },
  endResize: function(event) {
    return this.set('resizing', false);
  },
  resize: function(event) {
    var dx, dy, height, width;
    if (!this.get('resizing')) {
      return;
    }
    if (typeof event.preventDefault === "function") {
      event.preventDefault();
    }
    dx = event.screenX - this.get('resizeStartX');
    dy = event.screenY - this.get('resizeStartY');
    height = Math.max(this.get('resizeStartH') + dy, this.get('minHeight'));
    width = Math.max(this.get('resizeStartW') + dx, this.get('minWidth'));
    height = Math.min(height, this.get('maxHeight'));
    width = Math.min(width, this.get('maxWidth'));
    return this.$().height(height).width(width).trigger('resize');
  },
  keyPress: function(event) {
    if (event.keyCode !== 27) {
      return;
    }
    return this.set('resizing', false);
  }
});

Ember.Handlebars.helper('resizable-panel', App.ResizablePanelComponent);


})();

(function() {


App.SlideController = Ember.Controller.extend({
  prettyPrintedData: Ember.computed(function() {
    return JSON.stringify(this.get('data'), null, '\t');
  }).property('data'),
  seedColors: {
    purple: 'rgb(100,60,120)',
    yellow: 'rgb(250,165,30)',
    maroon: 'rgb(150,0,35)',
    red: 'rgb(235,35,35)',
    blue: 'rgb(30,120,190)',
    navy: 'rgb(25,75,120)',
    green: 'rgb(60,110,80)',
    gray: 'rgb(65,65,65)'
  },
  seedColorNames: Ember.computed(function() {
    return _.keys(this.get('seedColors'));
  }).property('seedColors'),
  selectedSeedColorName: 'gray',
  selectedSeedColor: Ember.computed(function() {
    return this.get('seedColors')[this.get('selectedSeedColorName')];
  }).property('selectedSeedColorName', 'seedColors.@each')
});

App.ScrubberComponent = Ember.Component.extend({
  tagName: 'input',
  attributeBindings: ['min', 'max', 'step', 'type'],
  type: 'range',
  min: 0,
  max: 10,
  step: 1,
  change: function() {
    var value;
    value = this.$()[0].value;
    return this.set('value', +value);
  }
});


})();

(function() {


App.EmberChartsTimeSeriesController = App.SlideController.extend({
  barPadding: 0,
  barGroupPadding: 0.25,
  stackBars: false,
  yAxisFromZero: false,
  availableLineDataSets: Ember.computed(function() {
    return _.keys(this.get('lineDataHash'));
  }).property('lineDataHash'),
  availableBarDataSets: Ember.computed(function() {
    return _.keys(this.get('barDataHash'));
  }).property('barDataHash'),
  data: Ember.computed.alias('lineData'),
  lineData: Ember.computed(function() {
    return this.get('lineDataHash')[this.get('selectedLineData')];
  }).property('selectedLineData', 'lineDataHash'),
  barData: Ember.computed(function() {
    return this.get('barDataHash')[this.get('selectedBarData')];
  }).property('selectedBarData', 'barDataHash'),
  lineDataHash: Ember.computed(function() {
    return {
      monthly_return_single_series: App.data.monthly_return_single_series,
      monthly_return_double_series: App.data.monthly_return_double_series,
      monthly_return_triple_series: App.data.monthly_return_triple_series,
      monthly_return_single_period: App.data.monthly_return_single_period,
      monthly_return_double_period: App.data.monthly_return_double_period,
      monthly_return_negative_period: App.data.monthly_return_negative_period,
      daily_curr_value: App.data.daily_curr_value,
      daily_diff_value: App.data.daily_diff_value,
      daily_two_series: App.data.daily_two_series,
      daily_three_series: App.data.daily_three_series,
      daily_four_series: App.data.daily_four_series,
      daily_five_series: App.data.daily_five_series,
      daily_six_series: App.data.daily_six_series,
      '----': App.data["null"],
      value_p1d_p1y: App.data.value_p1d_p1y,
      value_p1w_p1y: App.data.value_p1w_p1y,
      value_p1m_p1y: App.data.value_p1m_p1y,
      value_p1m_p2y: App.data.value_p1m_p2y,
      value_p1m_p5y: App.data.value_p1m_p5y,
      zeroes_grouped: App.data.zeroes_grouped,
      zeroes_ungrouped: App.data.zeroes_ungrouped,
      same_value_grouped: App.data.same_value_grouped,
      same_value_ungrouped: App.data.same_value_ungrouped,
      empty: App.data.empty
    };
  }),
  barDataHash: Ember.computed.alias('lineDataHash'),
  selectedLineData: 'daily_two_series',
  selectedBarData: 'monthly_return_triple_series',
  dataIntervals: ['day', 'week', 'month', 'year'],
  timeDelta: 'month',
  tickIntervals: ['weeks', 'months', 'quarters', 'years'],
  selectedInterval: 'months'
});


})();

(function() {


App.EmberChartsHorizontalBarController = App.SlideController.extend({
  maxBarThickness: 60,
  minBarThickness: 20,
  availableDataSets: Ember.computed(function() {
    return _.keys(this.get('rawDataHash'));
  }).property('rawDataHash'),
  data: Ember.computed(function() {
    return this.get('rawDataHash')[this.get('selectedData')];
  }).property('selectedData', 'rawDataHash'),
  rawDataHash: Ember.computed(function() {
    return {
      asset_values: App.data.asset_values,
      many_values: App.data.many_values,
      monthly_return_single_period: App.data.monthly_return_single_period,
      high_net_worth_duration: App.data.high_net_worth_duration,
      '----': App.data["null"],
      empty: App.data.empty,
      one_value: App.data.one_value,
      two_values: App.data.two_values,
      zero: App.data.zero,
      zeroes: App.data.zeroes,
      sum_to_zero: App.data.sum_to_zero,
      bad_range: App.data.bad_range
    };
  }),
  selectedData: 'asset_values',
  sortTypes: ['label', 'value'],
  selectedSortType: 'value'
});


})();

(function() {


App.EmberChartsVerticalBarController = App.SlideController.extend({
  withinGroupPadding: 0,
  maxLabelHeight: 40,
  stackBars: false,
  availableDataSets: Ember.computed(function() {
    return _.keys(this.get('rawDataHash'));
  }).property('rawDataHash'),
  data: Ember.computed(function() {
    return this.get('rawDataHash')[this.get('selectedData')];
  }).property('selectedData', 'rawDataHash'),
  rawDataHash: Ember.computed(function() {
    return {
      two_ranges: App.data.two_ranges,
      three_ranges: App.data.three_ranges,
      five_ranges: App.data.five_ranges,
      sector_compare_return: App.data.sector_compare_return,
      '----': App.data["null"],
      asset_values: App.data.asset_values,
      many_values: App.data.many_values,
      monthly_return_single_period: App.data.monthly_return_single_period,
      high_net_worth_duration: App.data.high_net_worth_duration,
      '----': App.data["null"],
      empty: App.data.empty,
      one_value: App.data.one_value,
      two_values: App.data.two_values,
      zero: App.data.zero,
      zeroes: App.data.zeroes,
      sum_to_zero: App.data.sum_to_zero,
      bad_range: App.data.bad_range
    };
  }),
  selectedData: 'three_ranges'
});


})();

(function() {


App.EmberChartsPieController = App.SlideController.extend({
  labelWidth: 120,
  maxNumberOfSlices: 8,
  minSlicePercent: 2,
  maxRadius: 100,
  availableDataSets: Ember.computed(function() {
    return _.keys(this.get('rawDataHash'));
  }).property('rawDataHash'),
  data: Ember.computed(function() {
    return this.get('rawDataHash')[this.get('selectedData')];
  }).property('selectedData', 'rawDataHash'),
  rawDataHash: Ember.computed(function() {
    return {
      asset_values: App.data.asset_values,
      many_values: App.data.many_values,
      monthly_return_single_period: App.data.monthly_return_single_period,
      high_net_worth_duration: App.data.high_net_worth_duration,
      '----': App.data["null"],
      empty: App.data.empty,
      one_value: App.data.one_value,
      two_values: App.data.two_values,
      zero: App.data.zero,
      zeroes: App.data.zeroes,
      sum_to_zero: App.data.sum_to_zero,
      bad_range: App.data.bad_range
    };
  }),
  selectedData: 'asset_values',
  sortTypes: ['label', 'value'],
  selectedSortType: 'value'
});


})();

(function() {


App.EmberChartsScatterController = App.SlideController.extend({
  availableDataSets: Ember.computed(function() {
    return _.keys(this.get('rawDataHash'));
  }).property('rawDataHash'),
  data: Ember.computed(function() {
    return this.get('rawDataHash')[this.get('selectedData')];
  }).property('selectedData', 'rawDataHash'),
  selectedData: 'groupedPercent',
  rawDataHash: Ember.computed(function() {
    return {
      groupedPercent: App.data.groupedPercent,
      groupedMoney: App.data.groupedMoney,
      ungroupedPercent: App.data.ungroupedPercent,
      ungroupedMoney: App.data.ungroupedMoney,
      '----': App.data["null"],
      empty: App.data.empty,
      groupedZero: App.data.groupedZero,
      groupedZeroes: App.data.groupedZeroes,
      ungroupedZero: App.data.ungroupedZero,
      ungroupedZeroes: App.data.ungroupedZeroes
    };
  }),
  dotRadius: 7
});


})();

(function() {


App.EmberTableAjaxLazyDataSource = Ember.ArrayProxy.extend({
  createGithubEvent: function(row, event) {
    row.set('type', event.type);
    row.set('createdAt', event.created_at);
    row.set('login', event.actor.login);
    row.set('avatar', event.actor.avatar_url);
    return row.set('isLoaded', true);
  },
  requestGithubEvent: function(page) {
    var content, end, start, url, _i, _results,
      _this = this;
    content = this.get('content');
    start = (page - 1) * 30;
    end = start + 30;
    url = "https://api.github.com/repos/emberjs/ember.js/events?page=" + page + "&per_page=30&callback=?";
    Ember.$.getJSON(url, function(json) {
      return json.data.forEach(function(event, index) {
        var row;
        row = content[start + index];
        return _this.createGithubEvent(row, event);
      });
    });
    return (function() {
      _results = [];
      for (var _i = start; start <= end ? _i < end : _i > end; start <= end ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function(index) {
      return content[index] = Ember.Object.create({
        eventId: index,
        isLoaded: false
      });
    });
  },
  objectAt: function(index) {
    var content, row;
    content = this.get('content');
    row = content[index];
    if (row && !row.get('error')) {
      return row;
    }
    this.requestGithubEvent(Math.floor(index / 30 + 1));
    return content[index];
  }
});

App.EmberTableAjaxController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var avatar, columnNames, columns;
    avatar = Ember.Table.ColumnDefinition.create({
      columnWidth: 80,
      headerCellName: 'avatar',
      tableCellViewClass: 'App.EmberTableAjaxImageTableCell',
      contentPath: 'avatar'
    });
    columnNames = ['login', 'type', 'createdAt'];
    columns = columnNames.map(function(key, index) {
      return Ember.Table.ColumnDefinition.create({
        columnWidth: 150,
        headerCellName: key.w(),
        contentPath: key
      });
    });
    columns.unshift(avatar);
    return columns;
  }),
  content: Ember.computed(function() {
    return App.EmberTableAjaxLazyDataSource.create({
      content: new Array(this.get('numRows'))
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableBarsController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var colors, column1, columns;
    colors = ['blue', 'teal', 'green', 'yellow', 'orange'];
    column1 = Ember.Table.ColumnDefinition.create({
      columnWidth: 50,
      headerCellName: 'Name',
      contentPath: 'key'
    });
    columns = [1, 2, 3, 4, 5].map(function(number, index) {
      return Ember.Table.ColumnDefinition.create({
        color: colors[index],
        headerCellName: 'Bar',
        tableCellViewClass: 'App.BarTableCell',
        contentPath: "value" + number
      });
    });
    columns.unshift(column1);
    return columns;
  }),
  content: Ember.computed(function() {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(num, index) {
      return {
        key: index,
        value1: Math.random() * 80 + 10,
        value2: Math.random() * 80 + 10,
        value3: Math.random() * 80 + 10,
        value4: Math.random() * 80 + 10,
        value5: Math.random() * 80 + 10
      };
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableDynamicBarController = Ember.Controller.extend({
  numRows: 100,
  getNextValue: function(current) {
    current = current + (Math.random() * 10 - 5);
    current = Math.min(100, current);
    current = Math.max(0, current);
    return current;
  },
  init: function() {
    var _this = this;
    return setInterval(function() {
      return _this.get('content').forEach(function(item) {
        item.set('value1', _this.getNextValue(item.get('value1')));
        item.set('value2', _this.getNextValue(item.get('value2')));
        item.set('value3', _this.getNextValue(item.get('value3')));
        item.set('value4', _this.getNextValue(item.get('value4')));
        return item.set('value5', _this.getNextValue(item.get('value5')));
      });
    }, 1500);
  },
  columns: Ember.computed(function() {
    var colors, column1, columns;
    colors = ['blue', 'teal', 'green', 'yellow', 'orange'];
    column1 = Ember.Table.ColumnDefinition.create({
      columnWidth: 50,
      headerCellName: 'Name',
      contentPath: 'key'
    });
    columns = colors.map(function(color, index) {
      return Ember.Table.ColumnDefinition.create({
        color: color,
        headerCellName: 'Bar',
        tableCellViewClass: 'App.BarTableCell',
        contentPath: "value" + (index + 1)
      });
    });
    columns.unshift(column1);
    return columns;
  }),
  content: Ember.computed(function() {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(num, index) {
      return Ember.Object.create({
        key: index,
        value1: Math.random() * 80 + 10,
        value2: Math.random() * 80 + 10,
        value3: Math.random() * 80 + 10,
        value4: Math.random() * 80 + 10,
        value5: Math.random() * 80 + 10
      });
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableEditableController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var columnNames, columns, dateColumn, ratingColumn;
    columnNames = ['open', 'close'];
    dateColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Date',
      tableCellViewClass: 'App.TableEditableExample.DatePickerTableCell',
      getCellContent: function(row) {
        return row['date'].toString('yyyy-MM-dd');
      },
      setCellContent: function(row, value) {
        return row['date'] = value;
      }
    });
    ratingColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 150,
      headerCellName: 'Analyst Rating',
      tableCellViewClass: 'App.TableEditableExample.RatingTableCell',
      contentPath: 'rating',
      setCellContent: function(row, value) {
        return row['rating'] = value;
      }
    });
    columns = columnNames.map(function(key, index) {
      var name;
      name = key.charAt(0).toUpperCase() + key.slice(1);
      return Ember.Table.ColumnDefinition.create({
        columnWidth: 100,
        headerCellName: name,
        tableCellViewClass: 'App.TableEditableExample.EditableTableCell',
        getCellContent: function(row) {
          return row[key].toFixed(2);
        },
        setCellContent: function(row, value) {
          return row[key] = +value;
        }
      });
    });
    columns.unshift(ratingColumn);
    columns.unshift(dateColumn);
    return columns;
  }).property(),
  content: Ember.computed(function() {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(num, idx) {
      return {
        index: idx,
        date: Date.now().add({
          days: idx
        }),
        open: Math.random() * 100 - 50,
        close: Math.random() * 100 - 50,
        rating: Math.round(Math.random() * 4)
      };
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableFinancialController = Ember.Controller.extend({
  data: Ember.computed(function() {
    return App.data.treedata;
  })
});

Number.prototype.toCurrency = function() {
  var value;
  if (isNaN(this) || !isFinite(this)) {
    return '-';
  }
  value = Math.abs(this).toFixed(2);
  value = value.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  return (this < 0 ? '-$' : '$') + value;
};

Number.prototype.toPercent = function() {
  if (isNaN(this) || !isFinite(this)) {
    return '-';
  }
  return Math.abs(this * 100).toFixed(2) + '%';
};

App.FinancialTableTreeTableRow = Ember.Table.Row.extend({
  content: null,
  children: null,
  parent: null,
  isRoot: false,
  isLeaf: false,
  isCollapsed: false,
  isShowing: true,
  indentationSpacing: 20,
  groupName: null,
  computeStyles: function(parent) {
    var groupingLevel, indentType, indentation, isShowing, pGroupingLevel, spacing;
    groupingLevel = 0;
    indentation = 0;
    isShowing = true;
    if (parent) {
      isShowing = parent.get('isShowing') && !parent.get('isCollapsed');
      pGroupingLevel = parent.get('groupingLevel');
      groupingLevel = pGroupingLevel;
      if (parent.get('groupName') !== this.get('groupName')) {
        groupingLevel += 1;
      }
      indentType = groupingLevel === pGroupingLevel ? 'half' : 'full';
      spacing = this.get('indentationSpacing');
      if (!parent.get('isRoot')) {
        indentation = parent.get('indentation');
        indentation += (indentType === 'half' ? spacing / 2 : spacing);
      }
    }
    this.set('groupingLevel', groupingLevel);
    this.set('indentation', indentation);
    return this.set('isShowing', isShowing);
  },
  computeRowStyle: function(maxLevels) {
    var level;
    level = this.getFormattingLevel(this.get('groupingLevel'), maxLevels);
    return this.set('rowStyle', "ember-table-row-style-" + level);
  },
  recursiveCollapse: function(isCollapsed) {
    this.set('isCollapsed', isCollapsed);
    return this.get('children').forEach(function(child) {
      return child.recursiveCollapse(isCollapsed);
    });
  },
  getFormattingLevel: function(level, maxLevels) {
    switch (maxLevels) {
      case 1:
        return 5;
      case 2:
        if (level === 1) {
          return 2;
        }
        return 5;
      case 3:
        if (level === 1) {
          return 1;
        }
        if (level === 2) {
          return 3;
        }
        return 5;
      case 4:
        if (level === 1) {
          return 1;
        }
        if (level === 2) {
          return 2;
        }
        if (level === 4) {
          return 4;
        }
        return 5;
      case 5:
        return level;
      default:
        if (level === maxLevels) {
          return 5;
        }
        return Math.min(level, 4);
    }
  }
});

App.FinancialTableComponent = Ember.Table.EmberTableComponent.extend({
  numFixedColumns: 1,
  isCollapsed: false,
  isHeaderHeightResizable: true,
  rowHeight: 30,
  hasHeader: true,
  hasFooter: true,
  headerHeight: 70,
  sortAscending: false,
  sortColumn: null,
  selection: null,
  actions: {
    toggleTableCollapse: function(event) {
      var children, isCollapsed;
      this.toggleProperty('isCollapsed');
      isCollapsed = this.get('isCollapsed');
      children = this.get('root.children');
      if (!(children && children.get('length') > 0)) {
        return;
      }
      children.forEach(function(child) {
        return child.recursiveCollapse(isCollapsed);
      });
      return this.notifyPropertyChange('rows');
    },
    toggleCollapse: function(row) {
      row.toggleProperty('isCollapsed');
      return Ember.run.next(this, function() {
        return this.notifyPropertyChange('rows');
      });
    }
  },
  data: null,
  columns: Ember.computed(function() {
    var columns, data, names;
    data = this.get('data');
    if (!data) {
      return;
    }
    names = this.get('data.value_factors').getEach('display_name');
    columns = names.map(function(name, index) {
      return Ember.Table.ColumnDefinition.create({
        index: index,
        headerCellName: name,
        headerCellViewClass: 'App.FinancialTableHeaderCell',
        tableCellViewClass: 'App.FinancialTableCell',
        getCellContent: function(row) {
          var object;
          object = row.values[this.get('index')];
          if (object.type === 'money') {
            return object.value.toCurrency();
          }
          if (object.type === 'percent') {
            return object.value.toPercent();
          }
          return "-";
        }
      });
    });
    columns.unshiftObject(this.get('groupingColumn'));
    return columns;
  }).property('data.valueFactors.@each', 'groupingColumn'),
  groupingColumn: Ember.computed(function() {
    var groupingFactors, name;
    groupingFactors = this.get('data.grouping_factors');
    name = groupingFactors.getEach('display_name').join(' ▸ ');
    return Ember.Table.ColumnDefinition.create({
      headerCellName: name,
      columnWidth: 400,
      isTreeColumn: true,
      isSortable: false,
      textAlign: 'text-align-left',
      headerCellViewClass: 'App.FinancialTableHeaderTreeCell',
      tableCellViewClass: 'App.FinancialTableTreeCell',
      contentPath: 'group_value'
    });
  }).property('data.grouping_factors.@each'),
  root: Ember.computed(function() {
    var data;
    data = this.get('data');
    if (!data) {
      return;
    }
    return this.createTree(null, data.root);
  }).property('data', 'sortAscending', 'sortColumn'),
  rows: Ember.computed(function() {
    var maxGroupingLevel, root, rows;
    root = this.get('root');
    if (!root) {
      return Ember.A();
    }
    rows = this.flattenTree(null, root, Ember.A());
    this.computeStyles(null, root);
    maxGroupingLevel = Math.max.apply(rows.getEach('groupingLevel'));
    rows.forEach(function(row) {
      return row.computeRowStyle(maxGroupingLevel);
    });
    return rows;
  }).property('root'),
  bodyContent: Ember.computed(function() {
    var rows;
    rows = this.get('rows');
    if (!rows) {
      return Ember.A();
    }
    rows = rows.slice(1, rows.get('length'));
    return rows.filterProperty('isShowing');
  }).property('rows'),
  footerContent: Ember.computed(function() {
    var rows;
    rows = this.get('rows');
    if (!rows) {
      return Ember.A();
    }
    return rows.slice(0, 1);
  }).property('rows'),
  orderBy: function(item1, item2) {
    var result, sortAscending, sortColumn, value1, value2;
    sortColumn = this.get('sortColumn');
    sortAscending = this.get('sortAscending');
    if (!sortColumn) {
      return 1;
    }
    value1 = sortColumn.getCellContent(item1.get('content'));
    value2 = sortColumn.getCellContent(item2.get('content'));
    result = Ember.compare(value1, value2);
    if (sortAscending) {
      return result;
    } else {
      return -result;
    }
  },
  createTree: function(parent, node) {
    var children, row,
      _this = this;
    row = App.FinancialTableTreeTableRow.create();
    children = (node.children || []).map(function(child) {
      return _this.createTree(row, child);
    });
    row.setProperties({
      isRoot: !parent,
      isLeaf: Ember.isEmpty(children),
      content: node,
      parent: parent,
      children: children,
      groupName: node.group_name,
      isCollapsed: false
    });
    return row;
  },
  flattenTree: function(parent, node, rows) {
    var _this = this;
    rows.pushObject(node);
    (node.children || []).forEach(function(child) {
      return _this.flattenTree(node, child, rows);
    });
    return rows;
  },
  computeStyles: function(parent, node) {
    var _this = this;
    node.computeStyles(parent);
    return node.get('children').forEach(function(child) {
      return _this.computeStyles(node, child);
    });
  }
});


})();

(function() {


App.FluidColumnDefinition = Ember.Table.ColumnDefinition.extend({
  isResizable: Ember.computed(function() {
    if (this.get('_nextColumn')) {
      return true;
    } else {
      return false;
    }
  }).property('_nextColumn'),
  resize: function(pxWidth, tableWidth) {
    var diff, newMaxWidth, newWidth, nextCol, oldWidth, percent;
    newMaxWidth = null;
    tableWidth = tableWidth || this.get("controller._tableContainerWidth");
    if (!tableWidth) {
      return;
    }
    percent = function(val) {
      if ("string" === typeof val) {
        return +(val.replace("%", ""));
      } else {
        return val * 100 / tableWidth;
      }
    };
    oldWidth = percent(this.get("columnWidth"));
    newWidth = 'number' === typeof pxWidth ? percent(pxWidth) : oldWidth;
    nextCol = this.get("_nextColumn");
    if (nextCol) {
      diff = oldWidth - newWidth + percent(nextCol.get("columnWidth"));
      nextCol.set("columnWidth", diff / 100 * tableWidth);
      newMaxWidth = (newWidth + diff) / 100 * tableWidth - 100;
    }
    this.set("columnWidth", newWidth / 100 * tableWidth);
    this.notifyPropertyChange("columnWidth");
    return newMaxWidth;
  },
  _convertColumnToWidth: Ember.beforeObserver(function() {
    var tableWidth;
    tableWidth = this.get("controller._tableContainerWidth");
    if (tableWidth) {
      return this.set("columnWidth", this.get("columnWidth") / tableWidth * 100 + "%");
    }
  }, "controller._tableContainerWidth"),
  _resizeToTable: Ember.observer(function() {
    return this.resize();
  }, "controller._tableContainerWidth")
});

App.FluidTable = Ember.Table.EmberTableComponent.extend({
  _tableColumnsWidth: "100%",
  prepareTableColumns: function(columns) {
    var col, i, _i, _len, _results;
    this._super(columns);
    _results = [];
    for (i = _i = 0, _len = columns.length; _i < _len; i = ++_i) {
      col = columns[i];
      _results.push(col.set("_nextColumn", columns.objectAt(i + 1)));
    }
    return _results;
  }
});

App.EmberTableFluidController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var closeColumn, dateColumn, highColumn, lowColumn, openColumn;
    dateColumn = App.FluidColumnDefinition.create({
      columnWidth: "40",
      headerCellName: 'Date',
      getCellContent: function(row) {
        return row['date'].toDateString();
      }
    });
    openColumn = App.FluidColumnDefinition.create({
      columnWidth: "15",
      headerCellName: 'Open',
      getCellContent: function(row) {
        return row['open'].toFixed(2);
      }
    });
    highColumn = App.FluidColumnDefinition.create({
      columnWidth: "15",
      headerCellName: 'High',
      getCellContent: function(row) {
        return row['high'].toFixed(2);
      }
    });
    lowColumn = App.FluidColumnDefinition.create({
      columnWidth: "15",
      headerCellName: 'Low',
      getCellContent: function(row) {
        return row['low'].toFixed(2);
      }
    });
    closeColumn = App.FluidColumnDefinition.create({
      columnWidth: "15",
      headerCellName: 'Close',
      getCellContent: function(row) {
        return row['close'].toFixed(2);
      }
    });
    return [dateColumn, openColumn, highColumn, lowColumn, closeColumn];
  }),
  content: Ember.computed(function() {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(index) {
      var date;
      date = new Date();
      date.setDate(date.getDate() + index);
      return {
        date: date,
        open: Math.random() * 100 - 50,
        high: Math.random() * 100 - 50,
        low: Math.random() * 100 - 50,
        close: Math.random() * 100 - 50,
        volume: Math.random() * 1000000
      };
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableHorizonController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var horizon, name;
    name = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Name',
      getCellContent: function(row) {
        return 'Horizon ' + row['name'];
      }
    });
    horizon = Ember.Table.ColumnDefinition.create({
      columnWidth: 600,
      headerCellName: 'Horizon',
      tableCellViewClass: 'App.TableHorizonExample.HorizonTableCellView',
      getCellContent: Ember.K
    });
    return [name, horizon];
  }),
  content: Ember.computed(function() {
    var normal, _i, _ref, _results;
    normal = d3.random.normal(1.5, 3);
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(num, index) {
      var data, _i, _results;
      data = (function() {
        _results = [];
        for (_i = 0; _i < 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        return [i, normal()];
      });
      return {
        name: index,
        data: data
      };
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableOverviewController = Ember.Controller.extend({
  data: Ember.computed(function() {
    return App.data.treedata;
  })
});


})();

(function() {


App.EmberTableSimpleController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var closeColumn, dateColumn, highColumn, lowColumn, openColumn;
    dateColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 150,
      textAlign: 'text-align-left',
      headerCellName: 'Date',
      getCellContent: function(row) {
        return row['date'].toDateString();
      }
    });
    openColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Open',
      getCellContent: function(row) {
        return row['open'].toFixed(2);
      }
    });
    highColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'High',
      getCellContent: function(row) {
        return row['high'].toFixed(2);
      }
    });
    lowColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Low',
      getCellContent: function(row) {
        return row['low'].toFixed(2);
      }
    });
    closeColumn = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Close',
      getCellContent: function(row) {
        return row['close'].toFixed(2);
      }
    });
    return [dateColumn, openColumn, highColumn, lowColumn, closeColumn];
  }),
  content: Ember.computed(function() {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(index) {
      var date;
      date = new Date();
      date.setDate(date.getDate() + index);
      return {
        date: date,
        open: Math.random() * 100 - 50,
        high: Math.random() * 100 - 50,
        low: Math.random() * 100 - 50,
        close: Math.random() * 100 - 50,
        volume: Math.random() * 1000000
      };
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableSparklineController = Ember.Controller.extend({
  numRows: 100,
  columns: Ember.computed(function() {
    var close, high, low, name, open, spark;
    name = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Name',
      getCellContent: function(row) {
        return 'Asset ' + row['name'];
      }
    });
    open = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Open',
      getCellContent: function(row) {
        return row['open'].toFixed(2);
      }
    });
    spark = Ember.Table.ColumnDefinition.create({
      columnWidth: 200,
      headerCellName: 'Sparkline',
      tableCellViewClass: 'App.SparklineTableExample.SparkCellView',
      getCellContent: Ember.K
    });
    close = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Close',
      getCellContent: function(row) {
        return row['close'].toFixed(2);
      }
    });
    low = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'Low',
      getCellContent: function(row) {
        return row['low'].toFixed(2);
      }
    });
    high = Ember.Table.ColumnDefinition.create({
      columnWidth: 100,
      headerCellName: 'High',
      getCellContent: function(row) {
        return row['high'].toFixed(2);
      }
    });
    return [name, open, spark, close, low, high];
  }),
  content: Ember.computed(function() {
    var randomWalk, _i, _ref, _results;
    randomWalk = function(numSteps) {
      var lastValue, _i, _results;
      lastValue = 0;
      return (function() {
        _results = [];
        for (var _i = 0; 0 <= numSteps ? _i < numSteps : _i > numSteps; 0 <= numSteps ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function() {
        return lastValue = lastValue + d3.random.normal()();
      });
    };
    return (function() {
      _results = [];
      for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(num, index) {
      var data;
      data = randomWalk(100);
      return {
        name: index,
        timeseries: data,
        open: data[0],
        close: data[99],
        low: Math.min.apply(null, data),
        high: Math.max.apply(null, data)
      };
    });
  }).property('numRows')
});


})();

(function() {


App.EmberTableFinancialController = Ember.Controller.extend({
  data: Ember.computed(function() {
    return App.data.treedata;
  })
});

Number.prototype.toCurrency = function() {
  var value;
  if (isNaN(this) || !isFinite(this)) {
    return '-';
  }
  value = Math.abs(this).toFixed(2);
  value = value.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  return (this < 0 ? '-$' : '$') + value;
};

Number.prototype.toPercent = function() {
  if (isNaN(this) || !isFinite(this)) {
    return '-';
  }
  return Math.abs(this * 100).toFixed(2) + '%';
};

App.TreeTableExample = Ember.Namespace.create();

App.TreeTableExample.TreeDataAdapter = Ember.Mixin.create({
  data: null,
  columns: Ember.computed(function() {
    var columns, data, names;
    data = this.get('data');
    if (!data) {
      return;
    }
    names = this.get('data.value_factors').getEach('display_name');
    columns = names.map(function(name, index) {
      return Ember.Table.ColumnDefinition.create({
        index: index,
        headerCellName: name,
        getCellContent: function(row) {
          var object;
          object = row.values[this.get('index')];
          if (object.type === 'money') {
            return object.value.toCurrency();
          }
          if (object.type === 'percent') {
            return object.value.toPercent();
          }
          return "-";
        }
      });
    });
    columns.unshiftObject(this.get('groupingColumn'));
    return columns;
  }).property('data.valueFactors.@each', 'groupingColumn'),
  groupingColumn: Ember.computed(function() {
    var groupingFactors, name;
    groupingFactors = this.get('data.grouping_factors');
    name = groupingFactors.getEach('display_name').join(' ▸ ');
    return Ember.Table.ColumnDefinition.create({
      headerCellName: name,
      columnWidth: 400,
      isTreeColumn: true,
      isSortable: false,
      textAlign: 'text-align-left',
      headerCellViewClass: 'App.TreeTableExample.HeaderTreeCell',
      tableCellViewClass: 'App.TreeTableExample.TreeCell',
      contentPath: 'group_value'
    });
  }).property('data.grouping_factors.@each'),
  root: Ember.computed(function() {
    var data;
    data = this.get('data');
    if (!data) {
      return;
    }
    return this.createTree(null, data.root);
  }).property('data', 'sortAscending', 'sortColumn'),
  rows: Ember.computed(function() {
    var maxGroupingLevel, root, rows;
    root = this.get('root');
    if (!root) {
      return Ember.A();
    }
    rows = this.flattenTree(null, root, Ember.A());
    this.computeStyles(null, root);
    maxGroupingLevel = Math.max.apply(rows.getEach('groupingLevel'));
    rows.forEach(function(row) {
      return row.computeRowStyle(maxGroupingLevel);
    });
    return rows;
  }).property('root'),
  bodyContent: Ember.computed(function() {
    var rows;
    rows = this.get('rows');
    if (!rows) {
      return Ember.A();
    }
    rows = rows.slice(1, rows.get('length'));
    return rows.filterProperty('isShowing');
  }).property('rows'),
  footerContent: Ember.computed(function() {
    var rows;
    rows = this.get('rows');
    if (!rows) {
      return Ember.A();
    }
    return rows.slice(0, 1);
  }).property('rows'),
  orderBy: function(item1, item2) {
    var result, sortAscending, sortColumn, value1, value2;
    sortColumn = this.get('sortColumn');
    sortAscending = this.get('sortAscending');
    if (!sortColumn) {
      return 1;
    }
    value1 = sortColumn.getCellContent(item1.get('content'));
    value2 = sortColumn.getCellContent(item2.get('content'));
    result = Ember.compare(value1, value2);
    if (sortAscending) {
      return result;
    } else {
      return -result;
    }
  },
  createTree: function(parent, node) {
    var children, row,
      _this = this;
    row = App.TreeTableExample.TreeTableRow.create();
    children = (node.children || []).map(function(child) {
      return _this.createTree(row, child);
    });
    row.setProperties({
      isRoot: !parent,
      isLeaf: Ember.isEmpty(children),
      content: node,
      parent: parent,
      children: children,
      groupName: node.group_name,
      isCollapsed: false
    });
    return row;
  },
  flattenTree: function(parent, node, rows) {
    var _this = this;
    rows.pushObject(node);
    (node.children || []).forEach(function(child) {
      return _this.flattenTree(node, child, rows);
    });
    return rows;
  },
  computeStyles: function(parent, node) {
    var _this = this;
    node.computeStyles(parent);
    return node.get('children').forEach(function(child) {
      return _this.computeStyles(node, child);
    });
  }
});

App.TreeTableExample.TableComponent = Ember.Table.EmberTableComponent.extend(App.TreeTableExample.TreeDataAdapter, {
  numFixedColumns: 1,
  isCollapsed: false,
  isHeaderHeightResizable: true,
  rowHeight: 30,
  hasHeader: true,
  hasFooter: true,
  headerHeight: 70,
  sortAscending: false,
  sortColumn: null,
  selection: null,
  toggleTableCollapse: function(event) {
    var children, isCollapsed;
    this.toggleProperty('isCollapsed');
    isCollapsed = this.get('isCollapsed');
    children = this.get('root.children');
    if (!(children && children.get('length') > 0)) {
      return;
    }
    children.forEach(function(child) {
      return child.recursiveCollapse(isCollapsed);
    });
    return this.notifyPropertyChange('rows');
  },
  toggleCollapse: function(row) {
    row.toggleProperty('isCollapsed');
    return Ember.run.next(this, function() {
      return this.notifyPropertyChange('rows');
    });
  },
  sortByColumn: function(column) {
    column.toggleProperty('sortAscending');
    this.set('sortColumn', column);
    return this.set('sortAscending', column.get('sortAscending'));
  },
  onSelectionsDidChange: Ember.observer(function() {
    return console.log('selectionsDidChange');
  }, 'selection.@each')
});


})();

(function() {


App.EmberWidgetsOverviewController = Ember.Controller.extend({
  countries: Ember.computed(function() {
    return window.countries;
  }),
  mlb: Ember.computed(function() {
    return window.mlb;
  }),
  actions: {
    showPopover: function(placement) {
      return Ember.Widgets.PopoverComponent.popup({
        targetObject: this,
        placement: placement,
        targetElement: event.target,
        title: 'Popover Title'
      });
    },
    showModal: function() {
      return Ember.Widgets.ModalComponent.popup({
        targetObject: this,
        confirm: "modalConfirm",
        cancel: "modalCancel"
      });
    },
    modalConfirm: function() {
      return console.log("Modal Confirm!");
    },
    modalCancel: function() {
      return console.log("Modal Cancel!");
    }
  }
});


})();

(function() {


App.ApplicationView = Ember.View.extend({
  classNames: 'application-container',
  templateName: 'application'
});

App.CodePrettyPrintMixin = Ember.Mixin.create({
  didInsertElement: function() {
    this._super();
    return Ember.run.next(this, function() {
      return prettyPrint();
    });
  }
});

App.LargeHeroAffixMixin = Ember.Mixin.create({
  didInsertElement: function() {
    this._super();
    $('.sub-navigation-sidebar').affix({
      offset: {
        top: 500,
        bottom: 500
      }
    });
    return $('.sub-navigation-sidebar').data('bs.affix').options.offset.top = 500;
  }
});

App.SmallHeroAffixMixin = Ember.Mixin.create({
  didInsertElement: function() {
    this._super();
    $('.sub-navigation-sidebar').affix({
      offset: {
        top: 150,
        bottom: 500
      }
    });
    return $('.sub-navigation-sidebar').data('bs.affix').options.offset.top = 150;
  }
});

App.EmberTableOverviewView = Ember.View.extend(App.LargeHeroAffixMixin);

App.EmberTableDocumentationView = Ember.View.extend(App.SmallHeroAffixMixin);

App.EmberTableSimpleView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberTableFinancialView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberTableEditableView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberTableChartsView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberTableAjaxView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.CustomPopoverContentView = Ember.View.extend({
  templateName: 'ember_widgets/custom_popover_content'
});

App.CustomModalContentView = Ember.View.extend({
  templateName: 'ember_widgets/custom_modal_content'
});


})();

(function() {


App.EmberTableAjaxImageTableCell = Ember.Table.TableCell.extend({
  templateName: 'ember_table/ajax_table/ajax_cell',
  classNames: 'img-table-cell'
});


})();

(function() {


App.BarTableCell = Ember.Table.TableCell.extend({
  templateName: 'ember_table/bar_table/bar',
  classNameBindings: ['column.color'],
  barWidth: Ember.computed(function() {
    var column, row, _ref;
    _ref = this.getProperties('column', 'row'), column = _ref.column, row = _ref.row;
    if (!(column && row)) {
      return 0;
    }
    return Math.round(+this.get('cellContent'));
  }).property('column', 'row', 'cellContent'),
  histogramStyle: Ember.computed(function() {
    return "width: " + (this.get('barWidth')) + "%;";
  }).property('barWidth')
});


})();

(function() {


App.EmberTableChartTableCell = Ember.Table.TableCell.extend({
  template: Ember.Handlebars.compile(''),
  heightBinding: 'controller.rowHeight',
  onContentOrSizeDidChange: Ember.observer(function() {
    this.$('svg').remove();
    return this.renderD3View();
  }, 'row', 'width'),
  didInsertElement: function() {
    return this.renderD3View();
  },
  renderD3View: function() {
    var data, fill, g, h, len, line, max, min, p, svg, w, xscale, yscale;
    data = this.get('row.timeseries');
    if (!data) {
      return;
    }
    h = this.get('height');
    w = this.get('width');
    p = 2;
    min = Math.min.apply(null, data);
    max = Math.max.apply(null, data);
    len = data.length;
    fill = d3.scale.category10();
    xscale = d3.scale.linear().domain([0, len]).range([p, w - p]);
    yscale = d3.scale.linear().domain([min, max]).range([h - p, p]);
    line = d3.svg.line().x(function(d, i) {
      return xscale(i);
    }).y(function(d) {
      return yscale(d);
    });
    svg = d3.select("#" + (this.get('elementId'))).append('svg:svg').attr('height', h).attr('width', w);
    g = svg.append('svg:g');
    return g.append('svg:path').attr('d', line(data)).attr('stroke', function(d) {
      return fill(Math.round(Math.random()) * 10);
    }).attr('fill', 'none');
  }
});


})();

(function() {


App.TableEditableExample = Ember.Namespace.create();

App.TableEditableExample.EditableTableCell = Ember.Table.TableCell.extend({
  className: 'editable-table-cell',
  templateName: 'ember_table/editable_table/editable_table_cell',
  isEditing: false,
  type: 'text',
  innerTextField: Ember.TextField.extend({
    typeBinding: 'parentView.type',
    valueBinding: 'parentView.cellContent',
    didInsertElement: function() {
      return this.$().focus();
    },
    blur: function(event) {
      return this.set('parentView.isEditing', false);
    }
  }),
  onRowContentDidChange: Ember.observer(function() {
    return this.set('isEditing', false);
  }, 'rowContent'),
  click: function(event) {
    this.set('isEditing', true);
    return event.stopPropagation();
  }
});

App.TableEditableExample.DatePickerTableCell = App.TableEditableExample.EditableTableCell.extend({
  type: 'date'
});

App.TableEditableExample.RatingTableCell = Ember.Table.TableCell.extend({
  classNames: 'rating-table-cell',
  templateName: 'ember_table/editable_table/rating_table_cell',
  didInsertElement: function() {
    this._super();
    return this.onRowContentDidChange();
  },
  applyRating: function(rating) {
    var span;
    this.$('.rating span').removeClass('active');
    span = this.$('.rating span').get(rating);
    return $(span).addClass('active');
  },
  click: function(event) {
    var rating;
    rating = this.$('.rating span').index(event.target);
    if (rating === -1) {
      return;
    }
    this.get('column').setCellContent(this.get('rowContent'), rating);
    return this.applyRating(rating);
  },
  onRowContentDidChange: Ember.observer(function() {
    return this.applyRating(this.get('cellContent'));
  }, 'cellContent')
});


})();

(function() {


App.FinancialTableCell = Ember.Table.TableCell.extend({
  templateName: 'ember_table/financial_table/financial_table_cell'
});

App.FinancialTableHeaderCell = Ember.Table.HeaderCell.extend({
  templateName: 'ember_table/financial_table/financial_table_header_cell'
});

App.FinancialTableTreeCell = Ember.Table.TableCell.extend({
  templateName: 'ember_table/financial_table/financial_table_tree_cell',
  classNames: 'ember-table-table-tree-cell',
  paddingStyle: Ember.computed(function() {
    return "padding-left:" + (this.get('row.indentation')) + "px;";
  }).property('row.indentation')
});

App.FinancialTableHeaderTreeCell = Ember.Table.HeaderCell.extend({
  templateName: 'ember_table/financial_table/financial_table_header_tree_cell',
  classNames: 'ember-table-table-header-tree-cell'
});


})();

(function() {


App.TableHorizonExample = Ember.Namespace.create();

App.TableHorizonExample.HorizonTableCellView = Ember.Table.TableCell.extend({
  template: Ember.Handlebars.compile(""),
  heightBinding: 'controller.rowHeight',
  horizonContent: Ember.computed(function() {
    var normal, _i, _results;
    normal = d3.random.normal(1.5, 3);
    return (function() {
      _results = [];
      for (_i = 0; _i < 100; _i++){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      return [i, normal()];
    });
  }).property(),
  onWidthDidChange: Ember.observer(function() {
    this.$('svg').remove();
    return this.renderD3View();
  }, 'width'),
  didInsertElement: function() {
    return this.onWidthDidChange();
  },
  renderD3View: function() {
    var chart, data, height, svg, width;
    width = this.get('width');
    height = this.get('height');
    data = this.get('horizonContent');
    chart = d3.horizon().width(width).height(height).bands(2).mode("mirror").interpolate("basis");
    svg = d3.select('#' + this.get('elementId')).append("svg").attr("width", width).attr("height", height);
    return svg.data([data]).call(chart);
  }
});


})();

(function() {

var randomWalk;

App.SparklineTableExample = Ember.Namespace.create();

randomWalk = function(numSteps) {
  var lastValue, _i, _results;
  lastValue = 0;
  return (function() {
    _results = [];
    for (var _i = 0; 0 <= numSteps ? _i < numSteps : _i > numSteps; 0 <= numSteps ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).map(function() {
    return lastValue = lastValue + d3.random.normal()();
  });
};

App.SparklineTableExample.SparkCellView = Ember.Table.TableCell.extend({
  template: Ember.Handlebars.compile(""),
  heightBinding: 'controller.rowHeight',
  sparkContent: Ember.computed(function() {
    return randomWalk(100);
  }).property(),
  onWidthDidChange: Ember.observer(function() {
    this.$('svg').remove();
    return this.renderD3View();
  }, 'width'),
  didInsertElement: function() {
    return this.renderD3View();
  },
  renderD3View: function() {
    var data, fill, g, h, len, line, max, min, p, svg, w, xscale, yscale;
    data = this.get('sparkContent');
    h = this.get('height');
    w = this.get('width');
    p = 2;
    min = Math.min.apply(null, data);
    max = Math.max.apply(null, data);
    len = data.length;
    fill = d3.scale.category10();
    xscale = d3.scale.linear().domain([0, len]).range([p, w - p]);
    yscale = d3.scale.linear().domain([min, max]).range([h - p, p]);
    line = d3.svg.line().x(function(d, i) {
      return xscale(i);
    }).y(function(d) {
      return yscale(d);
    });
    svg = d3.select("#" + (this.get('elementId'))).append('svg:svg').attr('height', h).attr('width', w);
    g = svg.append('svg:g');
    return g.append('svg:path').attr('d', line(data)).attr('stroke', function(d) {
      return fill(Math.round(Math.random()) * 10);
    }).attr('fill', 'none');
  }
});


})();

(function() {


App.TreeTableExample.TreeTableRow = Ember.Table.Row.extend({
  content: null,
  children: null,
  parent: null,
  isRoot: false,
  isLeaf: false,
  isCollapsed: false,
  isShowing: true,
  indentationSpacing: 20,
  groupName: null,
  computeStyles: function(parent) {
    var groupingLevel, indentType, indentation, isShowing, pGroupingLevel, spacing;
    groupingLevel = 0;
    indentation = 0;
    isShowing = true;
    if (parent) {
      isShowing = parent.get('isShowing') && !parent.get('isCollapsed');
      pGroupingLevel = parent.get('groupingLevel');
      groupingLevel = pGroupingLevel;
      if (parent.get('groupName') !== this.get('groupName')) {
        groupingLevel += 1;
      }
      indentType = groupingLevel === pGroupingLevel ? 'half' : 'full';
      spacing = this.get('indentationSpacing');
      if (!parent.get('isRoot')) {
        indentation = parent.get('indentation');
        indentation += (indentType === 'half' ? spacing / 2 : spacing);
      }
    }
    this.set('groupingLevel', groupingLevel);
    this.set('indentation', indentation);
    return this.set('isShowing', isShowing);
  },
  computeRowStyle: function(maxLevels) {
    var level;
    level = this.getFormattingLevel(this.get('groupingLevel'), maxLevels);
    return this.set('rowStyle', "ember-table-row-style-" + level);
  },
  recursiveCollapse: function(isCollapsed) {
    this.set('isCollapsed', isCollapsed);
    return this.get('children').forEach(function(child) {
      return child.recursiveCollapse(isCollapsed);
    });
  },
  getFormattingLevel: function(level, maxLevels) {
    switch (maxLevels) {
      case 1:
        return 5;
      case 2:
        if (level === 1) {
          return 2;
        }
        return 5;
      case 3:
        if (level === 1) {
          return 1;
        }
        if (level === 2) {
          return 3;
        }
        return 5;
      case 4:
        if (level === 1) {
          return 1;
        }
        if (level === 2) {
          return 2;
        }
        if (level === 4) {
          return 4;
        }
        return 5;
      case 5:
        return level;
      default:
        if (level === maxLevels) {
          return 5;
        }
        return Math.min(level, 4);
    }
  }
});

App.TreeTableExample.TreeCell = Ember.Table.TableCell.extend({
  templateName: 'ember_table/tree_table/table_tree_cell',
  classNames: 'ember-table-table-tree-cell',
  styleBindings: ['indentation:padding-left'],
  indentation: Ember.computed.alias('row.indentation')
});

App.TreeTableExample.HeaderTreeCell = Ember.Table.HeaderCell.extend({
  templateName: 'ember_table/tree_table/table_header_tree_cell',
  classNames: 'ember-table-table-header-tree-cell'
});


})();

(function() {


App.EmberWidgetsOverviewView = Ember.View.extend(App.LargeHeroAffixMixin);

App.EmberWidgetsDocumentationView = Ember.View.extend(App.SmallHeroAffixMixin);

App.EmberWidgetsAccordionView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberWidgetsCarouselView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberWidgetsModalView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberWidgetsPopoverView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);

App.EmberWidgetsSelectView = Ember.View.extend(App.CodePrettyPrintMixin, App.SmallHeroAffixMixin);


})();

(function() {


App.Router.map(function() {
  this.route('license');
  this.resource('emberTable', {
    path: '/ember-table'
  }, function() {
    this.route('ajax');
    this.route('bars');
    this.route('documentation');
    this.route('dynamic-bars');
    this.route('editable');
    this.route('financial');
    this.route('fluid');
    this.route('horizon');
    this.route('overview');
    this.route('simple');
    return this.route('sparkline');
  });
  this.resource('emberWidgets', {
    path: '/ember-widgets'
  }, function() {
    this.route('overview');
    this.route('documentation');
    this.route('accordion');
    this.route('carousel');
    this.route('modal');
    this.route('popover');
    return this.route('select');
  });
  return this.resource('emberCharts', {
    path: '/ember-charts'
  }, function() {
    this.route('overview');
    this.route('documentation');
    this.route('time_series');
    this.route('horizontal_bar');
    this.route('vertical_bar');
    this.route('pie');
    this.route('scatter');
    return this.route('bubble');
  });
});

App.IndexRoute = Ember.Route.extend({
  activate: function() {
    return $(document).attr('title', 'Addepar | Open Source');
  }
});

App.EmberTableIndexRoute = Ember.Route.extend({
  redirect: function() {
    return this.transitionTo('emberTable.overview');
  }
});

App.EmberTableOverviewRoute = Ember.Route.extend({
  activate: function() {
    var controller;
    controller = this.controllerFor('emberTable');
    controller.set('showLargeHero', true);
    return $(document).attr('title', 'Addepar | Ember Table');
  },
  deactivate: function() {
    var controller;
    controller = this.controllerFor('emberTable');
    return controller.set('showLargeHero', false);
  }
});

App.EmberWidgetsIndexRoute = Ember.Route.extend({
  redirect: function() {
    return this.transitionTo('emberWidgets.overview');
  }
});

App.EmberWidgetsOverviewRoute = Ember.Route.extend({
  activate: function() {
    var controller;
    controller = this.controllerFor('emberWidgets');
    controller.set('showLargeHero', true);
    return $(document).attr('title', 'Addepar | Ember Widgets');
  },
  deactivate: function() {
    var controller;
    controller = this.controllerFor('emberWidgets');
    return controller.set('showLargeHero', false);
  }
});

App.EmberWidgetsSelectRoute = Ember.Route.extend({
  model: function() {
    return window.countries;
  }
});

App.EmberWidgetsModalRoute = Ember.Route.extend({
  actions: {
    showModal: function() {
      return Ember.Widgets.ModalComponent.popup({
        targetObject: this,
        confirm: "modalConfirm",
        cancel: "modalCancel",
        content: "Isn't this one fine day?"
      });
    },
    showModalWithCustomContent: function() {
      return Ember.Widgets.ModalComponent.popup({
        targetObject: this,
        confirm: "modalConfirm",
        cancel: "modalCancel",
        content: {
          name: "Louis"
        },
        contentViewClass: App.CustomModalContentView
      });
    },
    modalConfirm: function() {
      return console.log("Modal Confirm!");
    },
    modalCancel: function() {
      return console.log("Modal Cancel!");
    }
  }
});

App.EmberWidgetsPopoverRoute = Ember.Route.extend({
  model: function() {
    return {
      name: "Louis"
    };
  }
});

App.EmberChartsIndexRoute = Ember.Route.extend({
  redirect: function() {
    return this.transitionTo('emberCharts.overview');
  }
});

App.EmberChartsOverviewRoute = Ember.Route.extend({
  activate: function() {
    var controller;
    controller = this.controllerFor('emberCharts');
    controller.set('showLargeHero', true);
    return $(document).attr('title', 'Addepar | Ember Charts');
  },
  deactivate: function() {
    var controller;
    controller = this.controllerFor('emberCharts');
    return controller.set('showLargeHero', false);
  }
});


})();

(function() {


App.EmberWidgetsController = Ember.Controller.extend({
  isShowingPopover: false,
  countries: window.countries,
  mlb: window.mlb_teams,
  fontSizes: [
    {
      size: '1',
      name: '8'
    }, {
      size: '2',
      name: '10'
    }, {
      size: '3',
      name: '12'
    }, {
      size: '4',
      name: '14'
    }, {
      size: '5',
      name: '18'
    }
  ],
  showPopover: function(placement) {
    var opts;
    opts = {
      placement: placement,
      target: event.target,
      title: 'I am a popover title'
    };
    return Addepar.Components.Popover.popup(opts);
  },
  showModal: function() {
    return Addepar.Components.Modal.popup();
  },
  showAlert: function() {
    return Addepar.Components.Alert.popup({
      message: 'Hi there!'
    });
  },
  color: 'rgb(255,255,255)'
});


})();

(function() {

Ember.TEMPLATES["application"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "navigation", options) : helperMissing.call(depth0, "partial", "navigation", options))));
  data.buffer.push("\n\n");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "outlet", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n\n");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "footer", options) : helperMissing.call(depth0, "partial", "footer", options))));
  data.buffer.push("\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {

  var buffer = '';
  data.buffer.push("\n  ");
  data.buffer.push("\n  <div class=\"hero-container\">\n    <div class=\"hero charts-hero\">\n      <div class=\"hero-overlay\"></div>\n    </div>\n    <div class=\"container hero-content-container\">\n      <div class=\"row\">\n        <div class=\"span12 hero-tagline center-align hidden-tablet\">\n          <h1 class=\"elevated\">Ember Charts</h1>\n          <p class=\"elevated\">A beautiful and easily extensible chart suite built with D3.js and Ember.js<br><br><a href=\"https://github.com/addepar/ember-charts/zipball/master\" class=\"addepar-btn addepar-btn-large addepar-btn-outline addepar-btn-white\">Download Ember-Charts</a></p>\n        </div>\n      </div>\n    </div>\n  </div>\n");
  return buffer;
  }

function program3(depth0,data) {

  var buffer = '';
  data.buffer.push("\n  ");
  data.buffer.push("\n  <div class=\"hero-container small-hero-container\">\n    <div class=\"hero charts-hero\">\n      <div class=\"hero-overlay\"></div>\n    </div>\n  </div>\n");
  return buffer;
  }

  hashTypes = {};
  hashContexts = {};
  stack1 = helpers['if'].call(depth0, "showLargeHero", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n\n");
  data.buffer.push("\n<div class=\"container\">\n  <div class=\"row\">\n\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "ember_charts/sub_navigation", options) : helperMissing.call(depth0, "partial", "ember_charts/sub_navigation", options))));
  data.buffer.push("\n\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "outlet", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </div>\n</div>\n\n");
  data.buffer.push("\n");
  data.buffer.push("\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/_sub_navigation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Overview &amp; Getting Started");
  }

function program3(depth0,data) {


  data.buffer.push("API &amp; Documentation");
  }

function program5(depth0,data) {


  data.buffer.push("Horizontal Bar");
  }

function program7(depth0,data) {


  data.buffer.push("Vertical Bar");
  }

function program9(depth0,data) {


  data.buffer.push("Pie Chart");
  }

function program11(depth0,data) {


  data.buffer.push("Scatter Plot");
  }

function program13(depth0,data) {


  data.buffer.push("Time Series");
  }

  data.buffer.push("\n<div class=\"col-md-2 sub-navigation-sidebar\">\n  <ul class=\"list-unstyled github-navigation\">\n    <li>\n      <a class=\"btn btn-default\" target=\"_BLANK\" href=\"https://github.com/addepar/ember-charts\">\n        <i class=\"icon-github\"></i> View on GitHub\n      </a>\n    </li>\n    <li>\n      <iframe src=\"http://ghbtns.com/github-btn.html?user=addepar&amp;repo=ember-charts&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"130\" height=\"30\"></iframe>\n    </li>\n  </ul>\n  <hr>\n  <ul class=\"list-unstyled project-navigation\">\n    <li class=\"sub-title\">Ember Charts</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.overview", options) : helperMissing.call(depth0, "linkTo", "emberCharts.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.documentation", options) : helperMissing.call(depth0, "linkTo", "emberCharts.documentation", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n  </ul>\n\n  <hr>\n  <ul class=\"list-unstyled project-navigation\">\n    <li class=\"sub-title\">Ember Charts</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.horizontal_bar", options) : helperMissing.call(depth0, "linkTo", "emberCharts.horizontal_bar", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.vertical_bar", options) : helperMissing.call(depth0, "linkTo", "emberCharts.vertical_bar", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.pie", options) : helperMissing.call(depth0, "linkTo", "emberCharts.pie", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.scatter", options) : helperMissing.call(depth0, "linkTo", "emberCharts.scatter", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.time_series", options) : helperMissing.call(depth0, "linkTo", "emberCharts.time_series", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n  </ul>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_charts/bubble"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"chart-header\">\n    <h3>Bubble Chart</h3>\n  </div>\n\n  <div class=\"example-container\">\n    <div class=\"chart-container\">\n      ");
  hashContexts = {'data': depth0,'selectedSeedColor': depth0};
  hashTypes = {'data': "ID",'selectedSeedColor': "ID"};
  options = {hash:{
    'data': ("data"),
    'selectedSeedColor': ("selectedSeedColor")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['bubble-chart'] || depth0['bubble-chart']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "bubble-chart", options))));
  data.buffer.push("\n    </div>\n  </div>\n\n  <div class=\"chart-controls bumper-30\">\n    <div class=\"chart-controls-panel\">\n      <ol>\n        <li>\n          <label>Data</label>\n          ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("availableDataSets"),
    'valueBinding': ("selectedData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n        </li>\n        <li>\n          <label>Color</label>\n          ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("seedColorNames"),
    'valueBinding': ("selectedSeedColorName"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n        </li>\n      </ol>\n    </div>\n  </div>\n\n  <div class=\"chart-json\">\n    <pre>\n      ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "prettyPrintedData", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n    </pre>\n  </div>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_charts/documentation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '';


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Charts API</h1>\n  <h2>Time-series-chart Options</h2>\n  <table class=\"table ember-charts-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>barData</td>\n      <td>undefined</td>\n      <td>\n        <p>Time series data to be represented by bars.  This is an array of\n        data points.  Each data point is an object with at least three fields:\n        <em>time</em>, <em>value</em>, and <em>label</em>.  The time field\n        contains a JavaScript Date.  The value field is a Number.  The label\n        field indicates which group (series) a data point belongs to.  Example:</p>\n        <div class=\"highlight\">\n<pre class=\"prettyprint lang-js\">// average high temperature (degrees F) by city\n[\n  {\n    date: new Date(2013, 05, 01),\n    value: 64,\n    label: 'San Francisco'\n  },\n  {\n    date: new Date(2013, 05, 01),\n    value: 93,\n    label: 'Phoenix'\n  },\n  {\n    date: new Date(2013, 06, 01),\n    value: 66,\n    label: 'San Francisco'\n  },\n  {\n    date: new Date(2013, 06, 01),\n    value: 103,\n    label: 'Phoenix'\n  },\n  ...\n]</pre>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>lineData</td>\n      <td>undefined</td>\n      <td>\n        <p>Time series data to be represented by bars.  Format is the same as for\n        the <em>barData</em> time series above.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedInterval</td>\n      <td>M</td>\n      <td>\n        <p>Interval between ticks on the time axis.  Can be 'D' (days), 'W'\n        (weeks), 'M' (months), 'Q' (quarters), or 'Y' (years).</p>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSeedColor</td>\n      <td>rgb(65, 65, 65)</td>\n      <td>\n        <p>Base color that the color palette will be generated from.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>timeDelta</td>\n      <td>month</td>\n      <td>\n        <p>The time interval used represented by each group when using grouped\n        bars.  Can be 'day', 'week', 'month', 'quarter', 'year'</p>\n      </td>\n    </tr>\n    <tr>\n      <td>barPadding</td>\n      <td>0</td>\n      <td>\n        <p>Space between bars, as fraction of total bar + padding space.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>barGroupPadding</td>\n      <td>0.25</td>\n      <td>\n        <p>Space between bar groups, as fraction of total bar + padding space.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>stackBars</td>\n      <td>false</td>\n      <td>\n        <p>Stacks bars, otherwise it groups them  horizontally.</p>\n    </td>\n    </tr>\n    <tr>\n      <td>yAxisFromZero</td>\n      <td>false</td>\n      <td>\n        <p>Force the Y axis to start at zero, instead of the smallest Y value\n        provided.</p>\n      </td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Horizonta-Bar Options</h2>\n  <table class=\"table ember-charts-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>minBarThickness</td>\n      <td>20</td>\n      <td>\n        <p>Miminum bar width in pixels.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>maxBarThickness</td>\n      <td>60</td>\n      <td>\n        <p>Maximum bar width in pixels.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSeedColor</td>\n      <td>rgb(65, 65, 65)</td>\n      <td><p>Base color that the color palette will be generated from.</p>\n    </td>\n    </tr>\n    <tr>\n      <td>data</td>\n      <td>undefined</td>\n      <td>\n        <p>Data to be represented by bars.  This is an array of data points.  Each\n        data point is an object with at least two fields: <em>value</em>\n        (Number), and <em>label</em> (String).</p>\n        <div class=\"highlight\">\n<pre class=\"prettyprint lang-js\">// Population\n[\n  {\n    value: 825111,\n    label: 'San Francisco'\n  },\n  {\n    value: 984299,\n    label: 'San Jose'\n  },\n  {\n    value: 400740,\n    label: 'Oakland'\n  },\n  ...\n]</pre>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSortType</td>\n      <td>value</td>\n      <td>\n        <p>Field from each data point by which the bars will be sorted.</p>\n      </td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Vertical-Bar Options</h2>\n  <table class=\"table ember-charts-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>maxBarThickness</td>\n      <td>60</td>\n      <td>\n        <p>Maximum bar width in pixels.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSeedColor</td>\n      <td>rgb(65, 65, 65)</td>\n      <td>\n        <p>Base color that the color palette will be generated from.</p>\n      </td>\n   </tr>\n    <tr>\n      <td>data</td>\n      <td>undefined</td>\n      <td>\n        <p>Data to be represented by bars.  This is an array of data points.  Each\n        data point is an object with at least two fields: <em>value</em>\n        (Number), and <em>label</em> (String).  A third field <em>group</em>\n        (String) is optional for each data point.  The prescence of the group\n        field will group the bars based on the value of this field.</p>\n        <div class=\"highlight\">\n<pre class=\"prettyprint lang-js\">// percentage absolute return\n[\n  {\n    value: 21.51,\n    label: 'Google',\n    group: 'Tech'\n  },\n  {\n    value: 10.10,\n    label: 'Microsoft',\n    group: 'Tech'\n  },\n  {\n    value: 15.32,\n    label: 'ExxonMobil',\n    group: 'Energy'\n  },\n  {\n    value: -7.11,\n    label: 'Schlumberger',\n    group: 'Energy'\n  },\n  ...\n]</pre>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>maxLabelHeight</td>\n      <td>50</td>\n      <td>\n        <p>Space allocated for rotated labels on the bottom of the chart. If labels\n        are rotated, they will be extended beyond labelHeight up to\n        maxLabelHeight.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>withinGroupPadding</td>\n      <td>0</td>\n      <td>\n        <p>Space between bars, as fraction of bar size.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>stackBars</td>\n      <td>false</td>\n      <td>\n        <p>Stacks bars, otherwise it groups them  horizontally.</p>\n      </td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Pie Options</h2>\n  <table class=\"table ember-charts-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>maxRadius</td>\n      <td>2000</td>\n      <td>\n        <p>The maximum size in pixels of the radius of the pie.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>minSlicePercent</td>\n      <td>5</td>\n      <td>\n        The smallest slices will be combined into an \"Other\" slice until no\n        slice is smaller than minSlicePercent. \"Other\" is also guaranteed to be\n        larger than minSlicePercent.\n      </td>\n    </tr>\n    <tr>\n      <td>maxNumberOfSlices</td>\n      <td>8</td>\n      <td>\n        <p>The maximum number of slices. If the number of slices is greater\n        than this then the smallest slices will be combined into an \"other\"\n        slice until there are at most maxNumberOfSlices.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSeedColor</td>\n      <td>rgb(65, 65, 65)</td>\n      <td>\n        <p>Base color that the color palette will be generated from.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSortType</td>\n      <td>value</td>\n      <td>\n        <p>Field from each data point by which the pie-slices will be sorted.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>data</td>\n      <td>undefined</td>\n      <td>\n        <p>Data to be represented by pie-slices.  This is an array of data points.\n        Each data point is an object with at least two fields: <em>value</em>\n        (Number), and <em>label</em> (String).</p>\n        <div class=\"highlight\">\n<pre class=\"prettyprint lang-js\">// Population\n[\n  {\n  value: 825111,\n  label: 'San Francisco'\n  },\n  {\n  value: 984299,\n  label: 'San Jose'\n  },\n  {\n  value: 400740,\n  label: 'Oakland'\n  },\n  ...\n]</pre>\n        </div>\n      </td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Scatter Options</h2>\n  <table class=\"table ember-charts-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>dotRadius</td>\n      <td>7</td>\n      <td>\n        <p>Size of each icon on the scatter plot.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>data</td>\n      <td>undefined</td>\n      <td>\n        <p>Data to be represented by points on a scatter plot.  This is an array of\n        data points.  Each data point is an object with at least two fields:\n        <em>xValue</em> (Number), and <em>yValue</em> (Number).  XValue and\n        yValue correspond to an individual measurement.</p>\n\n        <p>A third field <em>group</em>, indicating the group to which the\n        measurement belongs,  is optional.  We display a different icon for each\n        group if the number of groups is less than or equal to the maximum\n        number of icons.  Otherwise, a standard icon is used for all groups.</p>\n        <div class=\"highlight\">\n<pre class=\"prettyprint lang-js\">// January minimum temperature in degrees F (yValue)\n// by latitude (xValue) and region\n[\n  {\n  \"group\": \"West Coast\",\n  \"xValue\": 38.4,\n  \"yValue\": 42\n  },\n  {\n  \"group\": \"Midwest\",\n  \"xValue\": 42.3,\n  \"yValue\": 21\n  },\n  {\n  \"group\": \"West Coast\",\n  \"xValue\": 34.2,\n  \"yValue\": 47\n  },\n  {\n  \"group\": \"South\",\n  \"xValue\": 33.9,\n  \"yValue\": 37\n  },\n  ...\n]</pre>\n        </div>\n        </code>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSeedColor</td>\n      <td>rgb(65, 65, 65)</td>\n      <td>\n        <p>Base color that the color palette will be generated from.</p>\n      </td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Bubble Options</h2>\n  <table class=\"table ember-charts-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>data</td>\n      <td>undefined</td>\n      <td>\n        <p>Data to be represented by bubbles in a bubble chart.  This is an array\n        of data points.  Each data point is an object with at least two fields:\n        <em>value</em> (Number), and <em>label</em> (String).</p>\n        <div class=\"highlight\">\n<pre class=\"prettyprint lang-js\">// Population\n[\n  {\n    value: 825111,\n    label: 'San Francisco'\n  },\n  {\n    value: 984299,\n    label: 'San Jose'\n  },\n  {\n    value: 400740,\n    label: 'Oakland'\n  },\n  ...\n]</pre>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>selectedSeedColor</td>\n      <td>rgb(65, 65, 65)</td>\n      <td>\n        <p>Base color that the color palette will be generated from.</p>\n      </td>\n    </tr>\n  </table>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/horizontal_bar"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"chart-header\">\n    <h2>Horizontal Bar Chart</h2>\n  </div>\n\n  <div class=\"example-container\">\n    <div class=\"chart-container\">\n      ");
  hashContexts = {'minBarThickness': depth0,'maxBarThickness': depth0,'selectedSeedColor': depth0,'data': depth0,'selectedSortType': depth0};
  hashTypes = {'minBarThickness': "ID",'maxBarThickness': "ID",'selectedSeedColor': "ID",'data': "ID",'selectedSortType': "ID"};
  options = {hash:{
    'minBarThickness': ("minBarThickness"),
    'maxBarThickness': ("maxBarThickness"),
    'selectedSeedColor': ("selectedSeedColor"),
    'data': ("data"),
    'selectedSortType': ("selectedSortType")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['horizontal-bar-chart'] || depth0['horizontal-bar-chart']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "horizontal-bar-chart", options))));
  data.buffer.push("\n    </div>\n  </div>\n\n  <div class=\"row bumper-30\">\n    <div class=\"col-md-6\">\n      <h4>Ember Bindings</h4>\n\n      <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Data</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("availableDataSets"),
    'valueBinding': ("selectedData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Sorting</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("sortTypes"),
    'valueBinding': ("selectedSortType"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Color</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("seedColorNames"),
    'valueBinding': ("selectedSeedColorName"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Min Bar Thickness</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "INTEGER",'max': "INTEGER",'step': "INTEGER",'valueBinding': "ID"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': (20),
    'max': (200),
    'step': (10),
    'valueBinding': ("minBarThickness")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Min Thickness: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "minBarThickness", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Max Bar Thickness</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "INTEGER",'max': "INTEGER",'step': "INTEGER",'valueBinding': "ID"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': (20),
    'max': (200),
    'step': (10),
    'valueBinding': ("maxBarThickness")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Max Thickness: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "maxBarThickness", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h4>JSON Data</h4>\n      <div class=\"chart-json\">\n<pre>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "prettyPrintedData", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/overview"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("\n      <div class=\"col-md-4\">\n        <h4>Time Series</h4>\n        <img class=\"preview-box\" src=\"img/preview_chart_time_series.png\" />\n      </div>\n    ");
  }

function program3(depth0,data) {


  data.buffer.push("\n      <div class=\"col-md-4\">\n        <h4>Horizontal Bar</h4>\n        <img class=\"preview-box\" src=\"img/preview_chart_horizontal_bar.png\" />\n      </div>\n    ");
  }

function program5(depth0,data) {


  data.buffer.push("\n      <div class=\"col-md-4\">\n        <h4>Vertical Bar</h4>\n        <img class=\"preview-box\" src=\"img/preview_chart_vertical_bar.png\" />\n      </div>\n    ");
  }

function program7(depth0,data) {


  data.buffer.push("\n      <div class=\"col-md-4\">\n        <h4>Pie</h4>\n        <img class=\"preview-box\" src=\"img/preview_chart_pie.png\" />\n      </div>\n    ");
  }

function program9(depth0,data) {


  data.buffer.push("\n      <div class=\"col-md-4\">\n        <h4>Scatter</h4>\n        <img class=\"preview-box\" src=\"img/preview_chart_scatter.png\" />\n      </div>\n    ");
  }

  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Charts</h1>\n  <p class=\"elevated\">A beautiful and easily extensible chart suite built with D3.js and Ember.js</p>\n  <div class=\"row ember-charts-examples\">\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.time_series", options) : helperMissing.call(depth0, "linkTo", "emberCharts.time_series", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.horizontal_bar", options) : helperMissing.call(depth0, "linkTo", "emberCharts.horizontal_bar", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.vertical_bar", options) : helperMissing.call(depth0, "linkTo", "emberCharts.vertical_bar", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.pie", options) : helperMissing.call(depth0, "linkTo", "emberCharts.pie", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.scatter", options) : helperMissing.call(depth0, "linkTo", "emberCharts.scatter", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    ");
  data.buffer.push("\n  </div>\n\n  <hr>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <h3>Features</h3>\n      <ul class=\"styled\">\n        <li>Coming soon.</li>\n      </ul>\n    </div>\n    <div class=\"col-md-6\">\n      <h3>Dependencies</h3>\n      <ul class=\"styled\">\n        <li><a target=\"_BLANK\" href=\"http://emberjs.com/\">Ember.js</a></li>\n        <li><a target=\"_BLANK\" href=\"http://d3js.org/\">D3.js</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Getting Started</h1>\n      <p>You will need <a target=\"_BLANK\" href=\"http://nodejs.org/\">node</a> installed as a development dependency.</p>\n      <p><a href=\"https://github.com/Addepar/ember-charts/\">Clone it from Github</a> or <a href=\"https://github.com/Addepar/ember-charts/zipball/master\">download the ZIP repo<a><p>\n      <div class=\"highlight\">\n<pre><code>$ npm install -g grunt-cli\n$ npm install\n$ grunt\n$ node examples.js</code></pre>\n      <p>Go to your browser and navigate to localhost:8000/gh_pages</p>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Changelog</h1>\n      <ul class=\"styled\">\n        <li>v0.1 - October 21, 2013. Branch: <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-charts/tree/version-0.1\">version-0.1 →</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Contributing</h1>\n      <p>You can contribute to this project in one of two ways:\n      <ul class=\"styled\">\n        <li>Browse the ember-charts <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-charts/issues?state=open\">issues</a> and report bugs</li>\n        <li>Clone the ember-charts repo, make some changes according to our development guidelines and issue a pull-request with your changes.</li>\n      </ul>\n      <p>We keep the ember-charts.js code to the minimum necessary, giving users as much control as possible.</p>\n    </div>\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Acknowledgements</h1>\n      <p><a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-charts/graphs/contributors\">List of Contributors on Github</a></p>\n      <p>With lots of help from the Ember.js team</p>\n      <p><a target=\"_BLANK\" href=\"https://twitter.com/ebryn\">ebryn</a>, <a target=\"_BLANK\" href=\"https://twitter.com/tomdale\">tomdale</a>, <a target=\"_BLANK\" href=\"https://twitter.com/wycats\">wycats</a></p>\n      <p>The original idea for lazy rendering was inspired by Erik Bryn.</p>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/pie"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"chart-header\">\n    <h2>Pie Chart</h2>\n  </div>\n\n  <div class=\"example-container\">\n    <div class=\"chart-container\">\n      ");
  hashContexts = {'maxRadius': depth0,'maxSlicePercent': depth0,'minSlicePercent': depth0,'maxNumberOfSlices': depth0,'selectedSeedColor': depth0,'selectedSortType': depth0,'data': depth0};
  hashTypes = {'maxRadius': "ID",'maxSlicePercent': "ID",'minSlicePercent': "ID",'maxNumberOfSlices': "ID",'selectedSeedColor': "ID",'selectedSortType': "ID",'data': "ID"};
  options = {hash:{
    'maxRadius': ("maxRadius"),
    'maxSlicePercent': ("maxSlicePercent"),
    'minSlicePercent': ("minSlicePercent"),
    'maxNumberOfSlices': ("maxNumberOfSlices"),
    'selectedSeedColor': ("selectedSeedColor"),
    'selectedSortType': ("selectedSortType"),
    'data': ("data")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['pie-chart'] || depth0['pie-chart']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "pie-chart", options))));
  data.buffer.push("\n    </div>\n  </div>\n\n  <div class=\"row bumper-30\">\n    <div class=\"col-md-6\">\n      <h4>Ember Bindings</h4>\n\n      <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Data</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'class': depth0,'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'class': "STRING",'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'class': ("chart-data"),
    'contentBinding': ("availableDataSets"),
    'valueBinding': ("selectedData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Color</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("seedColorNames"),
    'valueBinding': ("selectedSeedColorName"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Max Radius</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("40"),
    'max': ("2000"),
    'step': ("10"),
    'valueBinding': ("maxRadius")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Max Radius: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "maxRadius", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Max Number of Slices</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("1"),
    'max': ("30"),
    'step': ("1"),
    'valueBinding': ("maxNumberOfSlices")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Max Number of Slices: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "maxNumberOfSlices", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Min Slice Percent</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("0"),
    'max': ("20"),
    'step': ("1"),
    'valueBinding': ("minSlicePercent")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Min Slice Percent: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "minSlicePercent", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h4>JSON Data</h4>\n      <div class=\"chart-json\">\n<pre>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "prettyPrintedData", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/scatter"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"chart-header\">\n    <h2>Scatter Plot</h2>\n  </div>\n\n  <div class=\"example-container\">\n    <div class=\"chart-container\">\n      ");
  hashContexts = {'dotRadius': depth0,'data': depth0,'isShowingTotal': depth0,'totalPointData': depth0,'selectedSeedColor': depth0};
  hashTypes = {'dotRadius': "ID",'data': "ID",'isShowingTotal': "ID",'totalPointData': "ID",'selectedSeedColor': "ID"};
  options = {hash:{
    'dotRadius': ("dotRadius"),
    'data': ("data"),
    'isShowingTotal': ("isShowingTotal"),
    'totalPointData': ("totalPointData"),
    'selectedSeedColor': ("selectedSeedColor")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['scatter-chart'] || depth0['scatter-chart']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "scatter-chart", options))));
  data.buffer.push("\n    </div>\n  </div>\n\n  <div class=\"row bumper-30\">\n    <div class=\"col-md-6\">\n      <h4>Ember Bindings</h4>\n\n      <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Data</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("availableDataSets"),
    'valueBinding': ("selectedData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Color</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("seedColorNames"),
    'valueBinding': ("selectedSeedColorName"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Dot Radius</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("4"),
    'max': ("10"),
    'step': ("1"),
    'valueBinding': ("dotRadius")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Dot Radius: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "dotRadius", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h4>JSON Data</h4>\n      <div class=\"chart-json\">\n<pre>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "prettyPrintedData", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/time_series"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"chart-header\">\n    <h2>Time Series Chart</h2>\n  </div>\n\n  <div class=\"example-container\">\n    <div class=\"chart-container\">\n      ");
  hashContexts = {'barData': depth0,'lineData': depth0,'selectedInterval': depth0,'selectedSeedColor': depth0,'timeDelta': depth0,'barPadding': depth0,'barGroupPadding': depth0,'stackBars': depth0,'yAxisFromZero': depth0};
  hashTypes = {'barData': "ID",'lineData': "ID",'selectedInterval': "ID",'selectedSeedColor': "ID",'timeDelta': "ID",'barPadding': "ID",'barGroupPadding': "ID",'stackBars': "ID",'yAxisFromZero': "ID"};
  options = {hash:{
    'barData': ("barData"),
    'lineData': ("lineData"),
    'selectedInterval': ("selectedInterval"),
    'selectedSeedColor': ("selectedSeedColor"),
    'timeDelta': ("timeDelta"),
    'barPadding': ("barPadding"),
    'barGroupPadding': ("barGroupPadding"),
    'stackBars': ("stackBars"),
    'yAxisFromZero': ("yAxisFromZero")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['time-series-chart'] || depth0['time-series-chart']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "time-series-chart", options))));
  data.buffer.push("\n    </div>\n  </div>\n\n  <div class=\"row bumper-30\">\n    <div class=\"col-md-6\">\n      <h4>Ember Bindings</h4>\n\n      <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Line Data</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("availableLineDataSets"),
    'valueBinding': ("selectedLineData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Bar Data</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("availableBarDataSets"),
    'valueBinding': ("selectedBarData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Color</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("seedColorNames"),
    'valueBinding': ("selectedSeedColorName"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Tick Interval</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("tickIntervals"),
    'valueBinding': ("selectedInterval"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Bar Interval</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("dataIntervals"),
    'valueBinding': ("timeDelta"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Bar Padding</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("0"),
    'max': ("1"),
    'step': ("0.05"),
    'valueBinding': ("barPadding")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Bar Padding: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "barPadding", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Bar Group Padding</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("0"),
    'max': ("1"),
    'step': ("0.05"),
    'valueBinding': ("barGroupPadding")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Bar Group Padding: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "barGroupPadding", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"col-lg-offset-4 col-lg-8\">\n            <div class=\"checkbox\">\n              <label>");
  hashContexts = {'checkedBinding': depth0};
  hashTypes = {'checkedBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Checkbox", {hash:{
    'checkedBinding': ("stackBars")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(" Stacked Bars</label>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"col-lg-offset-4 col-lg-8\">\n            <div class=\"checkbox\">\n              <label>");
  hashContexts = {'checkedBinding': depth0};
  hashTypes = {'checkedBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Checkbox", {hash:{
    'checkedBinding': ("yAxisFromZero")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(" Force Y-Axis From Zero</label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h4>JSON Data</h4>\n      <div class=\"chart-json\">\n<pre>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "prettyPrintedData", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_charts/vertical_bar"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"chart-header\">\n    <h2>Vertical Bar Chart</h2>\n  </div>\n\n  <div class=\"example-container\">\n    <div class=\"chart-container\">\n      ");
  hashContexts = {'maxBarThickness': depth0,'selectedSeedColor': depth0,'data': depth0,'maxLabelHeight': depth0,'withinGroupPadding': depth0,'stackBars': depth0};
  hashTypes = {'maxBarThickness': "ID",'selectedSeedColor': "ID",'data': "ID",'maxLabelHeight': "ID",'withinGroupPadding': "ID",'stackBars': "ID"};
  options = {hash:{
    'maxBarThickness': ("maxBarThickness"),
    'selectedSeedColor': ("selectedSeedColor"),
    'data': ("data"),
    'maxLabelHeight': ("maxLabelHeight"),
    'withinGroupPadding': ("withinGroupPadding"),
    'stackBars': ("stackBars")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['vertical-bar-chart'] || depth0['vertical-bar-chart']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "vertical-bar-chart", options))));
  data.buffer.push("\n    </div>\n  </div>\n\n  <div class=\"row bumper-30\">\n    <div class=\"col-md-6\">\n      <h4>Ember Bindings</h4>\n\n      <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Data</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("availableDataSets"),
    'valueBinding': ("selectedData"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Color</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'contentBinding': depth0,'valueBinding': depth0,'class': depth0};
  hashTypes = {'contentBinding': "STRING",'valueBinding': "STRING",'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'contentBinding': ("seedColorNames"),
    'valueBinding': ("selectedSeedColorName"),
    'class': ("form-control")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Rotated Label Heigh</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("20"),
    'max': ("100"),
    'valueBinding': ("maxLabelHeight")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Max Label Height: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "maxLabelHeight", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Between Group Padding</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("0"),
    'max': ("2"),
    'step': ("0.05"),
    'valueBinding': ("betweenGroupPadding")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Between Group Padding: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "betweenGroupPadding", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-lg-4 control-label\">Within Group Padding</label>\n          <div class=\"col-lg-8\">\n            ");
  hashContexts = {'min': depth0,'max': depth0,'step': depth0,'valueBinding': depth0};
  hashTypes = {'min': "STRING",'max': "STRING",'step': "STRING",'valueBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.ScrubberComponent", {hash:{
    'min': ("0"),
    'max': ("2"),
    'step': ("0.05"),
    'valueBinding': ("withinGroupPadding")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n            <span class=\"help-block\">Within Group Padding: ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "withinGroupPadding", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"col-lg-offset-4 col-lg-8\">\n            <div class=\"checkbox\">\n              <label>\n                ");
  hashContexts = {'checkedBinding': depth0};
  hashTypes = {'checkedBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Checkbox", {hash:{
    'checkedBinding': ("stackBars")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(" Stacked Bars\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h4>JSON Data</h4>\n      <div class=\"chart-json\">\n<pre>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "prettyPrintedData", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {

  var buffer = '';
  data.buffer.push("\n  ");
  data.buffer.push("\n  <div class=\"hero-container\">\n    <div class=\"hero table-hero\">\n      <div class=\"hero-overlay\"></div>\n    </div>\n    <div class=\"container hero-content-container\">\n      <div class=\"row\">\n        <div class=\"span12 hero-tagline center-align hidden-tablet\">\n          <h1 class=\"elevated\">Ember Table</h1>\n          <p class=\"elevated\">A fast, lazy rendered, easily extensible table built with Ember.js.<br><br><a href=\"https://github.com/addepar/ember-table/zipball/master\" class=\"addepar-btn addepar-btn-large addepar-btn-outline addepar-btn-white\">Download Ember-Table</a></p>\n        </div>\n      </div>\n    </div>\n  </div>\n");
  return buffer;
  }

function program3(depth0,data) {

  var buffer = '';
  data.buffer.push("\n  ");
  data.buffer.push("\n  <div class=\"hero-container small-hero-container\">\n    <div class=\"hero table-hero\">\n      <div class=\"hero-overlay\"></div>\n    </div>\n  </div>\n");
  return buffer;
  }

  hashTypes = {};
  hashContexts = {};
  stack1 = helpers['if'].call(depth0, "showLargeHero", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n\n");
  data.buffer.push("\n<div class=\"container\">\n  <div class=\"row\">\n\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "ember_table/sub_navigation", options) : helperMissing.call(depth0, "partial", "ember_table/sub_navigation", options))));
  data.buffer.push("\n\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "outlet", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/_sub_navigation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Overview &amp; Getting Started");
  }

function program3(depth0,data) {


  data.buffer.push("API &amp; Documentation");
  }

function program5(depth0,data) {


  data.buffer.push("Hello World Table");
  }

function program7(depth0,data) {


  data.buffer.push("AJAX cells");
  }

function program9(depth0,data) {


  data.buffer.push("Bar cells");
  }

function program11(depth0,data) {


  data.buffer.push("Dynamic bar cells");
  }

function program13(depth0,data) {


  data.buffer.push("Tree &amp; financial table");
  }

function program15(depth0,data) {


  data.buffer.push("Editable cells");
  }

function program17(depth0,data) {


  data.buffer.push("Sparkline cells");
  }

function program19(depth0,data) {


  data.buffer.push("Horizon cells");
  }

function program21(depth0,data) {


  data.buffer.push("Fluid table");
  }

  data.buffer.push("\n<div class=\"col-md-2 sub-navigation-sidebar\">\n  <ul class=\"list-unstyled github-navigation\">\n    <li>\n      <a class=\"btn btn-default\" target=\"_BLANK\" href=\"https://github.com/addepar/ember-table\">\n        <i class=\"icon-github\"></i> View on GitHub\n      </a>\n    </li>\n    <li>\n      <iframe src=\"http://ghbtns.com/github-btn.html?user=addepar&amp;repo=ember-table&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"130\" height=\"30\"></iframe>\n    </li>\n  </ul>\n  <hr>\n  <ul class=\"list-unstyled project-navigation\">\n    <li class=\"sub-title\">Ember Table</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.overview", options) : helperMissing.call(depth0, "linkTo", "emberTable.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.documentation", options) : helperMissing.call(depth0, "linkTo", "emberTable.documentation", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n  </ul>\n  <hr>\n  <ul class=\"list-unstyled project-navigation\">\n    <li class=\"sub-title\">Examples</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.simple", options) : helperMissing.call(depth0, "linkTo", "emberTable.simple", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.ajax", options) : helperMissing.call(depth0, "linkTo", "emberTable.ajax", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.bars", options) : helperMissing.call(depth0, "linkTo", "emberTable.bars", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.dynamic-bars", options) : helperMissing.call(depth0, "linkTo", "emberTable.dynamic-bars", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.financial", options) : helperMissing.call(depth0, "linkTo", "emberTable.financial", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.editable", options) : helperMissing.call(depth0, "linkTo", "emberTable.editable", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.sparkline", options) : helperMissing.call(depth0, "linkTo", "emberTable.sparkline", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.horizon", options) : helperMissing.call(depth0, "linkTo", "emberTable.horizon", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(21, program21, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.fluid", options) : helperMissing.call(depth0, "linkTo", "emberTable.fluid", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n  </ul>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/ajax"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Ajax Cells</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'numFixedColumns': depth0,'numRows': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'numFixedColumns': "INTEGER",'numRows': "INTEGER",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  options = {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'numFixedColumns': (0),
    'numRows': (100),
    'rowHeight': (35),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['table-component'] || depth0['table-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "table-component", options))));
  data.buffer.push("\n        </div>\n      </div>\n      <div class=\"example-description\">\n        <p class=\"reduced\">Ember-Table with ajax cells.</p>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n    hasHeader=true\n    hasFooter=false\n    numFixedColumns=0\n    numRows=100\n    rowHeight=35\n    columnsBinding=\"columns\"\n    contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.EmberTableAjaxLazyDataSource = Ember.ArrayProxy.extend\n  createGithubEvent: (row, event) ->\n    row.set 'type',       event.type\n    row.set 'createdAt',  event.created_at\n    row.set 'login',      event.actor.login\n    row.set 'avatar',     event.actor.avatar_url\n    row.set 'isLoaded',   yes\n\n  requestGithubEvent: (page) ->\n    content = @get 'content'\n    start   = (page - 1) * 30\n    end     = start + 30\n    url = \"https://api.github.com/repos/emberjs/ember.js/events?page=#{page}&per_page=30&callback=?\"\n    Ember.$.getJSON url, (json) =>\n      json.data.forEach (event, index) =>\n        row = content[start + index]\n        @createGithubEvent row, event\n    [start...end].forEach (index) ->\n      content[index] = Ember.Object.create eventId: index, isLoaded: no\n\n  objectAt: (index) ->\n    content = @get 'content'\n    #if index is content.get('length') - 1\n    #  content.pushObjects(new Array(30))\n    row = content[index]\n    return row if row and not row.get('error')\n    @requestGithubEvent Math.floor(index / 30 + 1)\n    content[index]\n\nApp.ApplicationController = Ember.Controller.extend\n  numRows: 100\n\n  columns: Ember.computed ->\n    avatar = Ember.Table.ColumnDefinition.create\n      columnWidth: 80\n      headerCellName: 'avatar'\n      tableCellViewClass:  'App.EmberTableAjaxImageTableCell'\n      contentPath: 'avatar'\n    columnNames = ['login', 'type', 'createdAt']\n    columns = columnNames.map (key, index) ->\n      Ember.Table.ColumnDefinition.create\n        columnWidth: 150\n        headerCellName: key.w()\n        contentPath: key\n    columns.unshift avatar\n    columns\n\n  content: Ember.computed ->\n    App.EmberTableAjaxLazyDataSource.create\n      content: new Array(@get('numRows'))\n  .property 'numRows'\n</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/ajax_table/ajax_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var stack1, hashTypes, hashContexts, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = '', hashContexts, hashTypes;
  data.buffer.push("\n  <img width=\"30\" ");
  hashContexts = {'src': depth0};
  hashTypes = {'src': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'src': ("view.cellContent")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("></img>\n");
  return buffer;
  }

function program3(depth0,data) {


  data.buffer.push("\n  <img src=\"img/loading.gif\" style=\"padding: 8px;\"></img>\n");
  }

  hashTypes = {};
  hashContexts = {};
  stack1 = helpers['if'].call(depth0, "view.rowContent.isLoaded", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  else { data.buffer.push(''); }

});

Ember.TEMPLATES["ember_table/bar_table/bar"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<span class=\"bar-cell\" ");
  hashContexts = {'style': depth0};
  hashTypes = {'style': "STRING"};
  options = {hash:{
    'style': ("view.histogramStyle")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || depth0['bind-attr']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "bind-attr", options))));
  data.buffer.push(">\n</span>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/bars"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>D3 Chart Table Cells</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  options = {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'rowHeight': (30),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['table-component'] || depth0['table-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "table-component", options))));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n  </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n    hasHeader=true\n    hasFooter=false\n    rowHeight=30\n    columnsBinding=\"columns\"\n    contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>bar_table_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;span class=&quot;bar-cell&quot; &#123;&#123;bind-attr style=&quot;view.histogramStyle&quot;&#125;&#125;&gt;&lt;/span&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>bar_table_cell_view.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.BarTableCellView = Ember.Table.TableCell.extend\n  templateName:     'ember_table/bar_table/bar'\n  classNameBindings:['column.color']\n  barWidth: Ember.computed ->\n    {column, row} = @getProperties 'column', 'row'\n    return 0 unless column and row\n    Math.round(+@get('cellContent'))\n  .property 'column', 'row', 'cellContent'\n\n  histogramStyle: Ember.computed ->\n    \"width: #{@get('barWidth')}%;\"\n  .property 'barWidth'</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  numRows: 100\n\n  columns: Ember.computed ->\n    colors  = ['blue', 'teal', 'green', 'yellow', 'orange']\n    column1 = Ember.Table.ColumnDefinition.create\n      columnWidth:    50\n      headerCellName: 'Name'\n      contentPath: 'key'\n    columns = colors.map (color, index) ->\n      Ember.Table.ColumnDefinition.create\n        color: color\n        headerCellName: 'Bar'\n        tableCellViewClass: 'App.BarTableCell'\n        contentPath: \"value#{index + 1}\"\n    columns.unshift(column1)\n    columns\n\n  content: Ember.computed ->\n    [0...@get('numRows')].map (num, index) ->\n      key: index\n      value1: Math.random() * 80 + 10\n      value2: Math.random() * 80 + 10\n      value3: Math.random() * 80 + 10\n      value4: Math.random() * 80 + 10\n      value5: Math.random() * 80 + 10\n  .property 'numRows'\n</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/documentation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("here");
  }

  data.buffer.push("    ");
  data.buffer.push("\n    <div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n      <h1>Migration Guide</h1>\n      <div class=\"row\">\n        <div class=\"col-md-7\">\n          <h2>Guide</h2>\n          <p>Version 0.1 of Ember Table is a bit of a restructure - we’re hoping that the new organization will make it simpler and easier to set up, but for existing users, you’ll have to make a few changes to upgrade to the new Ember Table. This guide is intended to walk you through that process.</p>\n\n          <ol class=\"styled styled-spacious\">\n            <li>Upgrade ember-table.js and ember-table.css. If you’re not on the latest version of <a target=\"_BLANK\" href=\"http://emberjs.com/\">Ember.js</a>, now might be a good time to upgrade that as well. This guide was written using Ember 1.0.0 and Ember Table 0.1. You can grab Ember 1.0.0 <a target=\"_BLANK\" href=\"https://github.com/emberjs/starter-kit/archive/v1.0.0.zip\">here</a>.</li>\n            <li>The major change is moving from separate table Views and Controllers to a unified table Component. You can read up on Ember Components <a target=\"_BLANK\" href=\"http://emberjs.com/guides/components/\">here</a>. So instead of having lines like this:<br/><br/>\n            <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.MyTableController = Ember.Table.TableController.extend (...)\nApp.MyTableView = EmberTable.TableContainerView.extend (...)</pre>\n            </div>\n\n            You’ll have everything in one place:\n            <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.MyTableController = Ember.Controller.extend (...)</pre>\n            </div>\n\n            For starters, just change the type of your MyTableController from the old version to the new.\n            </li>\n            <li>Update your handlebars file. Before, it might have looked like:<br/>\n              <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;view Ember.Table.TablesContainer …&#125;&#125;</pre>\n              </div>\n              After the restructure, it should look like this:<br/>\n              <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component …&#125;&#125;</pre>\n              </div>\n            </li>\n            <li>While you’re modifying that handlebars file, you may want to make sure it looks like the structure of the new Ember Table examples. You can see one ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.simple", options) : helperMissing.call(depth0, "linkTo", "emberTable.simple", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push(". In particular, you might get errors if you don’t properly bind your columns and content of the table, using “columnsBinding=” and “contentBinding=”.<br/><br/>\n            Both of these settings refer to variables in the corresponding controller (which here should be MyTableController), such that if you set “columnsBinding=exampleVariable”, then the columns will be bound to “exampleVariable” in the controller. This gives you control over the look and content of the table.<br/><br/>\n            Before, you may have had “controllerBinding=” here. You don’t need this any more: the controller being used with this template will be used for the table too, by default.</li>\n            <li>Move any properties you had defined in your TableContainerView (if you had one) into the controller. See the examples for more information on how table properties should be set now.</li>\n          </ol>\n        </div>\n        <div class=\"col-md-5\">\n          <h2>Troubleshooting</h2>\n          <ul class=\"styled styled-spacious\">\n            <li>If you were using old Ember Table objects like the RowArrayProxy, take another look and consider whether you really need it. During my migration I was able to remove it by changing the “contentBinding=” in my handlebars file to a more appropriate variable for content.</li>\n            <li>If you are having errors with template names not being found, it may be due to a change with inferring names. For me, my old template names used hyphens, and changing them to underscores automatically connected them to the rest of my application.</li>\n          </ul>\n        </div>\n      </div>\n\n      <hr>\n      <h1>API</h1>\n      <h2>Ember.Table.TableComponent Options</h2>\n\n      <table class=\"table ember-table-options\">\n        <tr>\n          <th style=\"width: 200px;\">Option</th>\n          <th style=\"width: 150px;\">Default</th>\n          <th>Description</th>\n        </tr>\n        <tr>\n          <td>content <b>(required)</b></td>\n          <td>null</td>\n          <td>\n            <p>\n              An array which returns row objects. Each column definition\n              must define a function which takes a row object and\n              returns the value for that cell. E.g. the row object might\n              be a hash, in which case the column definition's function\n              might simply get the value corresponding to its key. The\n              row object might be a function, in which case the column\n              definition's function might evaluate the function at a\n              given value. Etc.\n            </p>\n          </td>\n        <tr>\n          <td>columns <b>(required)</b></td>\n          <td>null</td>\n          <td>\n            <p>\n              An array of column definitions. Allows you to specify\n              column configuration - e.g. whether the column is resizable,\n              its css class, etc. (see column definition API for more\n              details)\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>numFixedColumns</td>\n          <td>0</td>\n          <td><p>The number of frozen column on the left table.</p></td>\n        </tr>\n        <tr>\n          <td>numFooterRow</td>\n          <td>0</td>\n          <td><p>The number of footer rows in the table.</p></td>\n        </tr>\n        <tr>\n          <td>rowHeight</td>\n          <td>30</td>\n          <td><p>The row height, which is necessary to calculate the height for the lazy rendering.</p></td>\n        </tr>\n        <tr>\n          <td>minHeaderHeight</td>\n          <td>30</td>\n          <td><p>The minimum header height in pixels.</p></td>\n        </tr>\n        <tr>\n          <td>footerHeight</td>\n          <td>30</td>\n          <td><p>The minimum footer height in pixels.</p></td>\n        </tr>\n        <tr>\n          <td>hasHeader</td>\n          <td>true</td>\n          <td><p>Shows the header block.</p></td>\n        </tr>\n        <tr>\n          <td>hasFooter</td>\n          <td>true</td>\n          <td><p>Shows a the footer block.</p></td>\n        </tr>\n        <tr>\n          <td>forceFillColumns</td>\n          <td>false</td>\n          <td><p>Expands the columns to fill the given width.</p></td>\n        </tr>\n        <tr>\n          <td>enableColumnReorder</td>\n          <td>true</td>\n          <td><p>Allows the user the reorder the columns to their liking.</p></td>\n        </tr>\n      </table>\n\n      <h2>Ember.Table.ColumnDefinition Options</h2>\n      <table class=\"table ember-table-options\">\n        <tr>\n          <th style=\"width: 200px;\">Option</th>\n          <th style=\"width: 150px;\">Default</th>\n          <th>Description</th>\n        </tr>\n        <tr>\n          <td>headerCellName</td>\n          <td>undefined</td>\n          <td><p>Text that appears in the column header.</p></td>\n        </tr>\n        <tr>\n          <td>contentPath</td>\n          <td>undefined</td>\n          <td><p>Path of the content for a cell. Given a row, this is the\n            path of the value that is extracted from that row.</p></td>\n        </tr>\n        <tr>\n          <td>minWidth</td>\n          <td>undefined</td>\n          <td><p>Minimum width of the column.</p></td>\n        </tr>\n        <tr>\n          <td>maxWidth</td>\n          <td>undefined</td>\n          <td><p>Maximum width of the column.</p></td>\n        </tr>\n        <tr>\n          <td>defaultColumnWidth</td>\n          <td>150</td>\n          <td><p>The width of the column, by default (in pixels).</p></td>\n        </tr>\n        <tr>\n          <td>isResizable</td>\n          <td>yes</td>\n          <td><p>If yes then the column can be resized, otherwise it\n            cannot.</p></td>\n        </tr>\n        <tr>\n          <td>isSortable</td>\n          <td>yes</td>\n          <td><p>If yes then the column can be sorted.</p></td>\n        </tr>\n        <tr>\n          <td>textAlign</td>\n          <td>'text-align-right'</td>\n          <td><p>Aligns text left/center/right in the column.</p></td>\n        </tr>\n        <tr>\n          <td>canAutoResize</td>\n          <td>yes</td>\n          <td><p>If yes then column will automatically resized to be\n            larger when there is additional space for the table.</p></td>\n        </tr>\n      </table>\n\n      <h2>Ember.Table.TableCell Options</h2>\n      <table class=\"table ember-table-options\">\n        <tr>\n          <th style=\"width: 200px;\">Option</th>\n          <th style=\"width: 150px;\">Default</th>\n          <th>Description</th>\n        </tr>\n        <tr>\n          <td>templateName</td>\n          <td>'table-cell'</td>\n          <td><p>The name of the template to be rendered into the cell.\n            Used for rendering custom templates<p></td>\n        </tr>\n        <tr>\n          <td>classNames</td>\n          <td>['ember-table-cell']</td>\n          <td><p>The class names applied to the cell. Override to give\n            the cell custom styling (border, background color, etc.)<p></td>\n        </tr>\n        <tr>\n          <td>classNameBindings</td>\n          <td>'column.textAlign'</td>\n          <td><p>A binding used to dynamically associate class names\n            with this table cell. E.g. you can bind to a column property\n            to have cell colors or styles vary across columns.<p></td>\n        </tr>\n        <tr>\n          <td>styleBindings</td>\n          <td>'width'</td>\n          <td><p>Values which are bound to the cell's style attr. See\n            Ember.STyleBindingsMixin documentation for more details.<p></td>\n        </tr>\n      </table>\n\n      <h2>Ember.Table.HeaderCell Options</h2>\n      <table class=\"table ember-table-options\">\n        <tr>\n          <th style=\"width: 200px;\">Option</th>\n          <th style=\"width: 150px;\">Default</th>\n          <th>Description</th>\n        </tr>\n        <tr>\n          <td>templateName</td>\n          <td>'table-cell'</td>\n          <td><p>The name of the template to be rendered into the cell.\n            Used for rendering custom templates<p></td>\n        </tr>\n        <tr>\n          <td>classNames</td>\n          <td>['ember-table-cell']</td>\n          <td><p>The class names applied to the cell. Override to give\n            the cell custom styling (border, background color, etc.)<p></td>\n        </tr>\n        <tr>\n          <td>classNameBindings</td>\n          <td>'column.textAlign'</td>\n          <td><p>A binding used to dynamically associate class names\n            with this table cell. E.g. you can bind to a column property\n            to have cell colors or styles vary across columns.<p></td>\n        </tr>\n        <tr>\n          <td>styleBindings</td>\n          <td>'width'</td>\n          <td><p>Values which are bound to the cell's style attr. See\n            Ember.STyleBindingsMixin documentation for more details.<p></td>\n      </table>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/dynamic-bars"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Dynamic Bar</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  options = {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'rowHeight': (30),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['table-component'] || depth0['table-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "table-component", options))));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n  hasFooter=false\n  columnsBinding=\"columns\"\n  contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>bar_table_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;span class=&quot;bar-cell&quot; &#123;&#123;bind-attr style=&quot;view.histogramStyle&quot;&#125;&#125;&gt;&lt;/span&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>bar_table_cell_view.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.BarTableCellView = Ember.Table.TableCell.extend\n  templateName:     'ember_table/bar_table/bar'\n  classNameBindings:['column.color']\n  barWidth: Ember.computed ->\n    {column, row} = @getProperties 'column', 'row'\n    return 0 unless column and row\n    Math.round(+@get('cellContent'))\n  .property 'column', 'row', 'cellContent'\n\n  histogramStyle: Ember.computed ->\n    \"width: #{@get('barWidth')}%;\"\n  .property 'barWidth'</pre>\n      </div>\n    </div>\n\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  numRows: 100\n\n  getNextValue: (current) ->\n    current = current + (Math.random() * 10 - 5)\n    current = Math.min(100, current)\n    current = Math.max(0, current)\n    current\n\n  init: ->\n    setInterval =>\n      @get('content').forEach (item) =>\n        item.set 'value1', @getNextValue(item.get('value1'))\n        item.set 'value2', @getNextValue(item.get('value2'))\n        item.set 'value3', @getNextValue(item.get('value3'))\n        item.set 'value4', @getNextValue(item.get('value4'))\n        item.set 'value5', @getNextValue(item.get('value5'))\n    , 1500\n\n  columns: Ember.computed ->\n    colors  = ['blue', 'teal', 'green', 'yellow', 'orange']\n    column1 = Ember.Table.ColumnDefinition.create\n      columnWidth:    50\n      headerCellName: 'Name'\n      contentPath: 'key'\n    columns = colors.map (color, index) ->\n      Ember.Table.ColumnDefinition.create\n        color: color\n        headerCellName: 'Bar'\n        tableCellViewClass: 'App.BarTableCell'\n        contentPath: \"value#{index + 1}\"\n    columns.unshift(column1)\n    columns\n\n  content: Ember.computed ->\n    [0...@get('numRows')].map (num, index) ->\n      Ember.Object.create\n        key: index\n        value1: Math.random() * 80 + 10\n        value2: Math.random() * 80 + 10\n        value3: Math.random() * 80 + 10\n        value4: Math.random() * 80 + 10\n        value5: Math.random() * 80 + 10\n  .property 'numRows'</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/editable"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Editable</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'numFixedColumns': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'numFixedColumns': "INTEGER",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  options = {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'numFixedColumns': (0),
    'rowHeight': (30),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['table-component'] || depth0['table-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "table-component", options))));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n  hasHeader=true\n  hasFooter=false\n  numFixedColumns=0\n  rowHeight=35\n  columnsBinding=\"columns\"\n  contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>editable_table_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;span class=&quot;ember-table-content&quot;&gt;<br/>  &#123;&#123;#if view.isEditing&#125;&#125;<br/>    &#123;&#123;view view.innerTextField&#125;&#125;<br/>  &#123;&#123;else&#125;&#125;<br/>    &lt;span class='content'&gt;&#123;&#123;view.cellContent&#125;&#125;&lt;/span&gt;<br/>  &#123;&#123;/if&#125;&#125;<br/>&lt;/span&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>rating_table_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;div class=&quot;rating&quot;&gt;<br/>  &lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;<br/>&lt;/div&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>editable_table_cell_views.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.EditableTableCell = Ember.Table.TableCell.extend\n  className: 'editable-table-cell'\n  templateName: 'ember_table/editable_table/editable_table_cell'\n  isEditing:  no\n  type:       'text'\n\n  innerTextField: Ember.TextField.extend\n    typeBinding:  'parentView.type'\n    valueBinding: 'parentView.cellContent'\n    didInsertElement: -> @$().focus()\n    focusOut: (event) -> @set 'parentView.isEditing', no\n\n  onRowContentDidChange: Ember.observer ->\n    @set 'isEditing', no\n  , 'rowContent'\n\n  click: (event) ->\n    @set 'isEditing', yes\n    event.stopPropagation()\n\nApp.DatePickerTableCell = App.EditableTableCell.extend\n  type: 'date'\n\nApp.RatingTableCell = Ember.Table.TableCell.extend\n  classNames: 'rating-table-cell'\n  templateName: 'ember_table/editable_table/rating_table_cell'\n\n  onRowContentDidChange: Ember.observer ->\n    @applyRating @get('cellContent')\n  , 'cellContent'\n\n  didInsertElement: ->\n    @_super()\n    @onRowContentDidChange()\n\n  applyRating: (rating) ->\n    @$('.rating span').removeClass('active')\n    span   = @$('.rating span').get(rating)\n    $(span).addClass('active')\n\n  click: (event) ->\n    rating = @$('.rating span').index(event.target)\n    return if rating is -1\n    @get('column').setCellContent(@get('rowContent'), rating)\n    @applyRating(rating)\n</pre>\n      </div>\n    </div>\n\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.EmberTableEditableController = Ember.Controller.extend\n  numRows: 100\n  columns: Ember.computed ->\n    columnNames = ['open', 'close']\n    dateColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Date'\n      tableCellViewClass: 'App.DatePickerTableCell'\n      getCellContent: (row) -> row['date'].toString('yyyy-MM-dd')\n      setCellContent: (row, value) -> row['date'] = value\n    ratingColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 150\n      headerCellName: 'Analyst Rating'\n      tableCellViewClass: 'App.RatingTableCell'\n      contentPath: 'rating'\n      setCellContent: (row, value) -> row['rating'] = value\n    columns= columnNames.map (key, index) ->\n      name = key.charAt(0).toUpperCase() + key.slice(1)\n      Ember.Table.ColumnDefinition.create\n        columnWidth: 100\n        headerCellName: name\n        tableCellViewClass: 'App.EditableTableCell'\n        getCellContent: (row) -> row[key].toFixed(2)\n        setCellContent: (row, value) -> row[key] = +value\n    columns.unshift(ratingColumn)\n    columns.unshift(dateColumn)\n    columns\n  .property()\n\n  content: Ember.computed ->\n    [0...@get('numRows')].map (num, idx) ->\n      index: idx\n      date:  Date.now().add(days: idx)\n      open:  Math.random() * 100 - 50\n      close: Math.random() * 100 - 50\n      rating:Math.round(Math.random() * 4)\n  .property 'numRows'</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/editable_table/editable_table_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var stack1, hashTypes, hashContexts, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {

  var buffer = '', hashTypes, hashContexts;
  data.buffer.push("\n  ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "view.innerTextField", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n");
  return buffer;
  }

function program3(depth0,data) {

  var buffer = '', hashTypes, hashContexts;
  data.buffer.push("\n  <span class='content'>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.cellContent", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</span>\n");
  return buffer;
  }

  hashTypes = {};
  hashContexts = {};
  stack1 = helpers['if'].call(depth0, "view.isEditing", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  else { data.buffer.push(''); }

});

Ember.TEMPLATES["ember_table/editable_table/rating_table_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};



  data.buffer.push("<div class=\"rating\">\n  <span></span><span></span><span></span><span></span><span></span>\n</div>");

});

Ember.TEMPLATES["ember_table/financial"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Financial Table</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container ember-table-financial\">\n          ");
  hashContexts = {'dataBinding': depth0};
  hashTypes = {'dataBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.FinancialTableComponent", {hash:{
    'dataBinding': ("data")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n        </div>\n      </div>\n      <div class=\"example-description\">\n        <p class=\"reduced\">Ember-Table with financial theme.</p>\n      </div>\n    </div>\n  </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n  hasHeader=true\n  hasFooter=false\n  numFixedColumns=0\n  rowHeight=35\n  columnsBinding=\"columns\"\n  contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;div class=&quot;ember-table-cell-container&quot;&gt;<br/>  &lt;span class=&quot;ember-table-content&quot;&gt;<br/>    &#123;&#123;view.cellContent&#125;&#125;<br/>  &lt;/span&gt;<br/>&lt;/div&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_tree_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;div class=&quot;ember-table-cell-container&quot; &#123;&#123;bindAttr style=&quot;view.paddingStyle&quot;&#125;&#125;&gt;<br/>  &lt;span &#123;&#123;bindAttr class=&quot;:ember-table-toggle-span view.row.isLeaf::ember-table-toggle<br/>    view.row.isCollapsed:ember-table-expand:ember-table-collapse&quot;&#125;&#125;<br/>    &#123;&#123;action toggleCollapse view.row&#125;&#125;&gt;<br/>    &lt;i class=&quot;icon-caret-down ember-table-toggle-icon&quot;&gt;&lt;/i&gt;<br/>  &lt;/span&gt;<br/>  &lt;span class=&quot;ember-table-content&quot;&gt;<br/>    &#123;&#123;view.cellContent&#125;&#125;<br/>  &lt;/span&gt;<br/>&lt;/div&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_header_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;div class=&quot;ember-table-cell-container&quot;&gt;<br/>  &lt;div class=&quot;ember-table-header-content-container&quot;&gt;<br/>    &lt;span class=&quot;ember-table-content&quot;&gt;<br/>      &#123;&#123;view.content.headerCellName&#125;&#125;<br/>    &lt;/span&gt;<br/>  &lt;/div&gt;<br/>&lt;/div&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_header_tree_cell.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&lt;div class=&quot;ember-table-cell-container&quot;&gt;<br/>  &lt;span &#123;&#123;bindAttr class=&quot;:ember-table-toggle-span :ember-table-toggle<br/>      isCollapsed:ember-table-expand:ember-table-collapse&quot;&#125;&#125;<br/>      &#123;&#123;action toggleTableCollapse&#125;&#125;&gt;<br/>    &lt;i class=&quot;icon-caret-down ember-table-toggle-icon&quot;&gt;&lt;/i&gt;<br/>  &lt;/span&gt;<br/>  &lt;div class=&quot;ember-table-header-content-container&quot;&gt;<br/>    &lt;span class=&quot;ember-table-content&quot;&gt;<br/>      &#123;&#123;view.column.headerCellName&#125;&#125;<br/>    &lt;/span&gt;<br/>  &lt;/div&gt;<br/>&lt;/div&gt;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_cell_views.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.FinancialTableCell = Ember.Table.TableCell.extend\n  templateName: 'ember_table/financial_table/financial_table_cell'\n\nApp.FinancialTableHeaderCell = Ember.Table.HeaderCell.extend\n  templateName: 'ember_table/financial_table/financial_table_header_cell'\n\nApp.FinancialTableTreeCell = Ember.Table.TableCell.extend\n  templateName: 'ember_table/financial_table/financial_table_tree_cell'\n  classNames:   'ember-table-table-tree-cell'\n  paddingStyle: Ember.computed ->\n    \"padding-left:#{@get('row.indentation')}px;\"\n  .property 'row.indentation'\n\nApp.FinancialTableHeaderTreeCell = Ember.Table.HeaderCell.extend\n  templateName: 'ember_table/financial_table/financial_table_header_tree_cell'\n  classNames:   'ember-table-table-header-tree-cell'\n</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_row.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.FinancialTableTreeTableRow = Ember.Table.Row.extend\n  content:  null\n  children: null\n  parent:   null\n  isRoot:   no\n  isLeaf:   no\n  isCollapsed: no\n  isShowing: yes\n  indentationSpacing: 20\n  groupName: null\n\n  # This may look ugly, but this is necessary. By doing the styles computation\n  # imperatively we made the initial table load 10-100x faster (certain cases)\n  computeStyles: (parent) ->\n    groupingLevel = 0\n    indentation   = 0\n    isShowing     = yes\n    if parent\n      isShowing = parent.get('isShowing') and not parent.get('isCollapsed')\n      pGroupingLevel = parent.get 'groupingLevel'\n      groupingLevel  = pGroupingLevel\n      groupingLevel  += 1 if parent.get('groupName') isnt @get('groupName')\n      indentType = if groupingLevel is pGroupingLevel then 'half' else 'full'\n      spacing    = @get 'indentationSpacing'\n      if not parent.get('isRoot')\n        indentation = parent.get('indentation')\n        indentation += (if indentType is 'half' then spacing / 2 else spacing)\n    @set 'groupingLevel', groupingLevel\n    @set 'indentation', indentation\n    @set 'isShowing', isShowing\n\n  computeRowStyle: (maxLevels) ->\n    level = @getFormattingLevel @get('groupingLevel'), maxLevels\n    @set 'rowStyle', \"ember-table-row-style-#{level}\"\n\n  recursiveCollapse: (isCollapsed) ->\n    @set 'isCollapsed', isCollapsed\n    @get('children').forEach (child) ->\n      child.recursiveCollapse isCollapsed\n\n  getFormattingLevel: (level, maxLevels) ->\n    switch maxLevels\n      when 1 then return 5\n      when 2\n        return 2 if level is 1\n        return 5\n      when 3\n        return 1 if level is 1\n        return 3 if level is 2\n        return 5\n      when 4\n        return 1 if level is 1\n        return 2 if level is 2\n        return 4 if level is 4\n        return 5\n      when 5\n        return level\n      else\n        return 5 if level is maxLevels\n        return Math.min(level, 4)</pre>\n      </div>\n    </div>\n\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>financial_table_component.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.FinancialTableComponent = Ember.Table.EmberTableComponent.extend\n  # overridding default properties\n  numFixedColumns: 1\n  isCollapsed: no\n  isHeaderHeightResizable: yes\n  rowHeight: 30\n  hasHeader: yes\n  hasFooter: yes\n  headerHeight: 70\n\n  # custom properties\n  sortAscending: no\n  sortColumn: null\n  selection: null\n\n  actions:\n    toggleTableCollapse: (event) ->\n      @toggleProperty 'isCollapsed'\n      isCollapsed = @get 'isCollapsed'\n      children = @get('root.children')\n      return unless children and children.get('length') > 0\n      children.forEach (child) -> child.recursiveCollapse isCollapsed\n      @notifyPropertyChange 'rows'\n\n    toggleCollapse: (row) ->\n      row.toggleProperty 'isCollapsed'\n      Ember.run.next this, -> @notifyPropertyChange 'rows'\n\n  ##############################################################################\n  # Data Conversions\n  ##############################################################################\n  data: null\n\n  columns: Ember.computed ->\n    data = @get 'data'\n    return unless data\n    names = @get('data.value_factors').getEach('display_name')\n    columns = names.map (name, index) ->\n      Ember.Table.ColumnDefinition.create\n        index: index\n        headerCellName: name\n        headerCellViewClass:  'App.FinancialTableHeaderCell'\n        tableCellViewClass:   'App.FinancialTableCell'\n        getCellContent: (row) ->\n          object = row.values[@get('index')]\n          return object.value.toCurrency() if object.type is 'money'\n          return object.value.toPercent()  if object.type is 'percent'\n          \"-\"\n    columns.unshiftObject @get('groupingColumn')\n    columns\n  .property 'data.valueFactors.@each', 'groupingColumn'\n\n  groupingColumn: Ember.computed ->\n    groupingFactors = @get 'data.grouping_factors'\n    name = groupingFactors.getEach('display_name').join ' ▸ '\n    Ember.Table.ColumnDefinition.create\n      headerCellName: name\n      columnWidth: 400\n      isTreeColumn: yes\n      isSortable: no\n      textAlign: 'text-align-left'\n      headerCellViewClass:  'App.FinancialTableHeaderTreeCell'\n      tableCellViewClass:   'App.FinancialTableTreeCell'\n      contentPath: 'group_value'\n  .property 'data.grouping_factors.@each'\n\n  root: Ember.computed ->\n    data = @get 'data'\n    return unless data\n    @createTree(null, data.root)\n  .property 'data', 'sortAscending', 'sortColumn'\n\n  rows: Ember.computed ->\n    root = @get 'root'\n    return Ember.A() unless root\n    rows = @flattenTree null, root, Ember.A()\n    @computeStyles null, root\n    maxGroupingLevel = Math.max.apply rows.getEach('groupingLevel')\n    rows.forEach (row) -> row.computeRowStyle(maxGroupingLevel)\n    rows\n  .property 'root'\n\n  # OPTIMIZATION HACK\n  bodyContent: Ember.computed ->\n    rows = @get('rows')\n    return Ember.A() unless rows\n    rows = rows.slice(1, rows.get('length'))\n    rows.filterProperty('isShowing')\n  .property 'rows'\n\n  footerContent: Ember.computed ->\n    rows = @get('rows')\n    return Ember.A() unless rows\n    rows.slice(0, 1)\n  .property 'rows'\n\n  orderBy: (item1, item2) ->\n    sortColumn = @get 'sortColumn'\n    sortAscending = @get 'sortAscending'\n    return 1 unless sortColumn\n    value1 = sortColumn.getCellContent item1.get('content')\n    value2 = sortColumn.getCellContent item2.get('content')\n    result = Ember.compare value1, value2\n    if sortAscending then result else -result\n\n  createTree: (parent, node) ->\n    row = App.FinancialTableTreeTableRow.create()\n    children = (node.children || []).map (child) =>\n      @createTree row, child\n    # TODO(Peter): Hack... only collapse table if it should collapseByDefault\n    # and it is not the root. Currently the total row is the root, and if it\n    # is collapse, it causes nothing to show in the table and there is no way\n    # to get expand it.\n    row.setProperties\n      isRoot:     not parent\n      isLeaf:     Ember.isEmpty(children)\n      content:    node\n      parent:     parent\n      children:   children\n      groupName:  node.group_name\n      isCollapsed:no\n    row\n\n  flattenTree: (parent, node, rows) ->\n    rows.pushObject node\n    (node.children || []).forEach (child) =>\n      @flattenTree node, child, rows\n    rows\n\n  computeStyles: (parent, node) ->\n    node.computeStyles parent\n    node.get('children').forEach (child) =>\n      @computeStyles node, child</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/financial_table/financial_table_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"ember-table-cell-container\">\n  <span class=\"ember-table-content\">\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.cellContent", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </span>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_table/financial_table/financial_table_header_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"ember-table-cell-container\">\n  <div class=\"ember-table-header-content-container\">\n    <span class=\"ember-table-content\">\n      ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.content.headerCellName", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n    </span>\n  </div>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_table/financial_table/financial_table_header_tree_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"ember-table-cell-container\">\n  <span ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'class': (":ember-table-toggle-span :ember-table-toggle\n      isCollapsed:ember-table-expand:ember-table-collapse")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n      ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleTableCollapse", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n    <i class=\"icon-caret-down ember-table-toggle-icon\"></i>\n  </span>\n  <div class=\"ember-table-header-content-container\">\n    <span class=\"ember-table-content\">\n      ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.column.headerCellName", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n    </span>\n  </div>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_table/financial_table/financial_table_tree_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"ember-table-cell-container\" ");
  hashContexts = {'style': depth0};
  hashTypes = {'style': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'style': ("view.paddingStyle")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  <span ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'class': (":ember-table-toggle-span view.row.isLeaf::ember-table-toggle\n    view.row.isCollapsed:ember-table-expand:ember-table-collapse")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleCollapse", "view.row", {hash:{},contexts:[depth0,depth0],types:["ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n    <i class=\"icon-caret-down ember-table-toggle-icon\"></i>\n  </span>\n  <span class=\"ember-table-content\">\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.cellContent", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </span>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_table/fluid"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Fluid</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'numFixedColumns': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'numFixedColumns': "INTEGER",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.FluidTable", {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'numFixedColumns': (0),
    'rowHeight': (30),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;view App.FluidTable\n  hasHeader=true\n  hasFooter=false\n  numFixedColumns=0\n  rowHeight=30\n  columnsBinding=\"columns\"\n  contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>fluid_table.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.FluidTable = Ember.Table.EmberTableComponent.extend\n  # actual width of the table columns (non-frozen columns)\n  _tableColumnsWidth: \"100%\"\n\n  prepareTableColumns: (columns) ->\n    @_super(columns)\n    # Some maintenance on the columns for percent resizing\n    for col, i in columns\n      col.set(\"_nextColumn\", columns.objectAt(i + 1))\n\nApp.FluidColumnDefinition = Ember.Table.ColumnDefinition.extend\n  isResizable: Ember.computed ->\n    if @get('_nextColumn') then yes else no\n  .property '_nextColumn'\n\n  resize: (pxWidth, tableWidth)->\n    newMaxWidth = null\n    tableWidth = tableWidth || @get(\"controller._tableContainerWidth\")\n    return unless tableWidth\n\n    percent = (val)->\n      if \"string\" is typeof val\n        +(val.replace(\"%\", \"\"))\n      else\n        val * 100 / tableWidth\n\n    # either from a tabel resize or a column resize\n    oldWidth = percent(@get(\"columnWidth\"))\n    newWidth = if 'number' is typeof pxWidth then percent(pxWidth) else oldWidth\n\n    # calculate the pixel change for\n    nextCol = @get(\"_nextColumn\")\n    if nextCol\n      # calculate new and old percent width\n      diff = oldWidth - newWidth + percent(nextCol.get(\"columnWidth\"))\n      nextCol.set \"columnWidth\", diff/100*tableWidth\n      newMaxWidth = (newWidth + diff)/100*tableWidth - 100\n\n    @set \"columnWidth\", newWidth/100*tableWidth\n    @notifyPropertyChange(\"columnWidth\")\n    newMaxWidth\n\n  _convertColumnToWidth: Ember.beforeObserver ->\n    tableWidth = @get( \"controller._tableContainerWidth\" )\n    @set(\"columnWidth\", @get(\"columnWidth\")/tableWidth*100 + \"%\") if tableWidth\n  , \"controller._tableContainerWidth\"\n\n  _resizeToTable: Ember.observer ->\n    @resize()\n  , \"controller._tableContainerWidth\"\n</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  numRows: 100\n\n  columns: Ember.computed ->\n    dateColumn = App.FluidColumnDefinition.create\n      columnWidth: \"40\"\n      headerCellName: 'Date'\n      getCellContent: (row) -> row['date'].toDateString();\n    openColumn = App.FluidColumnDefinition.create\n      columnWidth: \"15\"\n      headerCellName: 'Open'\n      getCellContent: (row) -> row['open'].toFixed(2)\n    highColumn = App.FluidColumnDefinition.create\n      columnWidth: \"15\"\n      headerCellName: 'High'\n      getCellContent: (row) -> row['high'].toFixed(2)\n    lowColumn = App.FluidColumnDefinition.create\n      columnWidth: \"15\"\n      headerCellName: 'Low'\n      getCellContent: (row) -> row['low'].toFixed(2)\n    closeColumn = App.FluidColumnDefinition.create\n      columnWidth: \"15\"\n      headerCellName: 'Close'\n      getCellContent: (row) -> row['close'].toFixed(2)\n    [dateColumn, openColumn, highColumn, lowColumn, closeColumn]\n\n  content: Ember.computed ->\n    [0...@get('numRows')].map (index) ->\n      date = new Date()\n      date.setDate(date.getDate() + index)\n      date:  date\n      open:  Math.random() * 100 - 50\n      high:  Math.random() * 100 - 50\n      low:   Math.random() * 100 - 50\n      close: Math.random() * 100 - 50\n      volume: Math.random() * 1000000\n  .property 'numRows'</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/horizon"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Horizon</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'numFixedColumns': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'numFixedColumns': "INTEGER",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Table.EmberTableComponent", {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'numFixedColumns': (0),
    'rowHeight': (30),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/overview"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Hello World Table</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_simple.png\" />\n          </div>\n        ");
  }

function program3(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>AJAX cells</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_ajax.png\" />\n          </div>\n        ");
  }

function program5(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Bar cells</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_bars.png\" />\n          </div>\n        ");
  }

function program7(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Dynamic bar cells</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_dynamic_bars.png\" />\n          </div>\n        ");
  }

function program9(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Tree & financial table</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_financial.png\" />\n          </div>\n        ");
  }

function program11(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Editable cell</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_editable.png\" />\n          </div>\n        ");
  }

function program13(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Sparkline cell using D3.js</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_sparkline.png\" />\n          </div>\n        ");
  }

function program15(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Horizon cell using D3.js</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_horizon.png\" />\n          </div>\n        ");
  }

function program17(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Fluid table</h4>\n            <img class=\"preview-box\" src=\"/img/preview_table_simple.png\" />\n          </div>\n        ");
  }

  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h1>Ember Table</h1>\n      <p class=\"elevated\">Ember table allows you to render very\n      large data sets by only rendering the rows that are being\n      displayed.<br />It is written as an ember component with an API that is\n      easy to understand and extend.</p>\n\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container ember-table-financial\">\n          ");
  hashContexts = {'dataBinding': depth0};
  hashTypes = {'dataBinding': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.FinancialTableComponent", {hash:{
    'dataBinding': ("data")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n        </div>\n      </div>\n      <div class=\"example-description\">\n        <p class=\"reduced right-align\">Ember-Table with financial theme. Table with half a million rows. <a href=\"#\">Read more →</a></p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <h3>Features</h3>\n      <ul class=\"styled\">\n        <li>Lazy rendering and support for millions of rows</li>\n        <li>Support for column resizing and reordering</li>\n        <li>Fully configurable, customizable, and extendable</li>\n      </ul>\n    </div>\n    <div class=\"col-md-6\">\n      <h3>Dependencies</h3>\n      <ul class=\"styled\">\n        <li><a target=\"_BLANK\" href=\"http://emberjs.com/\">Ember.js</a></li>\n        <li><a target=\"_BLANK\" href=\"http://jqueryui.com/\">jquery-ui</a></li>\n        <li><a target=\"_BLANK\" href=\"https://github.com/brandonaaron/jquery-mousewheel\">jquery.mousewheel.js</a></li>\n        <li><a target=\"_BLANK\" href=\"https://github.com/LearnBoost/antiscroll\">antiscroll.js</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <hr>\n      <h1>Examples</h1>\n      <p class=\"elevated\">The examples below demonstrate how you can extend and customize the table.</p>\n      <div class=\"row ember-table-examples\">\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.simple", options) : helperMissing.call(depth0, "linkTo", "emberTable.simple", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.ajax", options) : helperMissing.call(depth0, "linkTo", "emberTable.ajax", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.bars", options) : helperMissing.call(depth0, "linkTo", "emberTable.bars", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.dynamic-bars", options) : helperMissing.call(depth0, "linkTo", "emberTable.dynamic-bars", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.financial", options) : helperMissing.call(depth0, "linkTo", "emberTable.financial", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.editable", options) : helperMissing.call(depth0, "linkTo", "emberTable.editable", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.sparkline", options) : helperMissing.call(depth0, "linkTo", "emberTable.sparkline", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.horizon", options) : helperMissing.call(depth0, "linkTo", "emberTable.horizon", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.fluid", options) : helperMissing.call(depth0, "linkTo", "emberTable.fluid", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Getting Started</h1>\n      <p>You will need <a target=\"_BLANK\" href=\"http://nodejs.org/\">node</a> installed as a development dependency.</p>\n      <p><a href=\"https://github.com/Addepar/ember-table/\">Clone it from Github</a> or <a href=\"https://github.com/Addepar/ember-table/zipball/master\">download the ZIP repo<a><p>\n      <div class=\"highlight\">\n<pre><code>$ npm install -g grunt-cli\n$ npm install\n$ grunt\n$ node examples.js</code></pre>\n      <p>Go to your browser and navigate to localhost:8000/gh_pages</p>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Changelog</h1>\n      <ul class=\"styled\">\n        <li>v0.1 - October 21, 2013. Branch: <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-table/tree/master\">master →</a></li>\n        <li>v0.0.1 - December 20, 2012. Branch: <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-table/tree/version-0.1\">version-0.1 →</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Contributing</h1>\n      <p>You can contribute to this project in one of two ways:\n      <ul class=\"styled\">\n        <li>Browse the ember-table <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-table/issues?state=open\">issues</a> and report bugs</li>\n        <li>Clone the ember-table repo, make some changes according to our development guidelines and issue a pull-request with your changes.</li>\n      </ul>\n      <p>We keep the ember-table.js code to the minimum necessary, giving users as much control as possible.</p>\n    </div>\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Acknowledgements</h1>\n      <p><a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-table/graphs/contributors\">List of Contributors on Github</a></p>\n      <p>With lots of help from the Ember.js team</p>\n      <p><a target=\"_BLANK\" href=\"https://twitter.com/ebryn\">ebryn</a>, <a target=\"_BLANK\" href=\"https://twitter.com/tomdale\">tomdale</a>, <a target=\"_BLANK\" href=\"https://twitter.com/wycats\">wycats</a></p>\n      <p>The original idea for lazy rendering was inspired by Erik Bryn.</p>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/simple"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Simple</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasFooter': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasFooter': "BOOLEAN",'columnsBinding': "STRING",'contentBinding': "STRING"};
  options = {hash:{
    'hasFooter': (false),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['table-component'] || depth0['table-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "table-component", options))));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n  hasFooter=false\n  columnsBinding=\"columns\"\n  contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  numRows: 100\n\n  columns: Ember.computed ->\n    dateColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 150\n      textAlign: 'text-align-left'\n      headerCellName: 'Date'\n      getCellContent: (row) -> row['date'].toDateString();\n    openColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Open'\n      getCellContent: (row) -> row['open'].toFixed(2)\n    highColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'High'\n      getCellContent: (row) -> row['high'].toFixed(2)\n    lowColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Low'\n      getCellContent: (row) -> row['low'].toFixed(2)\n    closeColumn = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Close'\n      getCellContent: (row) -> row['close'].toFixed(2)\n    [dateColumn, openColumn, highColumn, lowColumn, closeColumn]\n\n  content: Ember.computed ->\n    [0...@get('numRows')].map (index) ->\n      date = new Date()\n      date.setDate(date.getDate() + index)\n      date:  date\n      open:  Math.random() * 100 - 50\n      high:  Math.random() * 100 - 50\n      low:   Math.random() * 100 - 50\n      close: Math.random() * 100 - 50\n      volume: Math.random() * 1000000\n  .property 'numRows'</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/sparkline"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>Ember Table <small>Sparkline</small></h1>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"example-container\">\n        <div class=\"ember-table-example-container\">\n          ");
  hashContexts = {'hasHeader': depth0,'hasFooter': depth0,'numFixedColumns': depth0,'rowHeight': depth0,'columnsBinding': depth0,'contentBinding': depth0};
  hashTypes = {'hasHeader': "BOOLEAN",'hasFooter': "BOOLEAN",'numFixedColumns': "INTEGER",'rowHeight': "INTEGER",'columnsBinding': "STRING",'contentBinding': "STRING"};
  options = {hash:{
    'hasHeader': (true),
    'hasFooter': (false),
    'numFixedColumns': (1),
    'rowHeight': (30),
    'columnsBinding': ("columns"),
    'contentBinding': ("content")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['table-component'] || depth0['table-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "table-component", options))));
  data.buffer.push("\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application.hbs</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;table-component\n  hasFooter=false\n  columnsBinding=\"columns\"\n  contentBinding=\"content\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>spark_line_table_cell_view.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.SparkLineTableCellView = Ember.Table.TableCell.extend\n  template: Ember.Handlebars.compile(\"\")\n  heightBinding: 'controller.rowHeight'\n\n  onContentOrSizeDidChange: Ember.observer ->\n    @$('svg').remove()\n    @renderD3View()\n  , 'row', 'width'\n\n  didInsertElement: -> @renderD3View()\n\n  renderD3View: ->\n    data  = @get 'row.timeseries'\n    return unless data\n    h     = @get 'height'\n    w     = @get 'width'\n    p     = 2\n    min   = Math.min.apply(null, data)\n    max   = Math.max.apply(null, data)\n    len   = data.length\n    fill  = d3.scale.category10()\n    xscale= d3.scale.linear().domain([0, len]).range([p, w - p])\n    yscale= d3.scale.linear().domain([min, max]).range([h - p, p])\n    line  = d3.svg.line().x((d, i) -> xscale(i)).y((d) -> yscale(d))\n    svg   = d3.select(\"##{@get('elementId')}\")\n              .append('svg:svg').attr('height', h).attr('width', w);\n    g = svg.append('svg:g')\n    g.append('svg:path')\n     .attr('d', line(data))\n     .attr('stroke', (d) -> fill(Math.round(Math.random()) * 10))\n     .attr('fill', 'none')</pre>\n      </div>\n    </div>\n\n\n    <div class=\"col-md-12 bumper-30\">\n      <h3>application_controller.coffee</h3>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  numRows: 100\n  columns: Ember.computed ->\n    name = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Name'\n      getCellContent: (row) -> 'Asset ' + row['name']\n    open = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Open'\n      getCellContent: (row) -> row['open'].toFixed(2)\n    spark = Ember.Table.ColumnDefinition.create\n      columnWidth: 200\n      headerCellName: 'Sparkline'\n      tableCellViewClass: 'App.SparklineTableExample.SparkCellView'\n      getCellContent: Ember.K\n    close = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Close'\n      getCellContent: (row) -> row['close'].toFixed(2)\n    low = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'Low'\n      getCellContent: (row) -> row['low'].toFixed(2)\n    high = Ember.Table.ColumnDefinition.create\n      columnWidth: 100\n      headerCellName: 'High'\n      getCellContent: (row) -> row['high'].toFixed(2)\n    [name, open, spark, close, low, high]\n\n  content: Ember.computed ->\n    randomWalk = (numSteps) ->\n      lastValue = 0\n      [0...numSteps].map ->\n        lastValue = lastValue + d3.random.normal()()\n\n    [0...@get('numRows')].map (num, index) ->\n      data = randomWalk(100)\n      name: index\n      timeseries: data\n      open:  data[0]\n      close: data[99]\n      low:   Math.min.apply(null, data)\n      high:  Math.max.apply(null, data)\n   .property 'numRows'\n</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_table/tree_table/table_header_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"ember-table-content-container\" ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sortByColumn", "view.content", {hash:{},contexts:[depth0,depth0],types:["ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  <span class=\"ember-table-content\">\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.content.headerCellName", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </span>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_table/tree_table/table_header_tree_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("<span ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'class': (":ember-table-toggle-span view.row.isLeaf::ember-table-toggle\n    view.row.isCollapsed:ember-table-expand:ember-table-collapse")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleCollapse", "view.row", {hash:{},contexts:[depth0,depth0],types:["ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  <i class=\"icon-caret-down ember-table-toggle-icon\"></i>\n</span>\n<div class=\"ember-table-content-container\" ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sortByColumn", "view.column", {hash:{},contexts:[depth0,depth0],types:["ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  <span class=\"ember-table-content\">\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.column.headerCellName", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </span>\n</div>");
  return buffer;

});

Ember.TEMPLATES["ember_table/tree_table/table_tree_cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("<span ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  data.buffer.push(escapeExpression(helpers.bindAttr.call(depth0, {hash:{
    'class': (":ember-table-toggle-span view.row.isLeaf::ember-table-toggle\n    view.row.isCollapsed:ember-table-expand:ember-table-collapse")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleCollapse", "view.row", {hash:{},contexts:[depth0,depth0],types:["ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  <i class=\"icon-caret-down ember-table-toggle-icon\"></i>\n</span>\n<span class=\"ember-table-content\">\n  ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "view.cellContent", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n</span>");
  return buffer;

});

Ember.TEMPLATES["ember_widgets"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {

  var buffer = '';
  data.buffer.push("\n  ");
  data.buffer.push("\n  <div class=\"hero-container\">\n    <div class=\"hero widgets-hero\">\n      <div class=\"hero-overlay\"></div>\n    </div>\n    <div class=\"container hero-content-container\">\n      <div class=\"row\">\n        <div class=\"span12 hero-tagline center-align hidden-tablet\">\n          <h1 class=\"elevated\">Ember Widgets</h1>\n          <p class=\"elevated\">A powerful and easy to use component library for Ember.js<br><br><a href=\"https://github.com/addepar/ember-widgets/zipball/master\" class=\"addepar-btn addepar-btn-large addepar-btn-outline addepar-btn-white\">Download Ember-Widgets</a></p>\n        </div>\n      </div>\n    </div>\n  </div>\n");
  return buffer;
  }

function program3(depth0,data) {

  var buffer = '';
  data.buffer.push("\n  ");
  data.buffer.push("\n  <div class=\"hero-container small-hero-container\">\n    <div class=\"hero widgets-hero\">\n      <div class=\"hero-overlay\"></div>\n    </div>\n  </div>\n");
  return buffer;
  }

  hashTypes = {};
  hashContexts = {};
  stack1 = helpers['if'].call(depth0, "showLargeHero", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n\n");
  data.buffer.push("\n<div class=\"container\">\n  <div class=\"row\">\n\n    ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "ember_widgets/sub_navigation", options) : helperMissing.call(depth0, "partial", "ember_widgets/sub_navigation", options))));
  data.buffer.push("\n\n    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "outlet", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </div>\n</div>\n\n");
  data.buffer.push("\n");
  data.buffer.push("\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/_sub_navigation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Overview");
  }

function program3(depth0,data) {


  data.buffer.push("API &amp; Documentation");
  }

function program5(depth0,data) {


  data.buffer.push("Accordion");
  }

function program7(depth0,data) {


  data.buffer.push("Carousel");
  }

function program9(depth0,data) {


  data.buffer.push("Modal");
  }

function program11(depth0,data) {


  data.buffer.push("Popover");
  }

function program13(depth0,data) {


  data.buffer.push("Select");
  }

  data.buffer.push("\n<div class=\"col-md-2 sub-navigation-sidebar\">\n  <ul class=\"list-unstyled github-navigation\">\n    <li>\n      <a class=\"btn btn-default\" target=\"_BLANK\" href=\"https://github.com/addepar/ember-widgets\">\n        <i class=\"icon-github\"></i> View on GitHub\n      </a>\n    </li>\n    <li>\n      <iframe src=\"http://ghbtns.com/github-btn.html?user=addepar&amp;repo=ember-widgets&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"130\" height=\"30\"></iframe>\n    </li>\n  </ul>\n  <hr>\n  <ul class=\"list-unstyled project-navigation\">\n    <li class=\"sub-title\">Ember Widgets</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.overview", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.documentation", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.documentation", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n  </ul>\n  <hr>\n  <ul class=\"list-unstyled project-navigation\">\n    <li class=\"sub-title\">Examples</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.accordion", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.accordion", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.carousel", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.carousel", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.modal", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.modal", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.popover", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.popover", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.select", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.select", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n  </ul>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/accordion"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, options, hashTypes, hashContexts, self=this, helperMissing=helpers.helperMissing, functionType="function", blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {

  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;
  data.buffer.push("\n          ");
  hashContexts = {'isActive': depth0,'title': depth0};
  hashTypes = {'isActive': "BOOLEAN",'title': "STRING"};
  options = {hash:{
    'isActive': (true),
    'title': ("Collapsible Group Item #1")
  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['accordion-item'] || depth0['accordion-item']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "accordion-item", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n          ");
  hashContexts = {'title': depth0};
  hashTypes = {'title': "STRING"};
  options = {hash:{
    'title': ("Collapsible Group Item #2")
  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['accordion-item'] || depth0['accordion-item']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "accordion-item", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n          ");
  hashContexts = {'title': depth0};
  hashTypes = {'title': "STRING"};
  options = {hash:{
    'title': ("Collapsible Group Item #3")
  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['accordion-item'] || depth0['accordion-item']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "accordion-item", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  return buffer;
  }
function program2(depth0,data) {


  data.buffer.push("\n            Anim pariatur cliche reprehenderit...\n          ");
  }

  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2>Accordion <small> Ember.Widgets.Accordion</small></h2>\n      <p class=\"elevated\">Displays collapsible content panels for presenting information in a limited amount of space. Click headers to expand/collapse content that is broken into logical sections, much like tabs.</p>\n\n      <div class=\"example-container\">\n        ");
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  if (stack1 = helpers['accordion-component']) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0['accordion-component']; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  hashTypes = {};
  hashContexts = {};
  if (!helpers['accordion-component']) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h4>Application.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;#accordion-component&#125;&#125;\n  &#123;&#123;#accordion-item isActive=true title=&quot;Collapsible Group Item #1&quot;&#125;&#125;\n    Anim pariatur cliche reprehenderit...\n  &#123;&#123;/accordion-item&#125;&#125;\n  &#123;&#123;#accordion-item title=&quot;Collapsible Group Item #2&quot;&#125;&#125;\n    Anim pariatur cliche reprehenderit...\n  &#123;&#123;/accordion-item&#125;&#125;\n  &#123;&#123;#accordion-item title=&quot;Collapsible Group Item #3&quot;&#125;&#125;\n    Anim pariatur cliche reprehenderit...\n  &#123;&#123;/accordion-item&#125;&#125;\n&#123;&#123;/accordion-component&#125;&#125;</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/carousel"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, options, hashTypes, hashContexts, self=this, helperMissing=helpers.helperMissing, functionType="function", blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {

  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;
  data.buffer.push("\n          ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  options = {hash:{
    'class': ("active")
  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['carousel-item'] || depth0['carousel-item']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "carousel-item", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n          ");
  options = {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  if (stack2 = helpers['carousel-item']) { stack2 = stack2.call(depth0, options); }
  else { stack2 = depth0['carousel-item']; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  hashTypes = {};
  hashContexts = {};
  if (!helpers['carousel-item']) { stack2 = blockHelperMissing.call(depth0, stack2, options); }
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n          ");
  options = {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  if (stack2 = helpers['carousel-item']) { stack2 = stack2.call(depth0, options); }
  else { stack2 = depth0['carousel-item']; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  hashTypes = {};
  hashContexts = {};
  if (!helpers['carousel-item']) { stack2 = blockHelperMissing.call(depth0, stack2, options); }
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  return buffer;
  }
function program2(depth0,data) {


  data.buffer.push("\n            <img src=\"/img/bootstrap-mdo-sfmoma-01.jpg\" alt=\"\">\n          ");
  }

function program4(depth0,data) {


  data.buffer.push("\n            <img src=\"/img/bootstrap-mdo-sfmoma-02.jpg\" alt=\"\">\n          ");
  }

function program6(depth0,data) {


  data.buffer.push("\n            <img src=\"/img/bootstrap-mdo-sfmoma-03.jpg\" alt=\"\">\n          ");
  }

  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2>Carousel <small> Ember.Widgets.Carousel</small></h2>\n      <p class=\"elevated\">The slideshow below shows a generic plugin and component for cycling through elements like a carousel.</p>\n\n      <div class=\"example-container\">\n        ");
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  if (stack1 = helpers['carousel-component']) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0['carousel-component']; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  hashTypes = {};
  hashContexts = {};
  if (!helpers['carousel-component']) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n      </div>\n    </div>\n\n    <div class=\"col-md-12 bumper-30\">\n      <h4>Application.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;#carousel-component&#125;&#125;<br/>  &#123;&#123;#carousel-item class=&quot;active&quot;&#125;&#125;<br/>    &lt;img src=&quot;/img/bootstrap-mdo-sfmoma-01.jpg&quot; alt=&quot;&quot;&gt;<br/>  &#123;&#123;/carousel-item&#125;&#125;<br/>  &#123;&#123;#carousel-item&#125;&#125;<br/>    &lt;img src=&quot;/img/bootstrap-mdo-sfmoma-02.jpg&quot; alt=&quot;&quot;&gt;<br/>  &#123;&#123;/carousel-item&#125;&#125;<br/>  &#123;&#123;#carousel-item&#125;&#125;<br/>    &lt;img src=&quot;/img/bootstrap-mdo-sfmoma-03.jpg&quot; alt=&quot;&quot;&gt;<br/>  &#123;&#123;/carousel-item&#125;&#125;<br/>&#123;&#123;/carousel-component&#125;&#125;</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/custom_modal_content"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;


  data.buffer.push("<p>Isn't this one fine day ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "content.name", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("?</p>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/custom_popover_content"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;


  data.buffer.push("Isn't this one fine day ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "content.name", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("?");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/documentation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '';


  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h1>API</h1>\n  <h2>Ember.Widgets.SelectComponent Options</h2>\n  <table class=\"table ember-widgets-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>itemViewClass</td>\n      <td>Ember.Widgets.SelectOptionView</td>\n      <td><p>The view to be displayed in the rows of the select.</p></td>\n    </tr>\n    <tr>\n      <td>prompt</td>\n      <td>Select a Value</td>\n      <td><p>The prompt to be displayed by default in the select, when\n        nothing else is selected.</p></td>\n    </tr>\n    <tr>\n      <td>highlightedIndex</td>\n      <td>-1</td>\n      <td><p>The index of the select item that is highlighted.</p></td>\n    </tr>\n    <tr>\n      <td>tabindex</td>\n      <td>-1</td>\n      <td><p>The tabindex of the component.</p></td>\n    </tr>\n    <tr>\n      <td>showDropdown</td>\n      <td>no</td>\n      <td><p>If yes then shows a dropdown.</p></td>\n    </tr>\n    <tr>\n      <td>dropdownHeight</td>\n      <td>300</td>\n      <td><p>The height of the dropdown.</p></td>\n    </tr>\n    <tr>\n      <td>rowHeight</td>\n      <td>26</td>\n      <td><p>Row height in pixels for the lazy list. Important: rowHeight must be synched with the CSS</p></td>\n    </tr>\n    <tr>\n      <td>sortLabels</td>\n      <td>yes</td>\n      <td><p>Option to indicate whether we should sort the labels</p></td>\n    </tr>\n    <tr>\n      <td>isSelect</td>\n      <td>no</td>\n      <td><p>If isSelect is true, we will not show the search box</p></td>\n    </tr>\n    <tr>\n      <td>isButton</td>\n      <td>yes</td>\n      <td><p>If is button is true, the select will look like a button</p></td>\n    </tr>\n    <tr>\n      <td>dropdownToggleIcon</td>\n      <td>icon-sort</td>\n      <td><p>Font-awesome dependency - Change the icon when necessary</p></td>\n    </tr>\n    <tr>\n      <td>content</td>\n      <td>[]</td>\n      <td><p>The list of options.</p></td>\n    </tr>\n    <tr>\n      <td>selection</td>\n      <td>null</td>\n      <td><p>The option which is currently selected.</p></td>\n    </tr>\n    <tr>\n      <td>optionLabelPath</td>\n      <td>&#39;&#39;</td>\n      <td><p>The path of the label, for options.</p></td>\n    </tr>\n    <tr>\n      <td>optionValuePath</td>\n      <td>&#39;&#39;</td>\n      <td><p>The path of the value, for options.</p></td>\n    </tr>\n    <tr>\n      <td>optionGroupPath</td>\n      <td>&#39;&#39;</td>\n      <td><p>The path of the group, for options.</p></td>\n    </tr>\n    <tr>\n      <td>optionDefaultPath</td>\n      <td>&#39;&#39;</td>\n      <td><p>The path of the default option.</p></td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Ember.Widgets.PopoverComponent Options</h2>\n  <table class=\"table ember-widgets-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>targetElement</td>\n      <td>null</td>\n      <td><p>The element this popover will be attached to.</p></td>\n    </tr>\n    <tr>\n      <td>placement</td>\n      <td>top</td>\n      <td><p>The direction the popover will pop up. Other options are\n        bottom, top-right, top-left, bottom-right, bottom-left, left,\n        and right</p></td>\n    </tr>\n    <tr>\n      <td>title</td>\n      <td>''</td>\n      <td><p>The title to be displayed on the popover.</p></td>\n    </tr>\n    <tr>\n      <td>left</td>\n      <td>0</td>\n      <td><p>The left offset of the popover, in pixels.</p></td>\n    </tr>\n    <tr>\n      <td>top</td>\n      <td>0</td>\n      <td><p>The top offset of the popover, in pixels.</p></td>\n    </tr>\n    <tr>\n      <td>fade</td>\n      <td>yes</td>\n      <td><p>If this is yes then the modal fades in/out.</p></td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Ember.Widgets.ModalComponent Options</h2>\n  <table class=\"table ember-widgets-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>backdrop</td>\n      <td>yes</td>\n      <td><p>If this is yes then the modal will be displayed with a\n        semi-opaque backdrop.</p></td>\n    </tr>\n    <tr>\n      <td>fade</td>\n      <td>yes</td>\n      <td><p>If this is yes then the modal fades in/out.</p></td>\n    </tr>\n    <tr>\n      <td>headerText</td>\n      <td>\"Modal Header\"</td>\n      <td><p>The text that is displayed in the header of the modal.</p></td>\n    </tr>\n    <tr>\n      <td>confirmText</td>\n      <td>\"Confirm\"</td>\n      <td><p>The text that is displayed in the confirmation button of\n        the modal.</p></td>\n    </tr>\n    <tr>\n      <td>cancelText</td>\n      <td>\"Cancel\"</td>\n      <td><p>The text that is displayed in the cancel button of the\n        modal.</p></td>\n    </tr>\n    <tr>\n      <td>bodyElementSelector</td>\n      <td>'.modal-backdrop'</td>\n      <td><p></p></td>\n    </tr>\n  </table>\n\n  <hr>\n  <h2>Ember.Widgets.CarouselComponent Options</h2>\n  <table class=\"table ember-widgets-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>activeIndex</td>\n      <td>0</td>\n      <td><p>The index of the carousel item which is currently being\n        shown.</p></td>\n    </tr>\n  </table>\n\n\n  layoutName: 'carousel'\n  classNames: ['carousel', 'slide']\n  classNameBindings: ['sliding']\n\n  <hr>\n  <h2>Ember.Widgets.AccordionComponent Options</h2>\n  <table class=\"table ember-widgets-options\">\n    <tr>\n      <th style=\"width: 200px;\">Option</th>\n      <th style=\"width: 150px;\">Default</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>activeIndex</td>\n      <td>0</td>\n      <td><p>The index of the accordian item which is currently being\n        shown.</p></td>\n    </tr>\n  </table>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/modal"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2>Modal <small> Ember.Widgets.Modal</small></h2>\n      <p class=\"elevated\">The modal is an absolutely positioned dialog\ncomponent which overlays the page. Typically, modals are pre-rendered\ninto the page, even before they are needed. Our approach appends the\nmodal when it is required and removes it once it is no longer visible.\nWe designed it such that actions are sent to the application the same way <a\nhref=\"http://emberjs.com/guides/components/sending-actions-from-components-to-your-application/\">components\nsend them.</a> One caveat is that we need to pass in the current\ncontroller as the target object to receive actions and to inherit the\ncontainer.</p>\n    </div>\n    <div class=\"col-md-6\">\n      <h3>Modal with content property</h3>\n      <div class=\"example-container\">\n        <button type=\"button\" class=\"btn btn-primary\" ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "showModal", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n          Show Modal\n        </button>\n      </div>\n\n      <h4 class=\"bumper-30\">Application_controller.coffee</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  actions:\n    showModal: ->\n      Ember.Widgets.ModalComponent.popup\n        targetObject: this\n        confirm: \"modalConfirm\"\n        cancel: \"modalCancel\"\n        content: \"Isn't this one fine day?\"\n\n    modalConfirm: -> console.log(\"Modal Confirm!\")\n\n    modalCancel: -> console.log(\"Modal Cancel!\")\n</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h3>Modal with contentViewClass</h3>\n      <div class=\"example-container\">\n        <button type=\"button\" class=\"btn btn-primary\" ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "showModalWithCustomContent", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n          Show Modal With Custom Content\n        </button>\n      </div>\n\n      <h4 class=\"bumper-30\">Application_controller.coffee</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.ApplicationController = Ember.Controller.extend\n  actions:\n    showModal: ->\n      Ember.Widgets.ModalComponent.popup\n        targetObject: this\n        confirm: \"modalConfirm\"\n        cancel: \"modalCancel\"\n        content: { name: \"Louis\" }\n        contentViewClass: App.CustomModalContentView\n\n    modalConfirm: -> console.log(\"Modal Confirm!\")\n\n    modalCancel: -> console.log(\"Modal Cancel!\")\n</pre>\n      </div>\n\n      <h4 class=\"bumper-30\">Custom_modal_content_view.coffee</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.CustomModalContentView = Ember.View.extend\n  templateName: 'custom-modal-content'\n</pre>\n      </div>\n\n      <h4 class=\"bumper-30\">Custom-modal-content.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">Isn't this one fine day &#123;&#123;content.name&#125;&#125;?</pre>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/overview"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Accordion");
  }

function program3(depth0,data) {


  data.buffer.push("Carousel");
  }

function program5(depth0,data) {


  data.buffer.push("Modal");
  }

function program7(depth0,data) {


  data.buffer.push("Popover");
  }

function program9(depth0,data) {


  data.buffer.push("Select &amp; Multi-Select");
  }

function program11(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Accordion</h4>\n            <img class=\"preview-box\" src=\"/img/preview_widgets_accordion.png\" />\n          </div>\n        ");
  }

function program13(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Carousel</h4>\n            <img class=\"preview-box\" src=\"/img/preview_widgets_carousel.png\" />\n          </div>\n        ");
  }

function program15(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Modal</h4>\n            <img class=\"preview-box\" src=\"/img/preview_widgets_modal.png\" />\n          </div>\n        ");
  }

function program17(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Popover</h4>\n            <img class=\"preview-box\" src=\"/img/preview_widgets_popover.png\" />\n          </div>\n        ");
  }

function program19(depth0,data) {


  data.buffer.push("\n          <div class=\"col-md-4\">\n            <h4>Select &amp; Multi-Select</h4>\n            <img class=\"preview-box\" src=\"/img/preview_widgets_select.png\" />\n          </div>\n        ");
  }

  data.buffer.push("\n<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h1>Ember Widgets</h1>\n      <p class=\"elevated\">A component library built with the <a\n        target=\"_BLANK\" href=\"http://emberjs.com/\">Ember.js</a>\n      framework. Includes easy to extend components such as select,\n      popover, modal, carousel, and accordion. This library is built on\n      bootstrap 3.0 CSS and represents our ideas about component best\n      practices.</p>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <h3>Features</h3>\n      <ul class=\"styled\">\n        <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.accordion", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.accordion", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.carousel", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.carousel", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.modal", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.modal", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.popover", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.popover", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.select", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.select", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n      </ul>\n    </div>\n    <div class=\"col-md-6\">\n      <h3>Dependencies</h3>\n      <ul class=\"styled\">\n        <li><a target=\"_BLANK\" href=\"http://emberjs.com/\">Ember.js</a></li>\n        <li><a target=\"_BLANK\" href=\"http://emberjs.com/list-view/\">List-View</a></li>\n        <li><a target=\"_BLANK\" href=\"http://getbootstrap.com/\">Bootstrap (V3)</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <hr>\n      <h1>Widgets</h1>\n      <p class=\"elevated\">The examples below demonstrate how you can extend and customize the widgets.</p>\n      <div class=\"row ember-widgets-examples\">\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.accordion", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.accordion", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.carousel", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.carousel", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.modal", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.modal", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.popover", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.popover", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.select", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.select", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Getting Started</h1>\n      <p>You will need <a target=\"_BLANK\" href=\"http://nodejs.org/\">node</a> installed as a development dependency.</p>\n      <p><a href=\"https://github.com/Addepar/ember-widgets/\">Clone it from Github</a> or <a href=\"https://github.com/addepar/ember-widgets/zipball/master\">download the ZIP repo<a><p>\n      <div class=\"highlight\">\n<pre><code>$ npm install -g grunt-cli\n$ npm install\n$ grunt\n$ node examples.js</code></pre>\n      <p>Go to your browser and navigate to localhost:8000/gh_pages</p>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Changelog</h1>\n      <ul class=\"styled\">\n        <li>v0.1 - October 21, 2013. Branch: <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-widgets/tree/master\">master →</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Contributing</h1>\n      <p>You can contribute to this project in one of two ways:\n      <ul class=\"styled\">\n        <li>Browse the ember-widgets <a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-widgets/issues?state=open\">issues</a> and report bugs</li>\n        <li>Clone the ember-widgets repo, make some changes according to our development guidelines and issue a pull-request with your changes.</li>\n      </ul>\n      <p>We keep the ember-widgets.js code to the minimum necessary, giving users as much control as possible.</p>\n    </div>\n    <div class=\"col-md-6\">\n      <hr>\n      <h1>Acknowledgements</h1>\n      <p><a target=\"_BLANK\" href=\"https://github.com/Addepar/ember-widgets/graphs/contributors\">List of Contributors on Github</a></p>\n      <p>With lots of help from the Ember.js team</p>\n      <p><a target=\"_BLANK\" href=\"https://twitter.com/ebryn\">ebryn</a>, <a target=\"_BLANK\" href=\"https://twitter.com/tomdale\">tomdale</a>, <a target=\"_BLANK\" href=\"https://twitter.com/wycats\">wycats</a></p>\n      <p>The original idea for lazy rendering was inspired by Erik Bryn.</p>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/popover"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("\n          Show Popover Top\n        ");
  }

function program3(depth0,data) {


  data.buffer.push("\n          Show Popover Button-Left\n        ");
  }

  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2>Popover <small> Ember.Widgets.Popover</small></h2>\n      <p class=\"elevated\">Add small overlays of content to any element\nfor displaying additional information. We created the popover link as a\ncomponent which can either hold a content string specified in the handlebar\nhelper or point to a custom view class for more sophisticated look and\nfeel.</p>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h3>Simple Popover</h3>\n      <div class=\"example-container\">\n        ");
  hashContexts = {'tagName': depth0,'class': depth0,'title': depth0,'content': depth0};
  hashTypes = {'tagName': "STRING",'class': "STRING",'title': "STRING",'content': "STRING"};
  options = {hash:{
    'tagName': ("button"),
    'class': ("btn btn-primary"),
    'title': ("Hello"),
    'content': ("Hello World!")
  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['popover-link-component'] || depth0['popover-link-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "popover-link-component", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n      </div>\n\n      <h4 class=\"bumper-30\">Application.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;#popover-link-component tagName=&quot;button&quot;\n  class=&quot;btn btn-primary&quot; title=&quot;Hello&quot;\n  content=&quot;Hello World&quot;&#125;&#125;\n  Show Popover Button-Left\n&#123;&#123;/popover-link-component&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h3>Popover with contentViewClass</h3>\n      <div class=\"example-container\">\n        ");
  hashContexts = {'tagName': depth0,'class': depth0,'placement': depth0,'contentBinding': depth0,'contentViewClass': depth0};
  hashTypes = {'tagName': "STRING",'class': "STRING",'placement': "STRING",'contentBinding': "STRING",'contentViewClass': "STRING"};
  options = {hash:{
    'tagName': ("button"),
    'class': ("btn btn-primary"),
    'placement': ("bottom-left"),
    'contentBinding': ("model"),
    'contentViewClass': ("App.CustomPopoverContentView")
  },inverse:self.noop,fn:self.program(3, program3, data),contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['popover-link-component'] || depth0['popover-link-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "popover-link-component", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n      </div>\n\n      <h4 class=\"bumper-30\">Application.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;#popover-link-component tagName=&quot;button&quot;\n  class=&quot;btn btn-primary&quot; placement=&quot;bottom-left&quot;\n  contentViewClass=&quot;App.CustomPopoverContentView&quot;&#125;&#125;\n  Show Popover Button-Left\n&#123;&#123;/popover-link-component&#125;&#125;</pre>\n      </div>\n\n      <h4 class=\"bumper-30\">Custom-popover-content.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">Isn't this one fine day &#123;&#123;content.name&#125;&#125;?</pre>\n      </div>\n\n      <h4 class=\"bumper-30\">Custom_popover_content_view.coffee</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-coffee\">App.CustomPopoverContentView = Ember.View.extend\n  templateName: 'custom-popover-content'</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["ember_widgets/select"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"col-md-10 col-md-offset-2 left-border main-content-container\">\n  <h2>Select <small> Ember.Widgets.Select</small></h2>\n  <p class=\"elevated\">Ember select is a Ember.js based replacement for select boxes. It supports searching, remote data sets, and infinite scrolling of results. This component&#39;s design was inspired by the excellent <a target=\"_BLANK\" href=\"http://harvesthq.github.io/chosen/\">Chosen</a> jquery plugin and <a target=\"_BLANK\" href=\"http://ivaynberg.github.io/select2/\">Select2</a>. Uses the <a target=\"_BLANK\" href=\"https://github.com/emberjs/list-view\">ember list view</a> for lazily rendering large arrays of content.</p>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <h3>Select with Selection Binding</h3>\n      <div class=\"example-container\">\n        ");
  hashContexts = {'contentBinding': depth0,'prompt': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'selectionBinding': depth0};
  hashTypes = {'contentBinding': "STRING",'prompt': "STRING",'optionLabelPath': "STRING",'optionValuePath': "STRING",'selectionBinding': "STRING"};
  options = {hash:{
    'contentBinding': ("model"),
    'prompt': ("Select a Country"),
    'optionLabelPath': ("name"),
    'optionValuePath': ("name"),
    'selectionBinding': ("selection")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['select-component'] || depth0['select-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "select-component", options))));
  data.buffer.push("\n      </div>\n\n      <h4 class=\"bumper-30\">Application.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;select-component\n  contentBinding=\"model\"\n  prompt=\"Select a Country\"\n  optionLabelPath=\"name\"\n  optionValuePath=\"name\"\n  selectionBinding=\"selection\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n    <div class=\"col-md-6\">\n      <h3>Multi-Select</h3>\n      <div class=\"example-container\">\n        ");
  hashContexts = {'contentBinding': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'classNames': depth0};
  hashTypes = {'contentBinding': "STRING",'optionLabelPath': "STRING",'optionValuePath': "STRING",'classNames': "STRING"};
  options = {hash:{
    'contentBinding': ("model"),
    'optionLabelPath': ("name"),
    'optionValuePath': ("code"),
    'classNames': ("multi-select-example")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['multi-select-component'] || depth0['multi-select-component']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "multi-select-component", options))));
  data.buffer.push("\n      </div>\n\n      <h4 class=\"bumper-30\">Application.hbs</h4>\n      <div class=\"highlight\">\n<pre class=\"prettyprint lang-html\">&#123;&#123;multi-select-component\n  contentBinding=\"model\"\n  optionLabelPath=\"name\"\n  optionValuePath=\"code\"\n  classNames=\"multi-select-example\"\n&#125;&#125;</pre>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["footer"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Overview &amp; Getting Started");
  }

function program3(depth0,data) {


  data.buffer.push("API &amp; Documentation");
  }

function program5(depth0,data) {


  data.buffer.push("Hello World Table");
  }

function program7(depth0,data) {


  data.buffer.push("AJAX cells");
  }

function program9(depth0,data) {


  data.buffer.push("Bar cells");
  }

function program11(depth0,data) {


  data.buffer.push("Dynamic bar cells");
  }

function program13(depth0,data) {


  data.buffer.push("Tree &amp; financial table");
  }

function program15(depth0,data) {


  data.buffer.push("Editable cells");
  }

function program17(depth0,data) {


  data.buffer.push("Sparkline cells");
  }

function program19(depth0,data) {


  data.buffer.push("Horizon cells");
  }

function program21(depth0,data) {


  data.buffer.push("Fluid table");
  }

function program23(depth0,data) {


  data.buffer.push("Accordion");
  }

function program25(depth0,data) {


  data.buffer.push("Carousel");
  }

function program27(depth0,data) {


  data.buffer.push("Modal");
  }

function program29(depth0,data) {


  data.buffer.push("Popover");
  }

function program31(depth0,data) {


  data.buffer.push("Select");
  }

function program33(depth0,data) {


  data.buffer.push("Horizontal Bar");
  }

function program35(depth0,data) {


  data.buffer.push("Vertical Bar");
  }

function program37(depth0,data) {


  data.buffer.push("Pie Chart");
  }

function program39(depth0,data) {


  data.buffer.push("Scatter Plot");
  }

function program41(depth0,data) {


  data.buffer.push("Time Series");
  }

function program43(depth0,data) {


  data.buffer.push("Home");
  }

function program45(depth0,data) {


  data.buffer.push("License");
  }

  data.buffer.push("\n<div class=\"footer\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n        <ul class=\"list-unstyled\">\n          <li><h6>Ember Table</h6></li>\n          <li><a href=\"#\"></a></li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.overview", options) : helperMissing.call(depth0, "linkTo", "emberTable.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.documentation", options) : helperMissing.call(depth0, "linkTo", "emberTable.documentation", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li class=\"bumper-30\">");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.simple", options) : helperMissing.call(depth0, "linkTo", "emberTable.simple", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.ajax", options) : helperMissing.call(depth0, "linkTo", "emberTable.ajax", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.bars", options) : helperMissing.call(depth0, "linkTo", "emberTable.bars", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.dynamic-bars", options) : helperMissing.call(depth0, "linkTo", "emberTable.dynamic-bars", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.financial", options) : helperMissing.call(depth0, "linkTo", "emberTable.financial", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.editable", options) : helperMissing.call(depth0, "linkTo", "emberTable.editable", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.sparkline", options) : helperMissing.call(depth0, "linkTo", "emberTable.sparkline", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.horizon", options) : helperMissing.call(depth0, "linkTo", "emberTable.horizon", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(21, program21, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.fluid", options) : helperMissing.call(depth0, "linkTo", "emberTable.fluid", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        </ul>\n      </div>\n      <div class=\"col-md-3\">\n        <ul class=\"list-unstyled\">\n          <li><h6>Ember Widgets</h6></li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.overview", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.documentation", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.documentation", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li class=\"bumper-30\">");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(23, program23, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.accordion", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.accordion", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.carousel", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.carousel", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(27, program27, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.modal", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.modal", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(29, program29, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.popover", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.popover", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(31, program31, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.select", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.select", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        </ul>\n      </div>\n      <div class=\"col-md-3\">\n        <ul class=\"list-unstyled\">\n          <li><h6>Ember Charts</h6></li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.overview", options) : helperMissing.call(depth0, "linkTo", "emberCharts.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.documentation", options) : helperMissing.call(depth0, "linkTo", "emberCharts.documentation", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li class=\"bumper-30\">");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(33, program33, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.horizontal_bar", options) : helperMissing.call(depth0, "linkTo", "emberCharts.horizontal_bar", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(35, program35, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.vertical_bar", options) : helperMissing.call(depth0, "linkTo", "emberCharts.vertical_bar", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(37, program37, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.pie", options) : helperMissing.call(depth0, "linkTo", "emberCharts.pie", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(39, program39, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.scatter", options) : helperMissing.call(depth0, "linkTo", "emberCharts.scatter", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(41, program41, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.time_series", options) : helperMissing.call(depth0, "linkTo", "emberCharts.time_series", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n        </ul>\n      </div>\n      <div class=\"col-md-3\">\n        <ul class=\"list-unstyled\">\n          <li><h6>Open Source</h6></li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(43, program43, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "index", options) : helperMissing.call(depth0, "linkTo", "index", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(45, program45, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "license", options) : helperMissing.call(depth0, "linkTo", "license", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          <li>\n            <address>\n              <br><br>\n              <a target=\"_BLANK\" href=\"http://goo.gl/maps/446ui\"><strong>Addepar HQ</strong><br>\n              1215 Terra Bella Ave<br>\n              Mountain View, CA 94043</a><br><br>\n\n              <a target=\"_BLANK\" href=\"http://goo.gl/maps/xEiCM\"><strong>Addepar NY</strong><br>\n              335 Madison Ave Suite 880<br>\n              New York, NY 10017</a><br>\n            </address>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 center-align\">\n        <p>&copy; 2013 Addepar, Inc.</p>\n      </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["index"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Ember Table");
  }

function program3(depth0,data) {


  data.buffer.push("Ember Widgets");
  }

function program5(depth0,data) {


  data.buffer.push("Ember Charts");
  }

function program7(depth0,data) {


  data.buffer.push("\n        <div class=\"col-md-4 preview-box\">\n          <h3>Ember Table</h3>\n          <img src=\"/img/preview_table.png\" />\n          <p class=\"reduced center-align\">\n            <a target=\"_BLANK\" href=\"https://github.com/addepar/ember-table\"><i class=\"icon-github\"></i> View on GitHub</a>\n            <iframe src=\"http://ghbtns.com/github-btn.html?user=addepar&amp;repo=ember-table&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\"></iframe>\n          </p>\n        </div>\n      ");
  }

function program9(depth0,data) {


  data.buffer.push("\n        <div class=\"col-md-4 preview-box\">\n          <h3>Ember Widgets</h3>\n          <img src=\"/img/preview_widgets.png\" />\n          <p class=\"reduced center-align\">\n            <a target=\"_BLANK\" href=\"https://github.com/addepar/addepar-components\"><i class=\"icon-github\"></i> View on GitHub</a>\n            <iframe src=\"http://ghbtns.com/github-btn.html?user=addepar&amp;repo=addepar-components&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\"></iframe>\n          </p>\n        </div>\n      ");
  }

function program11(depth0,data) {


  data.buffer.push("\n        <div class=\"col-md-4 preview-box\">\n          <h3>Ember Charts</h3>\n          <img src=\"/img/preview_charts.png\" />\n          <p class=\"reduced center-align\">\n            <a target=\"_BLANK\" href=\"https://github.com/addepar/ember-charts\"><i class=\"icon-github\"></i> View on GitHub</a>\n            <iframe src=\"http://ghbtns.com/github-btn.html?user=addepar&amp;repo=ember- charts&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\"></iframe>\n          </p>\n        </div>\n      ");
  }

  data.buffer.push("\n<div class=\"hero-container\">\n  <div class=\"hero index-hero\">\n    <div class=\"hero-overlay\"></div>\n  </div>\n  <div class=\"container hero-content-container\">\n    <div class=\"row\">\n      <div class=\"col-md-12 hero-tagline center-align hidden-tablet\">\n        <h1 class=\"elevated\">Addepar Open Source</h1>\n        <p class=\"elevated index-buttons\">");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  options = {hash:{
    'class': ("addepar-btn addepar-btn-large addepar-btn-outline addepar-btn-white")
  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable", options) : helperMissing.call(depth0, "linkTo", "emberTable", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  options = {hash:{
    'class': ("addepar-btn addepar-btn-large addepar-btn-outline addepar-btn-white")
  },inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets", options) : helperMissing.call(depth0, "linkTo", "emberWidgets", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n        ");
  hashContexts = {'class': depth0};
  hashTypes = {'class': "STRING"};
  options = {hash:{
    'class': ("addepar-btn addepar-btn-large addepar-btn-outline addepar-btn-white")
  },inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts", options) : helperMissing.call(depth0, "linkTo", "emberCharts", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</p>\n      </div>\n    </div>\n  </div>\n</div>\n\n");
  data.buffer.push("\n<div class=\"section product-preview\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-8 col-md-offset-2 center-align section-title\">\n        <h1>Addepar Open Source</h1>\n        <p class=\"elevated\">As a company built on open source, here are some of the internally-developed<br /> libraries we contribute back to the community.</p>\n        <p class=\"elevated\">If you’re interested in helping us build and contribute to these projects, <a target=\"_BLANK\" href=\"https://addepar.com/careers/\">we're hiring!</a></p>\n      </div>\n    </div>\n\n    <div class=\"row open-source-previews\">\n      ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable.overview", options) : helperMissing.call(depth0, "linkTo", "emberTable.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n      ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets.overview", options) : helperMissing.call(depth0, "linkTo", "emberWidgets.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n      ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts.overview", options) : helperMissing.call(depth0, "linkTo", "emberCharts.overview", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["license"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("\n");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "navigation", options) : helperMissing.call(depth0, "partial", "navigation", options))));
  data.buffer.push("\n\n");
  data.buffer.push("\n<div class=\"hero-container small-hero-container\">\n  <div class=\"hero index-hero\">\n    <div class=\"hero-overlay\"></div>\n  </div>\n</div>\n\n\n");
  data.buffer.push("\n<div class=\"section section-grey\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-6 col-md-offset-3 section-title\">\n        <h1>Code &amp; Documentation Licensing</h1>\n      </div>\n      <div class=\"col-md-6 col-md-offset-3\">\n        <p>The majority of open source software exclusively developed by Addepar is licensed under the liberal terms of the Apache License, Version 2.0. The documentation is generally available under the Creative Commons Attribution 3.0 Unported License. In the end, you are free to use, modify and distribute any documentation, source code or examples within our open source projects as long as you adhere to the licensing conditions present within the projects.</p>\n        <p>Also note that our engineers like to hack on their own open source projects in their free time. For code provided by our engineers outside of our official repositories on GitHub, Addepar does not grant any type of license, whether express or implied, to such code.</p>\n     </div>\n    </div>\n  </div>\n</div>\n");
  return buffer;

});

Ember.TEMPLATES["navigation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {


  data.buffer.push("Ember Table");
  }

function program3(depth0,data) {


  data.buffer.push("Ember Widgets");
  }

function program5(depth0,data) {


  data.buffer.push("Ember Charts");
  }

  data.buffer.push("\n<nav class=\"navbar navbar-transparent addepar-navbar\" role=\"navigation\">\n  <div class=\"navbar-header\">\n    <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-ex1-collapse\">\n      <span class=\"sr-only\">Toggle navigation</span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n    </button>\n    <a class=\"navbar-brand\" href=\"#\">\n      <img id=\"logo_dark\" class=\"logo\" src=\"img/addepar_logo_light.png\" /><span class=\"navbar-title\">Open Source</span>\n    </a>\n  </div>\n\n  <div class=\"collapse navbar-collapse navbar-ex1-collapse\">\n    <ul class=\"nav navbar-nav navbar-right\">\n      <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberTable", options) : helperMissing.call(depth0, "linkTo", "emberTable", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n      <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberWidgets", options) : helperMissing.call(depth0, "linkTo", "emberWidgets", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n      <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "emberCharts", options) : helperMissing.call(depth0, "linkTo", "emberCharts", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n    </ul>\n  </div><!-- /.navbar-collapse -->\n</nav>\n");
  return buffer;

});

})();

(function() {

window['PR_SHOULD_USE_CONTINUATION'] = false;


})();